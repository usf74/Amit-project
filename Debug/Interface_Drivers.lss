
Interface_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000b8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189b  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a67  00000000  00000000  00002663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d26  00000000  00000000  000030ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00003df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d15  00000000  00000000  00004787  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000549c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0b 03 	call	0x616	; 0x616 <main>
  8a:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
  92:	8f b7       	in	r24, 0x3f	; 63
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8f bf       	out	0x3f, r24	; 63
	
	// Preipheral Enable/ Disable Interrupt
	ADCSRA = (ADC_INT << 3) | (ADCSRA & 0XF7); 
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	86 b9       	out	0x06, r24	; 6
	
	// ADC Voltage Reference / Data Adjust
	ADMUX = (ADC_Volt_Ref << 6) | (ADC_Data_Adjust << 5) | (ADMUX & 0X1F);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 71       	andi	r24, 0x1F	; 31
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	87 b9       	out	0x07, r24	; 7
	
	// ADC Mode / CLK Source
	ADCSRA = (ADC_Mode << 5) | (ADC_CLK_Source) | (ADCSRA & 0XD8);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	87 62       	ori	r24, 0x27	; 39
  aa:	86 b9       	out	0x06, r24	; 6
	
	// ADC Auto Trigger Mode
	SFIOR = (ADC_AT_Mode << 5) | (SFIOR & 0X1F);
  ac:	80 b7       	in	r24, 0x30	; 48
  ae:	8f 71       	andi	r24, 0x1F	; 31
  b0:	80 bf       	out	0x30, r24	; 48
	
	// ADC Enable
	Set_Bit(ADCSRA, 7);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <DIO_SetPin_Dir>:

#include "DIO.h"

void DIO_SetPin_Dir(Uint8 port, Uint8 pin, Uint8 dir)
{
	switch (dir)
  ba:	44 23       	and	r20, r20
  bc:	19 f0       	breq	.+6      	; 0xc4 <DIO_SetPin_Dir+0xa>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	c9 f1       	breq	.+114    	; 0x134 <DIO_SetPin_Dir+0x7a>
  c2:	08 95       	ret
	{
		case DIO_PIN_IN:
		switch(port)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	91 f0       	breq	.+36     	; 0xec <DIO_SetPin_Dir+0x32>
  c8:	28 f0       	brcs	.+10     	; 0xd4 <DIO_SetPin_Dir+0x1a>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	d9 f0       	breq	.+54     	; 0x104 <DIO_SetPin_Dir+0x4a>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	29 f1       	breq	.+74     	; 0x11c <DIO_SetPin_Dir+0x62>
  d2:	08 95       	ret
		{
			case DIO_PORTA:
			Clear_Bit(DDRA, pin);
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_SetPin_Dir+0x26>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_SetPin_Dir+0x22>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	8a bb       	out	0x1a, r24	; 26
			break;
  ea:	08 95       	ret
			
			case DIO_PORTB:
			Clear_Bit(DDRB, pin);
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPin_Dir+0x3e>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPin_Dir+0x3a>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
			break;
 102:	08 95       	ret
			
			case DIO_PORTC:
			Clear_Bit(DDRC, pin);
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPin_Dir+0x56>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPin_Dir+0x52>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	84 bb       	out	0x14, r24	; 20
			break;
 11a:	08 95       	ret
			
			case DIO_PORTD:
			Clear_Bit(DDRD, pin);
 11c:	21 b3       	in	r18, 0x11	; 17
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Dir+0x6e>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Dir+0x6a>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	81 bb       	out	0x11, r24	; 17
			break;
 132:	08 95       	ret
			break;	
		}
		break;
		
		case DIO_PIN_OUT:
		switch(port)
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	89 f0       	breq	.+34     	; 0x15a <DIO_SetPin_Dir+0xa0>
 138:	28 f0       	brcs	.+10     	; 0x144 <DIO_SetPin_Dir+0x8a>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	c9 f0       	breq	.+50     	; 0x170 <DIO_SetPin_Dir+0xb6>
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	11 f1       	breq	.+68     	; 0x186 <DIO_SetPin_Dir+0xcc>
 142:	08 95       	ret
		{
			case DIO_PORTA:
			Set_Bit(DDRA, pin);
 144:	2a b3       	in	r18, 0x1a	; 26
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPin_Dir+0x96>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPin_Dir+0x92>
 154:	82 2b       	or	r24, r18
 156:	8a bb       	out	0x1a, r24	; 26
			break;
 158:	08 95       	ret
			
			case DIO_PORTB:
			Set_Bit(DDRB, pin);
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_SetPin_Dir+0xac>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_SetPin_Dir+0xa8>
 16a:	82 2b       	or	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
			break;
 16e:	08 95       	ret
			
			case DIO_PORTC:
			Set_Bit(DDRC, pin);
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPin_Dir+0xc2>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPin_Dir+0xbe>
 180:	82 2b       	or	r24, r18
 182:	84 bb       	out	0x14, r24	; 20
			break;
 184:	08 95       	ret
			
			case DIO_PORTD:
			Set_Bit(DDRD, pin);
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPin_Dir+0xd8>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPin_Dir+0xd4>
 196:	82 2b       	or	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret

0000019c <DIO_SetPin_Val>:
	}
}

void DIO_SetPin_Val(Uint8 port, Uint8 pin, Uint8 val)
{
	switch (val)
 19c:	44 23       	and	r20, r20
 19e:	19 f0       	breq	.+6      	; 0x1a6 <DIO_SetPin_Val+0xa>
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	c9 f1       	breq	.+114    	; 0x216 <DIO_SetPin_Val+0x7a>
 1a4:	08 95       	ret
	{
		case DIO_PIN_OFF:
		switch(port)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 f0       	breq	.+36     	; 0x1ce <DIO_SetPin_Val+0x32>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <DIO_SetPin_Val+0x1a>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	d9 f0       	breq	.+54     	; 0x1e6 <DIO_SetPin_Val+0x4a>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	29 f1       	breq	.+74     	; 0x1fe <DIO_SetPin_Val+0x62>
 1b4:	08 95       	ret
		{
			case DIO_PORTA:
			Clear_Bit(PORTA, pin);
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPin_Val+0x26>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPin_Val+0x22>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
			break;
 1cc:	08 95       	ret
			
			case DIO_PORTB:
			Clear_Bit(PORTB, pin);
 1ce:	28 b3       	in	r18, 0x18	; 24
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_SetPin_Val+0x3e>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_SetPin_Val+0x3a>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	88 bb       	out	0x18, r24	; 24
			break;
 1e4:	08 95       	ret
			
			case DIO_PORTC:
			Clear_Bit(PORTC, pin);
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPin_Val+0x56>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPin_Val+0x52>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	85 bb       	out	0x15, r24	; 21
			break;
 1fc:	08 95       	ret
			
			case DIO_PORTD:
			Clear_Bit(PORTD, pin);
 1fe:	22 b3       	in	r18, 0x12	; 18
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_Val+0x6e>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_Val+0x6a>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	82 bb       	out	0x12, r24	; 18
			break;
 214:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_ON:
		switch(port)
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	89 f0       	breq	.+34     	; 0x23c <DIO_SetPin_Val+0xa0>
 21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_SetPin_Val+0x8a>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	c9 f0       	breq	.+50     	; 0x252 <DIO_SetPin_Val+0xb6>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	11 f1       	breq	.+68     	; 0x268 <DIO_SetPin_Val+0xcc>
 224:	08 95       	ret
		{
			case DIO_PORTA:
			Set_Bit(PORTA, pin);
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPin_Val+0x96>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPin_Val+0x92>
 236:	82 2b       	or	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
			break;
 23a:	08 95       	ret
			
			case DIO_PORTB:
			Set_Bit(PORTB, pin);
 23c:	28 b3       	in	r18, 0x18	; 24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SetPin_Val+0xac>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SetPin_Val+0xa8>
 24c:	82 2b       	or	r24, r18
 24e:	88 bb       	out	0x18, r24	; 24
			break;
 250:	08 95       	ret
			
			case DIO_PORTC:
			Set_Bit(PORTC, pin);
 252:	25 b3       	in	r18, 0x15	; 21
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPin_Val+0xc2>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPin_Val+0xbe>
 262:	82 2b       	or	r24, r18
 264:	85 bb       	out	0x15, r24	; 21
			break;
 266:	08 95       	ret
			
			case DIO_PORTD:
			Set_Bit(PORTD, pin);
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPin_Val+0xd8>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPin_Val+0xd4>
 278:	82 2b       	or	r24, r18
 27a:	82 bb       	out	0x12, r24	; 18
 27c:	08 95       	ret

0000027e <DIO_TogglePin>:
	}		
}

void DIO_TogglePin(Uint8 port, Uint8 pin)
{
	switch(port)
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	89 f0       	breq	.+34     	; 0x2a4 <DIO_TogglePin+0x26>
 282:	28 f0       	brcs	.+10     	; 0x28e <DIO_TogglePin+0x10>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	c9 f0       	breq	.+50     	; 0x2ba <DIO_TogglePin+0x3c>
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	11 f1       	breq	.+68     	; 0x2d0 <DIO_TogglePin+0x52>
 28c:	08 95       	ret
	{
		case DIO_PORTA:
		Toggle_Bit(PORTA, pin);
 28e:	2b b3       	in	r18, 0x1b	; 27
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_TogglePin+0x1c>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_TogglePin+0x18>
 29e:	82 27       	eor	r24, r18
 2a0:	8b bb       	out	0x1b, r24	; 27
		break;
 2a2:	08 95       	ret
		
		case DIO_PORTB:
		Toggle_Bit(PORTB, pin);
 2a4:	28 b3       	in	r18, 0x18	; 24
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_TogglePin+0x32>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_TogglePin+0x2e>
 2b4:	82 27       	eor	r24, r18
 2b6:	88 bb       	out	0x18, r24	; 24
		break;
 2b8:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_Bit(PORTC, pin);
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_TogglePin+0x48>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_TogglePin+0x44>
 2ca:	82 27       	eor	r24, r18
 2cc:	85 bb       	out	0x15, r24	; 21
		break;
 2ce:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_Bit(PORTD, pin);
 2d0:	22 b3       	in	r18, 0x12	; 18
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_TogglePin+0x5e>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_TogglePin+0x5a>
 2e0:	82 27       	eor	r24, r18
 2e2:	82 bb       	out	0x12, r24	; 18
 2e4:	08 95       	ret

000002e6 <EXT0_INT_Init>:

// EXT INT Functions
void EXT0_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 2e6:	8f b7       	in	r24, 0x3f	; 63
 2e8:	80 68       	ori	r24, 0x80	; 128
 2ea:	8f bf       	out	0x3f, r24	; 63
	
	// Preipheral Enable/ Disable Interrupt
	GICR = (EXT0_INT << 6) | (GICR & 0XBF);
 2ec:	8b b7       	in	r24, 0x3b	; 59
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	8b bf       	out	0x3b, r24	; 59
	
	// EXT0 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, DIO_PIN_2, DIO_PIN_IN);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	62 e0       	ldi	r22, 0x02	; 2
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
	
	// EXT0 INT Tirgger
	MCUCR = EXT0_INT_Trigger | (MCUCR & 0XFC);
 2fc:	85 b7       	in	r24, 0x35	; 53
 2fe:	83 60       	ori	r24, 0x03	; 3
 300:	85 bf       	out	0x35, r24	; 53
 302:	08 95       	ret

00000304 <LCD_Write_CMD>:
	LCD_Write_CMD(CGRAM_First_Address_First_Character + (pos * 8));
	for (i = 0; i < 8; i++)
	{
		LCD_Write_Char(arr[i]);
	}
}
 304:	cf 93       	push	r28
 306:	c8 2f       	mov	r28, r24
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 326:	8b b3       	in	r24, 0x1b	; 27
 328:	9c 2f       	mov	r25, r28
 32a:	90 7f       	andi	r25, 0xF0	; 240
 32c:	8f 70       	andi	r24, 0x0F	; 15
 32e:	89 2b       	or	r24, r25
 330:	8b bb       	out	0x1b, r24	; 27
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	63 e0       	ldi	r22, 0x03	; 3
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_Write_CMD+0x3c>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_Write_CMD+0x42>
 346:	00 00       	nop
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	63 e0       	ldi	r22, 0x03	; 3
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 352:	20 e1       	ldi	r18, 0x10	; 16
 354:	c2 9f       	mul	r28, r18
 356:	c0 01       	movw	r24, r0
 358:	11 24       	eor	r1, r1
 35a:	9b b3       	in	r25, 0x1b	; 27
 35c:	9f 70       	andi	r25, 0x0F	; 15
 35e:	89 2b       	or	r24, r25
 360:	8b bb       	out	0x1b, r24	; 27
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_Write_CMD+0x6c>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_Write_CMD+0x72>
 376:	00 00       	nop
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	63 e0       	ldi	r22, 0x03	; 3
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 382:	8f e1       	ldi	r24, 0x1F	; 31
 384:	9e e4       	ldi	r25, 0x4E	; 78
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_Write_CMD+0x82>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Write_CMD+0x88>
 38c:	00 00       	nop
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <LCD_Init>:
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	64 e0       	ldi	r22, 0x04	; 4
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	65 e0       	ldi	r22, 0x05	; 5
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	66 e0       	ldi	r22, 0x06	; 6
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	67 e0       	ldi	r22, 0x07	; 7
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	64 e0       	ldi	r22, 0x04	; 4
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	65 e0       	ldi	r22, 0x05	; 5
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	66 e0       	ldi	r22, 0x06	; 6
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	67 e0       	ldi	r22, 0x07	; 7
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 41e:	2f ef       	ldi	r18, 0xFF	; 255
 420:	80 e7       	ldi	r24, 0x70	; 112
 422:	92 e0       	ldi	r25, 0x02	; 2
 424:	21 50       	subi	r18, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	83 e3       	ldi	r24, 0x33	; 51
 432:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 436:	82 e3       	ldi	r24, 0x32	; 50
 438:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 43c:	88 e2       	ldi	r24, 0x28	; 40
 43e:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 442:	88 e0       	ldi	r24, 0x08	; 8
 444:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 44e:	86 e0       	ldi	r24, 0x06	; 6
 450:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 454:	8c e0       	ldi	r24, 0x0C	; 12
 456:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 45a:	08 95       	ret

0000045c <LCD_Write_Char>:
 45c:	cf 93       	push	r28
 45e:	c8 2f       	mov	r28, r24
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 47e:	8b b3       	in	r24, 0x1b	; 27
 480:	9c 2f       	mov	r25, r28
 482:	90 7f       	andi	r25, 0xF0	; 240
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	89 2b       	or	r24, r25
 488:	8b bb       	out	0x1b, r24	; 27
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	63 e0       	ldi	r22, 0x03	; 3
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 494:	8f e9       	ldi	r24, 0x9F	; 159
 496:	9f e0       	ldi	r25, 0x0F	; 15
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_Write_Char+0x3c>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_Write_Char+0x42>
 49e:	00 00       	nop
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	63 e0       	ldi	r22, 0x03	; 3
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 4aa:	20 e1       	ldi	r18, 0x10	; 16
 4ac:	c2 9f       	mul	r28, r18
 4ae:	c0 01       	movw	r24, r0
 4b0:	11 24       	eor	r1, r1
 4b2:	9b b3       	in	r25, 0x1b	; 27
 4b4:	9f 70       	andi	r25, 0x0F	; 15
 4b6:	89 2b       	or	r24, r25
 4b8:	8b bb       	out	0x1b, r24	; 27
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	63 e0       	ldi	r22, 0x03	; 3
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 4c4:	8f e9       	ldi	r24, 0x9F	; 159
 4c6:	9f e0       	ldi	r25, 0x0F	; 15
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LCD_Write_Char+0x6c>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LCD_Write_Char+0x72>
 4ce:	00 00       	nop
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	63 e0       	ldi	r22, 0x03	; 3
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPin_Val>
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <LCD_Write_Int>:
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	ec 01       	movw	r28, r24
 4ee:	89 2b       	or	r24, r25
 4f0:	19 f4       	brne	.+6      	; 0x4f8 <LCD_Write_Int+0x1a>
 4f2:	80 e3       	ldi	r24, 0x30	; 48
 4f4:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_Write_Char>
 4f8:	dd 23       	and	r29, r29
 4fa:	34 f4       	brge	.+12     	; 0x508 <LCD_Write_Int+0x2a>
 4fc:	8d e2       	ldi	r24, 0x2D	; 45
 4fe:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_Write_Char>
 502:	d1 95       	neg	r29
 504:	c1 95       	neg	r28
 506:	d1 09       	sbc	r29, r1
 508:	c1 2c       	mov	r12, r1
 50a:	d1 2c       	mov	r13, r1
 50c:	76 01       	movw	r14, r12
 50e:	c3 94       	inc	r12
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	2d c0       	rjmp	.+90     	; 0x570 <LCD_Write_Int+0x92>
 516:	c9 01       	movw	r24, r18
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	22 0f       	add	r18, r18
 526:	33 1f       	adc	r19, r19
 528:	28 0f       	add	r18, r24
 52a:	39 1f       	adc	r19, r25
 52c:	ce 01       	movw	r24, r28
 52e:	6a e0       	ldi	r22, 0x0A	; 10
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divmodhi4>
 536:	28 0f       	add	r18, r24
 538:	39 1f       	adc	r19, r25
 53a:	21 15       	cp	r18, r1
 53c:	31 05       	cpc	r19, r1
 53e:	91 f4       	brne	.+36     	; 0x564 <LCD_Write_Int+0x86>
 540:	cc 0c       	add	r12, r12
 542:	dd 1c       	adc	r13, r13
 544:	ee 1c       	adc	r14, r14
 546:	ff 1c       	adc	r15, r15
 548:	d7 01       	movw	r26, r14
 54a:	c6 01       	movw	r24, r12
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	aa 1f       	adc	r26, r26
 552:	bb 1f       	adc	r27, r27
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	aa 1f       	adc	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	c8 0e       	add	r12, r24
 55e:	d9 1e       	adc	r13, r25
 560:	ea 1e       	adc	r14, r26
 562:	fb 1e       	adc	r15, r27
 564:	ce 01       	movw	r24, r28
 566:	6a e0       	ldi	r22, 0x0A	; 10
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divmodhi4>
 56e:	eb 01       	movw	r28, r22
 570:	20 97       	sbiw	r28, 0x00	; 0
 572:	89 f6       	brne	.-94     	; 0x516 <LCD_Write_Int+0x38>
 574:	10 e0       	ldi	r17, 0x00	; 0
 576:	11 c0       	rjmp	.+34     	; 0x59a <LCD_Write_Int+0xbc>
 578:	c9 01       	movw	r24, r18
 57a:	6a e0       	ldi	r22, 0x0A	; 10
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divmodhi4>
 582:	d6 2f       	mov	r29, r22
 584:	c7 2f       	mov	r28, r23
 586:	80 5d       	subi	r24, 0xD0	; 208
 588:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_Write_Char>
 58c:	2d 2f       	mov	r18, r29
 58e:	3c 2f       	mov	r19, r28
 590:	21 15       	cp	r18, r1
 592:	31 05       	cpc	r19, r1
 594:	11 f4       	brne	.+4      	; 0x59a <LCD_Write_Int+0xbc>
 596:	96 01       	movw	r18, r12
 598:	11 e0       	ldi	r17, 0x01	; 1
 59a:	81 2f       	mov	r24, r17
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	28 17       	cp	r18, r24
 5a0:	39 07       	cpc	r19, r25
 5a2:	51 f7       	brne	.-44     	; 0x578 <LCD_Write_Int+0x9a>
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	df 90       	pop	r13
 5b0:	cf 90       	pop	r12
 5b2:	08 95       	ret

000005b4 <LCD_GoTo>:

void LCD_GoTo(Uint8 row, Uint8 col)
{
	col = (col >= 0) && (col < 40) ? col : 0;
 5b4:	68 32       	cpi	r22, 0x28	; 40
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <LCD_GoTo+0x6>
 5b8:	60 e0       	ldi	r22, 0x00	; 0
	row = !row ? DDRAM_Cursor_Begin_1st_Line : DDRAM_Cursor_Begin_2nd_Line;
 5ba:	81 11       	cpse	r24, r1
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <LCD_GoTo+0xe>
 5be:	80 e8       	ldi	r24, 0x80	; 128
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <LCD_GoTo+0x10>
 5c2:	80 ec       	ldi	r24, 0xC0	; 192
	LCD_Write_CMD(row + col);
 5c4:	86 0f       	add	r24, r22
 5c6:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 5ca:	08 95       	ret

000005cc <LCD_Clear>:
}
void LCD_Clear(void)
{
	LCD_Write_CMD(Clear_Display_Screen);
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	0e 94 82 01 	call	0x304	; 0x304 <LCD_Write_CMD>
 5d2:	08 95       	ret

000005d4 <LED0_Init>:
{
	DIO_SetPin_Val(LED2_Port, LED2_PIN, DIO_PIN_ON);
}
void LED2_OFF(void)
{
	DIO_SetPin_Val(LED2_Port, LED2_PIN, DIO_PIN_OFF);
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	62 e0       	ldi	r22, 0x02	; 2
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 5de:	08 95       	ret

000005e0 <LED0_Toggle>:
 5e0:	62 e0       	ldi	r22, 0x02	; 2
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_TogglePin>
 5e8:	08 95       	ret

000005ea <LED1_Init>:
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	67 e0       	ldi	r22, 0x07	; 7
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 5f4:	08 95       	ret

000005f6 <LED1_Toggle>:
 5f6:	67 e0       	ldi	r22, 0x07	; 7
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_TogglePin>
 5fe:	08 95       	ret

00000600 <LED2_Init>:
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	63 e0       	ldi	r22, 0x03	; 3
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPin_Dir>
 60a:	08 95       	ret

0000060c <LED2_Toggle>:
}
void LED2_Toggle(void)
{
	DIO_TogglePin(LED2_Port, LED2_PIN);
 60c:	63 e0       	ldi	r22, 0x03	; 3
 60e:	83 e0       	ldi	r24, 0x03	; 3
 610:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_TogglePin>
 614:	08 95       	ret

00000616 <main>:

int main(void)
{
    /* Replace with your application code */
	Uint16 Value = 0;
	ADC_Init();
 616:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	LCD_Init();
 61a:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_Init>
	T0_Init();
 61e:	0e 94 9b 03 	call	0x736	; 0x736 <T0_Init>
	T0_Delay(2000);
 622:	60 ed       	ldi	r22, 0xD0	; 208
 624:	77 e0       	ldi	r23, 0x07	; 7
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 a6 03 	call	0x74c	; 0x74c <T0_Delay>
	T0_Start();
 62e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <T0_Start>
	EXT0_INT_Init();
 632:	0e 94 73 01 	call	0x2e6	; 0x2e6 <EXT0_INT_Init>
	LED0_Init();
 636:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED0_Init>
	LED1_Init();
 63a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED1_Init>
	LED2_Init();
 63e:	0e 94 00 03 	call	0x600	; 0x600 <LED2_Init>
	
	// ADC Select Channel
	ADMUX = 1 | (ADMUX & 0XF8);
 642:	87 b1       	in	r24, 0x07	; 7
 644:	88 7f       	andi	r24, 0xF8	; 248
 646:	81 60       	ori	r24, 0x01	; 1
 648:	87 b9       	out	0x07, r24	; 7
	
	// ADC Start of Conversion
	Set_Bit(ADCSRA, 6);
 64a:	86 b1       	in	r24, 0x06	; 6
 64c:	80 64       	ori	r24, 0x40	; 64
 64e:	86 b9       	out	0x06, r24	; 6
	
	while(1)
	{
		//Value = ADC_Read(1);
		if (G_Val)
 650:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 654:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 658:	89 2b       	or	r24, r25
 65a:	a9 f0       	breq	.+42     	; 0x686 <main+0x70>
		{
			LCD_GoTo(0,0);
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_GoTo>
			LCD_Write_Int(G_Val);
 664:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 668:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 66c:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Write_Int>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 670:	2f ef       	ldi	r18, 0xFF	; 255
 672:	81 ee       	ldi	r24, 0xE1	; 225
 674:	94 e0       	ldi	r25, 0x04	; 4
 676:	21 50       	subi	r18, 0x01	; 1
 678:	80 40       	sbci	r24, 0x00	; 0
 67a:	90 40       	sbci	r25, 0x00	; 0
 67c:	e1 f7       	brne	.-8      	; 0x676 <main+0x60>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <main+0x6a>
 680:	00 00       	nop
			_delay_ms(100);
			LCD_Clear();
 682:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_Clear>
		}
		LCD_GoTo(1, 0);
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_GoTo>
		LCD_Write_Int(T0_G_Val);
 68e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <T0_G_Val>
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_Write_Int>
 698:	2f ef       	ldi	r18, 0xFF	; 255
 69a:	89 ef       	ldi	r24, 0xF9	; 249
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	21 50       	subi	r18, 0x01	; 1
 6a0:	80 40       	sbci	r24, 0x00	; 0
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0x88>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0x92>
 6a8:	00 00       	nop
 6aa:	d2 cf       	rjmp	.-92     	; 0x650 <main+0x3a>

000006ac <__vector_1>:
		
	}
}

ISR(INT0_vect)
{
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
 6ce:	2f ef       	ldi	r18, 0xFF	; 255
 6d0:	81 ee       	ldi	r24, 0xE1	; 225
 6d2:	94 e0       	ldi	r25, 0x04	; 4
 6d4:	21 50       	subi	r18, 0x01	; 1
 6d6:	80 40       	sbci	r24, 0x00	; 0
 6d8:	90 40       	sbci	r25, 0x00	; 0
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <__vector_1+0x28>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <__vector_1+0x32>
 6de:	00 00       	nop
	_delay_ms(100);
	LED0_Toggle();
 6e0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LED0_Toggle>
	LED1_Toggle();
 6e4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LED1_Toggle>
	LED2_Toggle();
 6e8:	0e 94 06 03 	call	0x60c	; 0x60c <LED2_Toggle>
}
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	bf 91       	pop	r27
 6f2:	af 91       	pop	r26
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	7f 91       	pop	r23
 6fa:	6f 91       	pop	r22
 6fc:	5f 91       	pop	r21
 6fe:	4f 91       	pop	r20
 700:	3f 91       	pop	r19
 702:	2f 91       	pop	r18
 704:	0f 90       	pop	r0
 706:	0f be       	out	0x3f, r0	; 63
 708:	0f 90       	pop	r0
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti

0000070e <__vector_16>:

ISR(ADC_vect)
{
 70e:	1f 92       	push	r1
 710:	0f 92       	push	r0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	0f 92       	push	r0
 716:	11 24       	eor	r1, r1
 718:	8f 93       	push	r24
 71a:	9f 93       	push	r25
	G_Val = ADCR;
 71c:	84 b1       	in	r24, 0x04	; 4
 71e:	95 b1       	in	r25, 0x05	; 5
 720:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 724:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 728:	9f 91       	pop	r25
 72a:	8f 91       	pop	r24
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <T0_Init>:
{
	TCCR0 = Timer0_CLK | (TCCR0 & 0XF8);
}
void T0_Stop(void)
{
	TCCR0 &= 0XF8;		//	   1 1 0 1 | 0 1 0 1
 736:	8f b7       	in	r24, 0x3f	; 63
 738:	80 68       	ori	r24, 0x80	; 128
 73a:	8f bf       	out	0x3f, r24	; 63
 73c:	89 b7       	in	r24, 0x39	; 57
 73e:	8c 7f       	andi	r24, 0xFC	; 252
 740:	81 60       	ori	r24, 0x01	; 1
 742:	89 bf       	out	0x39, r24	; 57
 744:	83 b7       	in	r24, 0x33	; 51
 746:	87 7b       	andi	r24, 0xB7	; 183
 748:	83 bf       	out	0x33, r24	; 51
 74a:	08 95       	ret

0000074c <T0_Delay>:
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	9b 01       	movw	r18, r22
 752:	ac 01       	movw	r20, r24
 754:	a8 ee       	ldi	r26, 0xE8	; 232
 756:	b3 e0       	ldi	r27, 0x03	; 3
 758:	0e 94 5b 05 	call	0xab6	; 0xab6 <__muluhisi3>
 75c:	0e 94 4c 04 	call	0x898	; 0x898 <__floatunsisf>
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	40 e8       	ldi	r20, 0x80	; 128
 766:	5c e3       	ldi	r21, 0x3C	; 60
 768:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__mulsf3>
 76c:	0e 94 1d 04 	call	0x83a	; 0x83a <__fixunssfsi>
 770:	66 23       	and	r22, r22
 772:	39 f0       	breq	.+14     	; 0x782 <T0_Delay+0x36>
 774:	07 2f       	mov	r16, r23
 776:	18 2f       	mov	r17, r24
 778:	29 2f       	mov	r18, r25
 77a:	33 27       	eor	r19, r19
 77c:	0f 5f       	subi	r16, 0xFF	; 255
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	04 c0       	rjmp	.+8      	; 0x78a <T0_Delay+0x3e>
 782:	07 2f       	mov	r16, r23
 784:	18 2f       	mov	r17, r24
 786:	29 2f       	mov	r18, r25
 788:	33 27       	eor	r19, r19
 78a:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <T0_OVF_num+0x1>
 78e:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <T0_OVF_num>
 792:	61 95       	neg	r22
 794:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <T0_OVF_Init_val>
 798:	62 bf       	out	0x32, r22	; 50
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	08 95       	ret

000007a0 <T0_Start>:
 7a0:	83 b7       	in	r24, 0x33	; 51
 7a2:	88 7f       	andi	r24, 0xF8	; 248
 7a4:	85 60       	ori	r24, 0x05	; 5
 7a6:	83 bf       	out	0x33, r24	; 51
 7a8:	08 95       	ret

000007aa <__vector_11>:
						//     1 1 0 1 | 0 0 0 0
}


ISR(TIMER0_OVF_vect)
{
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	4f 93       	push	r20
 7b6:	5f 93       	push	r21
 7b8:	6f 93       	push	r22
 7ba:	7f 93       	push	r23
 7bc:	8f 93       	push	r24
 7be:	9f 93       	push	r25
 7c0:	af 93       	push	r26
 7c2:	bf 93       	push	r27
	static Uint32 count = 0;
	count++;
 7c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count.1656>
 7c8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count.1656+0x1>
 7cc:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <count.1656+0x2>
 7d0:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <count.1656+0x3>
 7d4:	01 96       	adiw	r24, 0x01	; 1
 7d6:	a1 1d       	adc	r26, r1
 7d8:	b1 1d       	adc	r27, r1
 7da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count.1656>
 7de:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count.1656+0x1>
 7e2:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <count.1656+0x2>
 7e6:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <count.1656+0x3>
	if (count == T0_OVF_num)
 7ea:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <T0_OVF_num>
 7ee:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <T0_OVF_num+0x1>
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	84 17       	cp	r24, r20
 7f8:	95 07       	cpc	r25, r21
 7fa:	a6 07       	cpc	r26, r22
 7fc:	b7 07       	cpc	r27, r23
 7fe:	81 f4       	brne	.+32     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	{
		// Write your code here
		T0_G_Val++;
 800:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <T0_G_Val>
 804:	8f 5f       	subi	r24, 0xFF	; 255
 806:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <T0_G_Val>
		
		
		count = 0;
 80a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <count.1656>
 80e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count.1656+0x1>
 812:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <count.1656+0x2>
 816:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count.1656+0x3>
		TCNT0 = T0_OVF_Init_val;
 81a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <T0_OVF_Init_val>
 81e:	82 bf       	out	0x32, r24	; 50
	}
	
}
 820:	bf 91       	pop	r27
 822:	af 91       	pop	r26
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	7f 91       	pop	r23
 82a:	6f 91       	pop	r22
 82c:	5f 91       	pop	r21
 82e:	4f 91       	pop	r20
 830:	0f 90       	pop	r0
 832:	0f be       	out	0x3f, r0	; 63
 834:	0f 90       	pop	r0
 836:	1f 90       	pop	r1
 838:	18 95       	reti

0000083a <__fixunssfsi>:
 83a:	0e 94 b9 04 	call	0x972	; 0x972 <__fp_splitA>
 83e:	88 f0       	brcs	.+34     	; 0x862 <__stack+0x3>
 840:	9f 57       	subi	r25, 0x7F	; 127
 842:	98 f0       	brcs	.+38     	; 0x86a <__stack+0xb>
 844:	b9 2f       	mov	r27, r25
 846:	99 27       	eor	r25, r25
 848:	b7 51       	subi	r27, 0x17	; 23
 84a:	b0 f0       	brcs	.+44     	; 0x878 <__stack+0x19>
 84c:	e1 f0       	breq	.+56     	; 0x886 <__stack+0x27>
 84e:	66 0f       	add	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	1a f0       	brmi	.+6      	; 0x85e <__fixunssfsi+0x24>
 858:	ba 95       	dec	r27
 85a:	c9 f7       	brne	.-14     	; 0x84e <__fixunssfsi+0x14>
 85c:	14 c0       	rjmp	.+40     	; 0x886 <__stack+0x27>
 85e:	b1 30       	cpi	r27, 0x01	; 1
 860:	91 f0       	breq	.+36     	; 0x886 <__stack+0x27>
 862:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_zero>
 866:	b1 e0       	ldi	r27, 0x01	; 1
 868:	08 95       	ret
 86a:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_zero>
 86e:	67 2f       	mov	r22, r23
 870:	78 2f       	mov	r23, r24
 872:	88 27       	eor	r24, r24
 874:	b8 5f       	subi	r27, 0xF8	; 248
 876:	39 f0       	breq	.+14     	; 0x886 <__stack+0x27>
 878:	b9 3f       	cpi	r27, 0xF9	; 249
 87a:	cc f3       	brlt	.-14     	; 0x86e <__stack+0xf>
 87c:	86 95       	lsr	r24
 87e:	77 95       	ror	r23
 880:	67 95       	ror	r22
 882:	b3 95       	inc	r27
 884:	d9 f7       	brne	.-10     	; 0x87c <__stack+0x1d>
 886:	3e f4       	brtc	.+14     	; 0x896 <__stack+0x37>
 888:	90 95       	com	r25
 88a:	80 95       	com	r24
 88c:	70 95       	com	r23
 88e:	61 95       	neg	r22
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	8f 4f       	sbci	r24, 0xFF	; 255
 894:	9f 4f       	sbci	r25, 0xFF	; 255
 896:	08 95       	ret

00000898 <__floatunsisf>:
 898:	e8 94       	clt
 89a:	09 c0       	rjmp	.+18     	; 0x8ae <__floatsisf+0x12>

0000089c <__floatsisf>:
 89c:	97 fb       	bst	r25, 7
 89e:	3e f4       	brtc	.+14     	; 0x8ae <__floatsisf+0x12>
 8a0:	90 95       	com	r25
 8a2:	80 95       	com	r24
 8a4:	70 95       	com	r23
 8a6:	61 95       	neg	r22
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	8f 4f       	sbci	r24, 0xFF	; 255
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	99 23       	and	r25, r25
 8b0:	a9 f0       	breq	.+42     	; 0x8dc <__floatsisf+0x40>
 8b2:	f9 2f       	mov	r31, r25
 8b4:	96 e9       	ldi	r25, 0x96	; 150
 8b6:	bb 27       	eor	r27, r27
 8b8:	93 95       	inc	r25
 8ba:	f6 95       	lsr	r31
 8bc:	87 95       	ror	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b7 95       	ror	r27
 8c4:	f1 11       	cpse	r31, r1
 8c6:	f8 cf       	rjmp	.-16     	; 0x8b8 <__floatsisf+0x1c>
 8c8:	fa f4       	brpl	.+62     	; 0x908 <__floatsisf+0x6c>
 8ca:	bb 0f       	add	r27, r27
 8cc:	11 f4       	brne	.+4      	; 0x8d2 <__floatsisf+0x36>
 8ce:	60 ff       	sbrs	r22, 0
 8d0:	1b c0       	rjmp	.+54     	; 0x908 <__floatsisf+0x6c>
 8d2:	6f 5f       	subi	r22, 0xFF	; 255
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	16 c0       	rjmp	.+44     	; 0x908 <__floatsisf+0x6c>
 8dc:	88 23       	and	r24, r24
 8de:	11 f0       	breq	.+4      	; 0x8e4 <__floatsisf+0x48>
 8e0:	96 e9       	ldi	r25, 0x96	; 150
 8e2:	11 c0       	rjmp	.+34     	; 0x906 <__floatsisf+0x6a>
 8e4:	77 23       	and	r23, r23
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <__floatsisf+0x54>
 8e8:	9e e8       	ldi	r25, 0x8E	; 142
 8ea:	87 2f       	mov	r24, r23
 8ec:	76 2f       	mov	r23, r22
 8ee:	05 c0       	rjmp	.+10     	; 0x8fa <__floatsisf+0x5e>
 8f0:	66 23       	and	r22, r22
 8f2:	71 f0       	breq	.+28     	; 0x910 <__floatsisf+0x74>
 8f4:	96 e8       	ldi	r25, 0x86	; 134
 8f6:	86 2f       	mov	r24, r22
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	2a f0       	brmi	.+10     	; 0x908 <__floatsisf+0x6c>
 8fe:	9a 95       	dec	r25
 900:	66 0f       	add	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	da f7       	brpl	.-10     	; 0x8fe <__floatsisf+0x62>
 908:	88 0f       	add	r24, r24
 90a:	96 95       	lsr	r25
 90c:	87 95       	ror	r24
 90e:	97 f9       	bld	r25, 7
 910:	08 95       	ret

00000912 <__fp_inf>:
 912:	97 f9       	bld	r25, 7
 914:	9f 67       	ori	r25, 0x7F	; 127
 916:	80 e8       	ldi	r24, 0x80	; 128
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	08 95       	ret

0000091e <__fp_nan>:
 91e:	9f ef       	ldi	r25, 0xFF	; 255
 920:	80 ec       	ldi	r24, 0xC0	; 192
 922:	08 95       	ret

00000924 <__fp_pscA>:
 924:	00 24       	eor	r0, r0
 926:	0a 94       	dec	r0
 928:	16 16       	cp	r1, r22
 92a:	17 06       	cpc	r1, r23
 92c:	18 06       	cpc	r1, r24
 92e:	09 06       	cpc	r0, r25
 930:	08 95       	ret

00000932 <__fp_pscB>:
 932:	00 24       	eor	r0, r0
 934:	0a 94       	dec	r0
 936:	12 16       	cp	r1, r18
 938:	13 06       	cpc	r1, r19
 93a:	14 06       	cpc	r1, r20
 93c:	05 06       	cpc	r0, r21
 93e:	08 95       	ret

00000940 <__fp_round>:
 940:	09 2e       	mov	r0, r25
 942:	03 94       	inc	r0
 944:	00 0c       	add	r0, r0
 946:	11 f4       	brne	.+4      	; 0x94c <__fp_round+0xc>
 948:	88 23       	and	r24, r24
 94a:	52 f0       	brmi	.+20     	; 0x960 <__fp_round+0x20>
 94c:	bb 0f       	add	r27, r27
 94e:	40 f4       	brcc	.+16     	; 0x960 <__fp_round+0x20>
 950:	bf 2b       	or	r27, r31
 952:	11 f4       	brne	.+4      	; 0x958 <__fp_round+0x18>
 954:	60 ff       	sbrs	r22, 0
 956:	04 c0       	rjmp	.+8      	; 0x960 <__fp_round+0x20>
 958:	6f 5f       	subi	r22, 0xFF	; 255
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	08 95       	ret

00000962 <__fp_split3>:
 962:	57 fd       	sbrc	r21, 7
 964:	90 58       	subi	r25, 0x80	; 128
 966:	44 0f       	add	r20, r20
 968:	55 1f       	adc	r21, r21
 96a:	59 f0       	breq	.+22     	; 0x982 <__fp_splitA+0x10>
 96c:	5f 3f       	cpi	r21, 0xFF	; 255
 96e:	71 f0       	breq	.+28     	; 0x98c <__fp_splitA+0x1a>
 970:	47 95       	ror	r20

00000972 <__fp_splitA>:
 972:	88 0f       	add	r24, r24
 974:	97 fb       	bst	r25, 7
 976:	99 1f       	adc	r25, r25
 978:	61 f0       	breq	.+24     	; 0x992 <__fp_splitA+0x20>
 97a:	9f 3f       	cpi	r25, 0xFF	; 255
 97c:	79 f0       	breq	.+30     	; 0x99c <__fp_splitA+0x2a>
 97e:	87 95       	ror	r24
 980:	08 95       	ret
 982:	12 16       	cp	r1, r18
 984:	13 06       	cpc	r1, r19
 986:	14 06       	cpc	r1, r20
 988:	55 1f       	adc	r21, r21
 98a:	f2 cf       	rjmp	.-28     	; 0x970 <__fp_split3+0xe>
 98c:	46 95       	lsr	r20
 98e:	f1 df       	rcall	.-30     	; 0x972 <__fp_splitA>
 990:	08 c0       	rjmp	.+16     	; 0x9a2 <__fp_splitA+0x30>
 992:	16 16       	cp	r1, r22
 994:	17 06       	cpc	r1, r23
 996:	18 06       	cpc	r1, r24
 998:	99 1f       	adc	r25, r25
 99a:	f1 cf       	rjmp	.-30     	; 0x97e <__fp_splitA+0xc>
 99c:	86 95       	lsr	r24
 99e:	71 05       	cpc	r23, r1
 9a0:	61 05       	cpc	r22, r1
 9a2:	08 94       	sec
 9a4:	08 95       	ret

000009a6 <__fp_zero>:
 9a6:	e8 94       	clt

000009a8 <__fp_szero>:
 9a8:	bb 27       	eor	r27, r27
 9aa:	66 27       	eor	r22, r22
 9ac:	77 27       	eor	r23, r23
 9ae:	cb 01       	movw	r24, r22
 9b0:	97 f9       	bld	r25, 7
 9b2:	08 95       	ret

000009b4 <__mulsf3>:
 9b4:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulsf3x>
 9b8:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_round>
 9bc:	0e 94 92 04 	call	0x924	; 0x924 <__fp_pscA>
 9c0:	38 f0       	brcs	.+14     	; 0x9d0 <__mulsf3+0x1c>
 9c2:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscB>
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__mulsf3+0x1c>
 9c8:	95 23       	and	r25, r21
 9ca:	11 f0       	breq	.+4      	; 0x9d0 <__mulsf3+0x1c>
 9cc:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>
 9d0:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_nan>
 9d4:	11 24       	eor	r1, r1
 9d6:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_szero>

000009da <__mulsf3x>:
 9da:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_split3>
 9de:	70 f3       	brcs	.-36     	; 0x9bc <__mulsf3+0x8>

000009e0 <__mulsf3_pse>:
 9e0:	95 9f       	mul	r25, r21
 9e2:	c1 f3       	breq	.-16     	; 0x9d4 <__mulsf3+0x20>
 9e4:	95 0f       	add	r25, r21
 9e6:	50 e0       	ldi	r21, 0x00	; 0
 9e8:	55 1f       	adc	r21, r21
 9ea:	62 9f       	mul	r22, r18
 9ec:	f0 01       	movw	r30, r0
 9ee:	72 9f       	mul	r23, r18
 9f0:	bb 27       	eor	r27, r27
 9f2:	f0 0d       	add	r31, r0
 9f4:	b1 1d       	adc	r27, r1
 9f6:	63 9f       	mul	r22, r19
 9f8:	aa 27       	eor	r26, r26
 9fa:	f0 0d       	add	r31, r0
 9fc:	b1 1d       	adc	r27, r1
 9fe:	aa 1f       	adc	r26, r26
 a00:	64 9f       	mul	r22, r20
 a02:	66 27       	eor	r22, r22
 a04:	b0 0d       	add	r27, r0
 a06:	a1 1d       	adc	r26, r1
 a08:	66 1f       	adc	r22, r22
 a0a:	82 9f       	mul	r24, r18
 a0c:	22 27       	eor	r18, r18
 a0e:	b0 0d       	add	r27, r0
 a10:	a1 1d       	adc	r26, r1
 a12:	62 1f       	adc	r22, r18
 a14:	73 9f       	mul	r23, r19
 a16:	b0 0d       	add	r27, r0
 a18:	a1 1d       	adc	r26, r1
 a1a:	62 1f       	adc	r22, r18
 a1c:	83 9f       	mul	r24, r19
 a1e:	a0 0d       	add	r26, r0
 a20:	61 1d       	adc	r22, r1
 a22:	22 1f       	adc	r18, r18
 a24:	74 9f       	mul	r23, r20
 a26:	33 27       	eor	r19, r19
 a28:	a0 0d       	add	r26, r0
 a2a:	61 1d       	adc	r22, r1
 a2c:	23 1f       	adc	r18, r19
 a2e:	84 9f       	mul	r24, r20
 a30:	60 0d       	add	r22, r0
 a32:	21 1d       	adc	r18, r1
 a34:	82 2f       	mov	r24, r18
 a36:	76 2f       	mov	r23, r22
 a38:	6a 2f       	mov	r22, r26
 a3a:	11 24       	eor	r1, r1
 a3c:	9f 57       	subi	r25, 0x7F	; 127
 a3e:	50 40       	sbci	r21, 0x00	; 0
 a40:	9a f0       	brmi	.+38     	; 0xa68 <__mulsf3_pse+0x88>
 a42:	f1 f0       	breq	.+60     	; 0xa80 <__mulsf3_pse+0xa0>
 a44:	88 23       	and	r24, r24
 a46:	4a f0       	brmi	.+18     	; 0xa5a <__mulsf3_pse+0x7a>
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	bb 1f       	adc	r27, r27
 a4e:	66 1f       	adc	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	91 50       	subi	r25, 0x01	; 1
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	a9 f7       	brne	.-22     	; 0xa44 <__mulsf3_pse+0x64>
 a5a:	9e 3f       	cpi	r25, 0xFE	; 254
 a5c:	51 05       	cpc	r21, r1
 a5e:	80 f0       	brcs	.+32     	; 0xa80 <__mulsf3_pse+0xa0>
 a60:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>
 a64:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_szero>
 a68:	5f 3f       	cpi	r21, 0xFF	; 255
 a6a:	e4 f3       	brlt	.-8      	; 0xa64 <__mulsf3_pse+0x84>
 a6c:	98 3e       	cpi	r25, 0xE8	; 232
 a6e:	d4 f3       	brlt	.-12     	; 0xa64 <__mulsf3_pse+0x84>
 a70:	86 95       	lsr	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b7 95       	ror	r27
 a78:	f7 95       	ror	r31
 a7a:	e7 95       	ror	r30
 a7c:	9f 5f       	subi	r25, 0xFF	; 255
 a7e:	c1 f7       	brne	.-16     	; 0xa70 <__mulsf3_pse+0x90>
 a80:	fe 2b       	or	r31, r30
 a82:	88 0f       	add	r24, r24
 a84:	91 1d       	adc	r25, r1
 a86:	96 95       	lsr	r25
 a88:	87 95       	ror	r24
 a8a:	97 f9       	bld	r25, 7
 a8c:	08 95       	ret

00000a8e <__divmodhi4>:
 a8e:	97 fb       	bst	r25, 7
 a90:	07 2e       	mov	r0, r23
 a92:	16 f4       	brtc	.+4      	; 0xa98 <__divmodhi4+0xa>
 a94:	00 94       	com	r0
 a96:	07 d0       	rcall	.+14     	; 0xaa6 <__divmodhi4_neg1>
 a98:	77 fd       	sbrc	r23, 7
 a9a:	09 d0       	rcall	.+18     	; 0xaae <__divmodhi4_neg2>
 a9c:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodhi4>
 aa0:	07 fc       	sbrc	r0, 7
 aa2:	05 d0       	rcall	.+10     	; 0xaae <__divmodhi4_neg2>
 aa4:	3e f4       	brtc	.+14     	; 0xab4 <__divmodhi4_exit>

00000aa6 <__divmodhi4_neg1>:
 aa6:	90 95       	com	r25
 aa8:	81 95       	neg	r24
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	08 95       	ret

00000aae <__divmodhi4_neg2>:
 aae:	70 95       	com	r23
 ab0:	61 95       	neg	r22
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ab4 <__divmodhi4_exit>:
 ab4:	08 95       	ret

00000ab6 <__muluhisi3>:
 ab6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__umulhisi3>
 aba:	a5 9f       	mul	r26, r21
 abc:	90 0d       	add	r25, r0
 abe:	b4 9f       	mul	r27, r20
 ac0:	90 0d       	add	r25, r0
 ac2:	a4 9f       	mul	r26, r20
 ac4:	80 0d       	add	r24, r0
 ac6:	91 1d       	adc	r25, r1
 ac8:	11 24       	eor	r1, r1
 aca:	08 95       	ret

00000acc <__udivmodhi4>:
 acc:	aa 1b       	sub	r26, r26
 ace:	bb 1b       	sub	r27, r27
 ad0:	51 e1       	ldi	r21, 0x11	; 17
 ad2:	07 c0       	rjmp	.+14     	; 0xae2 <__udivmodhi4_ep>

00000ad4 <__udivmodhi4_loop>:
 ad4:	aa 1f       	adc	r26, r26
 ad6:	bb 1f       	adc	r27, r27
 ad8:	a6 17       	cp	r26, r22
 ada:	b7 07       	cpc	r27, r23
 adc:	10 f0       	brcs	.+4      	; 0xae2 <__udivmodhi4_ep>
 ade:	a6 1b       	sub	r26, r22
 ae0:	b7 0b       	sbc	r27, r23

00000ae2 <__udivmodhi4_ep>:
 ae2:	88 1f       	adc	r24, r24
 ae4:	99 1f       	adc	r25, r25
 ae6:	5a 95       	dec	r21
 ae8:	a9 f7       	brne	.-22     	; 0xad4 <__udivmodhi4_loop>
 aea:	80 95       	com	r24
 aec:	90 95       	com	r25
 aee:	bc 01       	movw	r22, r24
 af0:	cd 01       	movw	r24, r26
 af2:	08 95       	ret

00000af4 <__umulhisi3>:
 af4:	a2 9f       	mul	r26, r18
 af6:	b0 01       	movw	r22, r0
 af8:	b3 9f       	mul	r27, r19
 afa:	c0 01       	movw	r24, r0
 afc:	a3 9f       	mul	r26, r19
 afe:	70 0d       	add	r23, r0
 b00:	81 1d       	adc	r24, r1
 b02:	11 24       	eor	r1, r1
 b04:	91 1d       	adc	r25, r1
 b06:	b2 9f       	mul	r27, r18
 b08:	70 0d       	add	r23, r0
 b0a:	81 1d       	adc	r24, r1
 b0c:	11 24       	eor	r1, r1
 b0e:	91 1d       	adc	r25, r1
 b10:	08 95       	ret

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
