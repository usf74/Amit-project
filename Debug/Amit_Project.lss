
Amit_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000f10  00000fa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800076  00800076  00000fba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f3b  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c31  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001046  00000000  00000000  00003e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  00004ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000706  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bab  00000000  00000000  00005be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00006791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_1>
   8:	0c 94 ca 02 	jmp	0x594	; 0x594 <__vector_2>
   c:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_3>
  10:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_4>
  14:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_10>
  2c:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 02 	call	0x544	; 0x544 <main>
  8a:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
  92:	8f b7       	in	r24, 0x3f	; 63
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8f bf       	out	0x3f, r24	; 63
	
	// Preipheral Enable/ Disable Interrupt
	ADCSRA = (ADC_INT << 3) | (ADCSRA & 0XF7); 
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	86 b9       	out	0x06, r24	; 6
	
	// ADC Voltage Reference / Data Adjust
	ADMUX = (ADC_Volt_Ref << 6) | (ADC_Data_Adjust << 5) | (ADMUX & 0X1F);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 71       	andi	r24, 0x1F	; 31
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	87 b9       	out	0x07, r24	; 7
	
	// ADC Mode / CLK Source
	ADCSRA = (ADC_Mode << 5) | (ADC_CLK_Source) | (ADCSRA & 0XD8);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	87 62       	ori	r24, 0x27	; 39
  aa:	86 b9       	out	0x06, r24	; 6
	
	// ADC Auto Trigger Mode
	SFIOR = (ADC_AT_Mode << 5) | (SFIOR & 0X1F);
  ac:	80 b7       	in	r24, 0x30	; 48
  ae:	8f 71       	andi	r24, 0x1F	; 31
  b0:	80 bf       	out	0x30, r24	; 48
	
	// ADC Enable
	Set_Bit(ADCSRA, 7);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_Read>:
}
Uint16 ADC_Read(Uint8 Channel)
{
	Uint16 Value;
	// ADC Select Channel
	ADMUX = Channel | (ADMUX & 0XF8);
  ba:	97 b1       	in	r25, 0x07	; 7
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	89 2b       	or	r24, r25
  c0:	87 b9       	out	0x07, r24	; 7
	
	// ADC Start of Conversion
	Set_Bit(ADCSRA, 6);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	86 b9       	out	0x06, r24	; 6
	while(!Get_Bit(ADCSRA, 4));
  c8:	34 9b       	sbis	0x06, 4	; 6
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <ADC_Read+0xe>
	
	Value = ADCR;
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	95 b1       	in	r25, 0x05	; 5
	
	return Value;
  d0:	08 95       	ret

000000d2 <App_Init>:

#include "app.h"
extern Uint8 state,Set_Temp,Avg_Temp;
void App_Init()
{
    T0_Init();
  d2:	0e 94 30 04 	call	0x860	; 0x860 <T0_Init>
    T2_Init();
  d6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <T2_Init>
    Temp_Sensor_Init();
  da:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
    Heating_Element_Init();
  de:	0e 94 56 03 	call	0x6ac	; 0x6ac <Relay1_Init>
    Cooling_Element_Init();
  e2:	0e 94 44 03 	call	0x688	; 0x688 <Relay0_Init>
    LED0_Init();
  e6:	0e 94 8b 02 	call	0x516	; 0x516 <LED0_Init>
    EXT0_INT_Init();
  ea:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <EXT0_INT_Init>
    EXT1_INT_Init();
  ee:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <EXT1_INT_Init>
    EXT2_INT_Init();
  f2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <EXT2_INT_Init>
	S7_Init();
  f6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <S7_Init>
    EEPROM_WriteByte(Addr,Set_Temp);
  fa:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <Set_Temp>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	95 e0       	ldi	r25, 0x05	; 5
 102:	0e 94 49 02 	call	0x492	; 0x492 <EEPROM_WriteByte>

    state=OFF;
 106:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
 10a:	08 95       	ret

0000010c <State_Off>:
}
void State_Off()
{ 
    //Turn off and await on button
    T0_Stop();
 10c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <T0_Stop>
    T2_Stop();
 110:	0e 94 88 05 	call	0xb10	; 0xb10 <T2_Stop>
    S7_Turn_Off();
 114:	0e 94 11 04 	call	0x822	; 0x822 <S7_Turn_Off>
    LED0_OFF();
 118:	0e 94 97 02 	call	0x52e	; 0x52e <LED0_OFF>
    Heating_Element_OFF();
 11c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <Relay1_OFF>
    Cooling_Element_OFF();
 120:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Relay0_OFF>

    while (state==OFF); //Await interrupt of ON button
 124:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 128:	88 23       	and	r24, r24
 12a:	e1 f3       	breq	.-8      	; 0x124 <State_Off+0x18>
}
 12c:	08 95       	ret

0000012e <State_On>:
void State_On()
{
    S7_Turn_ON();
 12e:	0e 94 1c 04 	call	0x838	; 0x838 <S7_Turn_ON>
    Set_Temp=EEPROM_ReadByte(Addr);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	95 e0       	ldi	r25, 0x05	; 5
 136:	0e 94 55 02 	call	0x4aa	; 0x4aa <EEPROM_ReadByte>
 13a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>

    //Start timer for temp measurement
    T0_Delay(T_Temp);
 13e:	64 e6       	ldi	r22, 0x64	; 100
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 3b 04 	call	0x876	; 0x876 <T0_Delay>
	T0_Start();
 14a:	0e 94 65 04 	call	0x8ca	; 0x8ca <T0_Start>
    
    if (Avg_Temp<(Set_Temp-Thresh_Temp))
 14e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <Avg_Temp>
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Set_Temp>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	45 50       	subi	r20, 0x05	; 5
 15e:	51 09       	sbc	r21, r1
 160:	24 17       	cp	r18, r20
 162:	35 07       	cpc	r19, r21
 164:	ac f4       	brge	.+42     	; 0x190 <State_On+0x62>
    {
        //Heating
        Cooling_Element_OFF();
 166:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Relay0_OFF>
        Heating_Element_ON();
 16a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Relay1_ON>
        LED0_ON();
 16e:	0e 94 91 02 	call	0x522	; 0x522 <LED0_ON>
        while((Avg_Temp<Set_Temp) && (state==ON))
 172:	02 c0       	rjmp	.+4      	; 0x178 <State_On+0x4a>
        {
            S7_Display(Avg_Temp);
 174:	0e 94 cd 03 	call	0x79a	; 0x79a <S7_Display>
    {
        //Heating
        Cooling_Element_OFF();
        Heating_Element_ON();
        LED0_ON();
        while((Avg_Temp<Set_Temp) && (state==ON))
 178:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Avg_Temp>
 17c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Set_Temp>
 180:	89 17       	cp	r24, r25
 182:	08 f0       	brcs	.+2      	; 0x186 <State_On+0x58>
 184:	44 c0       	rjmp	.+136    	; 0x20e <State_On+0xe0>
 186:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <__data_end>
 18a:	91 30       	cpi	r25, 0x01	; 1
 18c:	99 f3       	breq	.-26     	; 0x174 <State_On+0x46>
 18e:	08 95       	ret
        {
            S7_Display(Avg_Temp);
        }
    }

    else if (Avg_Temp>(Set_Temp+Thresh_Temp))
 190:	05 96       	adiw	r24, 0x05	; 5
 192:	82 17       	cp	r24, r18
 194:	93 07       	cpc	r25, r19
 196:	d4 f4       	brge	.+52     	; 0x1cc <State_On+0x9e>
    {
        //Start timer for LED Blinking
        T2_Delay(T_Blink);
 198:	64 ef       	ldi	r22, 0xF4	; 244
 19a:	71 e0       	ldi	r23, 0x01	; 1
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 5a 05 	call	0xab4	; 0xab4 <T2_Delay>
	    T2_Start();
 1a4:	0e 94 84 05 	call	0xb08	; 0xb08 <T2_Start>
        //Start cooling
        Cooling_Element_ON();
 1a8:	0e 94 4a 03 	call	0x694	; 0x694 <Relay0_ON>
        Heating_Element_OFF();
 1ac:	0e 94 62 03 	call	0x6c4	; 0x6c4 <Relay1_OFF>
        while((Avg_Temp>Set_Temp) && (state==ON))
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <State_On+0x88>
        {
            S7_Display(Avg_Temp);
 1b2:	0e 94 cd 03 	call	0x79a	; 0x79a <S7_Display>
        T2_Delay(T_Blink);
	    T2_Start();
        //Start cooling
        Cooling_Element_ON();
        Heating_Element_OFF();
        while((Avg_Temp>Set_Temp) && (state==ON))
 1b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Avg_Temp>
 1ba:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Set_Temp>
 1be:	98 17       	cp	r25, r24
 1c0:	30 f5       	brcc	.+76     	; 0x20e <State_On+0xe0>
 1c2:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <__data_end>
 1c6:	91 30       	cpi	r25, 0x01	; 1
 1c8:	a1 f3       	breq	.-24     	; 0x1b2 <State_On+0x84>
 1ca:	08 95       	ret
        }
    }

    else
    {
        T2_Stop();
 1cc:	0e 94 88 05 	call	0xb10	; 0xb10 <T2_Stop>
        Cooling_Element_OFF();
 1d0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Relay0_OFF>
        Heating_Element_OFF();
 1d4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <Relay1_OFF>
        LED0_OFF();
 1d8:	0e 94 97 02 	call	0x52e	; 0x52e <LED0_OFF>
        while ((Avg_Temp>=(Set_Temp-Thresh_Temp)) && ((Avg_Temp<=(Set_Temp+Thresh_Temp))) && (state==ON))  //Loop to await change in temperature with a +-5 threshold
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <State_On+0xb4>
		{
			S7_Display(Avg_Temp);    
 1de:	0e 94 cd 03 	call	0x79a	; 0x79a <S7_Display>
    {
        T2_Stop();
        Cooling_Element_OFF();
        Heating_Element_OFF();
        LED0_OFF();
        while ((Avg_Temp>=(Set_Temp-Thresh_Temp)) && ((Avg_Temp<=(Set_Temp+Thresh_Temp))) && (state==ON))  //Loop to await change in temperature with a +-5 threshold
 1e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Avg_Temp>
 1e6:	48 2f       	mov	r20, r24
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <Set_Temp>
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	b9 01       	movw	r22, r18
 1f2:	65 50       	subi	r22, 0x05	; 5
 1f4:	71 09       	sbc	r23, r1
 1f6:	46 17       	cp	r20, r22
 1f8:	57 07       	cpc	r21, r23
 1fa:	4c f0       	brlt	.+18     	; 0x20e <State_On+0xe0>
 1fc:	2b 5f       	subi	r18, 0xFB	; 251
 1fe:	3f 4f       	sbci	r19, 0xFF	; 255
 200:	24 17       	cp	r18, r20
 202:	35 07       	cpc	r19, r21
 204:	24 f0       	brlt	.+8      	; 0x20e <State_On+0xe0>
 206:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <__data_end>
 20a:	91 30       	cpi	r25, 0x01	; 1
 20c:	41 f3       	breq	.-48     	; 0x1de <State_On+0xb0>
 20e:	08 95       	ret

00000210 <State_Set_Temp>:
}
void State_Set_Temp()
{
    // 5 seconds timer start

    T2_Delay(T_Blink);
 210:	64 ef       	ldi	r22, 0xF4	; 244
 212:	71 e0       	ldi	r23, 0x01	; 1
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 5a 05 	call	0xab4	; 0xab4 <T2_Delay>
    T2_Start();
 21c:	0e 94 84 05 	call	0xb08	; 0xb08 <T2_Start>
    while(state==SET)
 220:	04 c0       	rjmp	.+8      	; 0x22a <State_Set_Temp+0x1a>
	{
		S7_Display(Set_Temp);
 222:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Set_Temp>
 226:	0e 94 cd 03 	call	0x79a	; 0x79a <S7_Display>
{
    // 5 seconds timer start

    T2_Delay(T_Blink);
    T2_Start();
    while(state==SET)
 22a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	c1 f3       	breq	.-16     	; 0x222 <State_Set_Temp+0x12>
	{
		S7_Display(Set_Temp);
	}
}
 232:	08 95       	ret

00000234 <AVG>:
Uint8 AVG(Uint8 *Data)
{
 234:	bc 01       	movw	r22, r24
	Uint16 s=0;
	for (Uint8 i=0;i<10;i++)
 236:	90 e0       	ldi	r25, 0x00	; 0
		S7_Display(Set_Temp);
	}
}
Uint8 AVG(Uint8 *Data)
{
	Uint16 s=0;
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
	for (Uint8 i=0;i<10;i++)
 23c:	07 c0       	rjmp	.+14     	; 0x24c <AVG+0x18>
	{
		s+=Data[i];
 23e:	fb 01       	movw	r30, r22
 240:	e9 0f       	add	r30, r25
 242:	f1 1d       	adc	r31, r1
 244:	40 81       	ld	r20, Z
 246:	24 0f       	add	r18, r20
 248:	31 1d       	adc	r19, r1
	}
}
Uint8 AVG(Uint8 *Data)
{
	Uint16 s=0;
	for (Uint8 i=0;i<10;i++)
 24a:	9f 5f       	subi	r25, 0xFF	; 255
 24c:	9a 30       	cpi	r25, 0x0A	; 10
 24e:	b8 f3       	brcs	.-18     	; 0x23e <AVG+0xa>
	{
		s+=Data[i];
	}
	return ((Uint8)(s/10));
 250:	ad ec       	ldi	r26, 0xCD	; 205
 252:	bc ec       	ldi	r27, 0xCC	; 204
 254:	0e 94 6c 07 	call	0xed8	; 0xed8 <__umulhisi3>
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	08 95       	ret

00000266 <DIO_SetPin_Dir>:

#include "DIO.h"

void DIO_SetPin_Dir(Uint8 port, Uint8 pin, Uint8 dir)
{
	switch (dir)
 266:	44 23       	and	r20, r20
 268:	19 f0       	breq	.+6      	; 0x270 <DIO_SetPin_Dir+0xa>
 26a:	41 30       	cpi	r20, 0x01	; 1
 26c:	c9 f1       	breq	.+114    	; 0x2e0 <DIO_SetPin_Dir+0x7a>
 26e:	08 95       	ret
	{
		case DIO_PIN_IN:
		switch(port)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	91 f0       	breq	.+36     	; 0x298 <DIO_SetPin_Dir+0x32>
 274:	28 f0       	brcs	.+10     	; 0x280 <DIO_SetPin_Dir+0x1a>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	d9 f0       	breq	.+54     	; 0x2b0 <DIO_SetPin_Dir+0x4a>
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	29 f1       	breq	.+74     	; 0x2c8 <DIO_SetPin_Dir+0x62>
 27e:	08 95       	ret
		{
			case DIO_PORTA:
			Clear_Bit(DDRA, pin);
 280:	2a b3       	in	r18, 0x1a	; 26
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPin_Dir+0x26>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPin_Dir+0x22>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	8a bb       	out	0x1a, r24	; 26
			break;
 296:	08 95       	ret
			
			case DIO_PORTB:
			Clear_Bit(DDRB, pin);
 298:	27 b3       	in	r18, 0x17	; 23
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_SetPin_Dir+0x3e>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_SetPin_Dir+0x3a>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	87 bb       	out	0x17, r24	; 23
			break;
 2ae:	08 95       	ret
			
			case DIO_PORTC:
			Clear_Bit(DDRC, pin);
 2b0:	24 b3       	in	r18, 0x14	; 20
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPin_Dir+0x56>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPin_Dir+0x52>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	84 bb       	out	0x14, r24	; 20
			break;
 2c6:	08 95       	ret
			
			case DIO_PORTD:
			Clear_Bit(DDRD, pin);
 2c8:	21 b3       	in	r18, 0x11	; 17
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_SetPin_Dir+0x6e>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_SetPin_Dir+0x6a>
 2d8:	80 95       	com	r24
 2da:	82 23       	and	r24, r18
 2dc:	81 bb       	out	0x11, r24	; 17
			break;
 2de:	08 95       	ret
			break;	
		}
		break;
		
		case DIO_PIN_OUT:
		switch(port)
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	89 f0       	breq	.+34     	; 0x306 <DIO_SetPin_Dir+0xa0>
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <DIO_SetPin_Dir+0x8a>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	c9 f0       	breq	.+50     	; 0x31c <DIO_SetPin_Dir+0xb6>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	11 f1       	breq	.+68     	; 0x332 <DIO_SetPin_Dir+0xcc>
 2ee:	08 95       	ret
		{
			case DIO_PORTA:
			Set_Bit(DDRA, pin);
 2f0:	2a b3       	in	r18, 0x1a	; 26
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_SetPin_Dir+0x96>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_SetPin_Dir+0x92>
 300:	82 2b       	or	r24, r18
 302:	8a bb       	out	0x1a, r24	; 26
			break;
 304:	08 95       	ret
			
			case DIO_PORTB:
			Set_Bit(DDRB, pin);
 306:	27 b3       	in	r18, 0x17	; 23
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_SetPin_Dir+0xac>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_SetPin_Dir+0xa8>
 316:	82 2b       	or	r24, r18
 318:	87 bb       	out	0x17, r24	; 23
			break;
 31a:	08 95       	ret
			
			case DIO_PORTC:
			Set_Bit(DDRC, pin);
 31c:	24 b3       	in	r18, 0x14	; 20
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_SetPin_Dir+0xc2>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_SetPin_Dir+0xbe>
 32c:	82 2b       	or	r24, r18
 32e:	84 bb       	out	0x14, r24	; 20
			break;
 330:	08 95       	ret
			
			case DIO_PORTD:
			Set_Bit(DDRD, pin);
 332:	21 b3       	in	r18, 0x11	; 17
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_SetPin_Dir+0xd8>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_SetPin_Dir+0xd4>
 342:	82 2b       	or	r24, r18
 344:	81 bb       	out	0x11, r24	; 17
 346:	08 95       	ret

00000348 <DIO_SetPin_Val>:
	}
}

void DIO_SetPin_Val(Uint8 port, Uint8 pin, Uint8 val)
{
	switch (val)
 348:	44 23       	and	r20, r20
 34a:	19 f0       	breq	.+6      	; 0x352 <DIO_SetPin_Val+0xa>
 34c:	41 30       	cpi	r20, 0x01	; 1
 34e:	c9 f1       	breq	.+114    	; 0x3c2 <DIO_SetPin_Val+0x7a>
 350:	08 95       	ret
	{
		case DIO_PIN_OFF:
		switch(port)
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	91 f0       	breq	.+36     	; 0x37a <DIO_SetPin_Val+0x32>
 356:	28 f0       	brcs	.+10     	; 0x362 <DIO_SetPin_Val+0x1a>
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	d9 f0       	breq	.+54     	; 0x392 <DIO_SetPin_Val+0x4a>
 35c:	83 30       	cpi	r24, 0x03	; 3
 35e:	29 f1       	breq	.+74     	; 0x3aa <DIO_SetPin_Val+0x62>
 360:	08 95       	ret
		{
			case DIO_PORTA:
			Clear_Bit(PORTA, pin);
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_SetPin_Val+0x26>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_SetPin_Val+0x22>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	8b bb       	out	0x1b, r24	; 27
			break;
 378:	08 95       	ret
			
			case DIO_PORTB:
			Clear_Bit(PORTB, pin);
 37a:	28 b3       	in	r18, 0x18	; 24
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_SetPin_Val+0x3e>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_SetPin_Val+0x3a>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	88 bb       	out	0x18, r24	; 24
			break;
 390:	08 95       	ret
			
			case DIO_PORTC:
			Clear_Bit(PORTC, pin);
 392:	25 b3       	in	r18, 0x15	; 21
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPin_Val+0x56>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPin_Val+0x52>
 3a2:	80 95       	com	r24
 3a4:	82 23       	and	r24, r18
 3a6:	85 bb       	out	0x15, r24	; 21
			break;
 3a8:	08 95       	ret
			
			case DIO_PORTD:
			Clear_Bit(PORTD, pin);
 3aa:	22 b3       	in	r18, 0x12	; 18
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_SetPin_Val+0x6e>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_SetPin_Val+0x6a>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	82 bb       	out	0x12, r24	; 18
			break;
 3c0:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_ON:
		switch(port)
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	89 f0       	breq	.+34     	; 0x3e8 <DIO_SetPin_Val+0xa0>
 3c6:	28 f0       	brcs	.+10     	; 0x3d2 <DIO_SetPin_Val+0x8a>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	c9 f0       	breq	.+50     	; 0x3fe <DIO_SetPin_Val+0xb6>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	11 f1       	breq	.+68     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3d0:	08 95       	ret
		{
			case DIO_PORTA:
			Set_Bit(PORTA, pin);
 3d2:	2b b3       	in	r18, 0x1b	; 27
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_SetPin_Val+0x96>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_SetPin_Val+0x92>
 3e2:	82 2b       	or	r24, r18
 3e4:	8b bb       	out	0x1b, r24	; 27
			break;
 3e6:	08 95       	ret
			
			case DIO_PORTB:
			Set_Bit(PORTB, pin);
 3e8:	28 b3       	in	r18, 0x18	; 24
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_SetPin_Val+0xac>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_SetPin_Val+0xa8>
 3f8:	82 2b       	or	r24, r18
 3fa:	88 bb       	out	0x18, r24	; 24
			break;
 3fc:	08 95       	ret
			
			case DIO_PORTC:
			Set_Bit(PORTC, pin);
 3fe:	25 b3       	in	r18, 0x15	; 21
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	82 2b       	or	r24, r18
 410:	85 bb       	out	0x15, r24	; 21
			break;
 412:	08 95       	ret
			
			case DIO_PORTD:
			Set_Bit(PORTD, pin);
 414:	22 b3       	in	r18, 0x12	; 18
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	82 2b       	or	r24, r18
 426:	82 bb       	out	0x12, r24	; 18
 428:	08 95       	ret

0000042a <DIO_TogglePin>:
	}		
}

void DIO_TogglePin(Uint8 port, Uint8 pin)
{
	switch(port)
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	89 f0       	breq	.+34     	; 0x450 <DIO_TogglePin+0x26>
 42e:	28 f0       	brcs	.+10     	; 0x43a <DIO_TogglePin+0x10>
 430:	82 30       	cpi	r24, 0x02	; 2
 432:	c9 f0       	breq	.+50     	; 0x466 <DIO_TogglePin+0x3c>
 434:	83 30       	cpi	r24, 0x03	; 3
 436:	11 f1       	breq	.+68     	; 0x47c <DIO_TogglePin+0x52>
 438:	08 95       	ret
	{
		case DIO_PORTA:
		Toggle_Bit(PORTA, pin);
 43a:	2b b3       	in	r18, 0x1b	; 27
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_TogglePin+0x1c>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_TogglePin+0x18>
 44a:	82 27       	eor	r24, r18
 44c:	8b bb       	out	0x1b, r24	; 27
		break;
 44e:	08 95       	ret
		
		case DIO_PORTB:
		Toggle_Bit(PORTB, pin);
 450:	28 b3       	in	r18, 0x18	; 24
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_TogglePin+0x32>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_TogglePin+0x2e>
 460:	82 27       	eor	r24, r18
 462:	88 bb       	out	0x18, r24	; 24
		break;
 464:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_Bit(PORTC, pin);
 466:	25 b3       	in	r18, 0x15	; 21
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_TogglePin+0x48>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_TogglePin+0x44>
 476:	82 27       	eor	r24, r18
 478:	85 bb       	out	0x15, r24	; 21
		break;
 47a:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_Bit(PORTD, pin);
 47c:	22 b3       	in	r18, 0x12	; 18
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_TogglePin+0x5e>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_TogglePin+0x5a>
 48c:	82 27       	eor	r24, r18
 48e:	82 bb       	out	0x12, r24	; 18
 490:	08 95       	ret

00000492 <EEPROM_WriteByte>:
    EECR |= EEPROM_INT<<EERIE;
}

void EEPROM_WriteByte(Uint16 Addr , Uint8 Data)
{
    while (EECR & 1<<EEWE);    // To Await previous write operation finish
 492:	e1 99       	sbic	0x1c, 1	; 28
 494:	fe cf       	rjmp	.-4      	; 0x492 <EEPROM_WriteByte>
    // Write data and address registers
    EEDR=Data;
 496:	6d bb       	out	0x1d, r22	; 29
    EARL=(Uint8)Addr;
 498:	8e bb       	out	0x1e, r24	; 30
    EARH=(Uint8)(Addr>>8);
 49a:	9f bb       	out	0x1f, r25	; 31
    //EEAR=addr;
    // Start Write
    EECR |= (1<<EEMWE);
 49c:	8c b3       	in	r24, 0x1c	; 28
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	8c bb       	out	0x1c, r24	; 28
    EECR |= (1<<EEWE);
 4a2:	8c b3       	in	r24, 0x1c	; 28
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	8c bb       	out	0x1c, r24	; 28
 4a8:	08 95       	ret

000004aa <EEPROM_ReadByte>:
}
Uint8  EEPROM_ReadByte(Uint16 Addr)
{
    EARL=(Uint8)Addr;
 4aa:	8e bb       	out	0x1e, r24	; 30
    EARH=(Uint8)(Addr>>8);
 4ac:	9f bb       	out	0x1f, r25	; 31
    EECR |= (1<<EERE);
 4ae:	8c b3       	in	r24, 0x1c	; 28
 4b0:	81 60       	ori	r24, 0x01	; 1
 4b2:	8c bb       	out	0x1c, r24	; 28
    return EEDR;
 4b4:	8d b3       	in	r24, 0x1d	; 29
}
 4b6:	08 95       	ret

000004b8 <EXT0_INT_Init>:

// EXT INT Functions
void EXT0_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 4b8:	8f b7       	in	r24, 0x3f	; 63
 4ba:	80 68       	ori	r24, 0x80	; 128
 4bc:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT0_INT << 6) | (GICR & 0XBF);
 4be:	8b b7       	in	r24, 0x3b	; 59
 4c0:	80 64       	ori	r24, 0x40	; 64
 4c2:	8b bf       	out	0x3b, r24	; 59
	
	// EXT0 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, DIO_PIN_2, DIO_PIN_IN);
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	
	// EXT0 INT Trigger
	MCUCR = EXT0_INT_Trigger | (MCUCR & 0XFC);
 4ce:	85 b7       	in	r24, 0x35	; 53
 4d0:	83 60       	ori	r24, 0x03	; 3
 4d2:	85 bf       	out	0x35, r24	; 53
 4d4:	08 95       	ret

000004d6 <EXT1_INT_Init>:
}

void EXT1_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 4d6:	8f b7       	in	r24, 0x3f	; 63
 4d8:	80 68       	ori	r24, 0x80	; 128
 4da:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT1_INT << 7) | (GICR & 0X7F);
 4dc:	8b b7       	in	r24, 0x3b	; 59
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	8b bf       	out	0x3b, r24	; 59
	
	// EXT1 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, DIO_PIN_3, DIO_PIN_IN);
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	63 e0       	ldi	r22, 0x03	; 3
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	
	// EXT1 INT Trigger
	MCUCR = EXT1_INT_Trigger | (MCUCR & 0XF3);
 4ec:	85 b7       	in	r24, 0x35	; 53
 4ee:	80 7f       	andi	r24, 0xF0	; 240
 4f0:	83 60       	ori	r24, 0x03	; 3
 4f2:	85 bf       	out	0x35, r24	; 53
 4f4:	08 95       	ret

000004f6 <EXT2_INT_Init>:
}

void EXT2_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 4f6:	8f b7       	in	r24, 0x3f	; 63
 4f8:	80 68       	ori	r24, 0x80	; 128
 4fa:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT2_INT << 5) | (GICR & 0XDF);
 4fc:	8b b7       	in	r24, 0x3b	; 59
 4fe:	80 62       	ori	r24, 0x20	; 32
 500:	8b bf       	out	0x3b, r24	; 59
	
	// EXT2 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTB, DIO_PIN_2, DIO_PIN_IN);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	62 e0       	ldi	r22, 0x02	; 2
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	
	// EXT2 INT Trigger
	MCUCSR = EXT2_INT_Trigger | (MCUCSR & 0XBF);
 50c:	84 b7       	in	r24, 0x34	; 52
 50e:	8e 7b       	andi	r24, 0xBE	; 190
 510:	81 60       	ori	r24, 0x01	; 1
 512:	84 bf       	out	0x34, r24	; 52
 514:	08 95       	ret

00000516 <LED0_Init>:
#include "LED.h"

//LED0 Functions
void LED0_Init(void)
{
	DIO_SetPin_Dir(LED0_Port, LED0_PIN, DIO_PIN_OUT);
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
 520:	08 95       	ret

00000522 <LED0_ON>:
}
void LED0_ON(void)
{
	DIO_SetPin_Val(LED0_Port, LED0_PIN, DIO_PIN_ON);
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 52c:	08 95       	ret

0000052e <LED0_OFF>:
}
void LED0_OFF(void)
{
	DIO_SetPin_Val(LED0_Port, LED0_PIN, DIO_PIN_OFF);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 538:	08 95       	ret

0000053a <LED0_Toggle>:
}
void LED0_Toggle(void)
{
	DIO_TogglePin(LED0_Port, LED0_PIN);
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 15 02 	call	0x42a	; 0x42a <DIO_TogglePin>
 542:	08 95       	ret

00000544 <main>:
Uint8 Temp_Arr[10]={10,10,0,50,60,30,10,50,50,50};


int main(void)
{
	App_Init();
 544:	0e 94 69 00 	call	0xd2	; 0xd2 <App_Init>
	
	while(1)
	{
		switch (state)
 548:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	21 f0       	breq	.+8      	; 0x558 <main+0x14>
 550:	30 f0       	brcs	.+12     	; 0x55e <main+0x1a>
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	39 f0       	breq	.+14     	; 0x564 <main+0x20>
 556:	f8 cf       	rjmp	.-16     	; 0x548 <main+0x4>
		{
			case ON:
			State_On(); break;
 558:	0e 94 97 00 	call	0x12e	; 0x12e <State_On>
 55c:	f5 cf       	rjmp	.-22     	; 0x548 <main+0x4>
			case OFF:
			State_Off(); break;
 55e:	0e 94 86 00 	call	0x10c	; 0x10c <State_Off>
 562:	f2 cf       	rjmp	.-28     	; 0x548 <main+0x4>
			case SET:
			State_Set_Temp(); break;
 564:	0e 94 08 01 	call	0x210	; 0x210 <State_Set_Temp>
 568:	ef cf       	rjmp	.-34     	; 0x548 <main+0x4>

0000056a <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
	state= !state;
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <__data_end>
 57e:	91 11       	cpse	r25, r1
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
}
 586:	9f 91       	pop	r25
 588:	8f 91       	pop	r24
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <__vector_2>:

ISR(INT1_vect)
{
 594:	1f 92       	push	r1
 596:	0f 92       	push	r0
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	0f 92       	push	r0
 59c:	11 24       	eor	r1, r1
 59e:	2f 93       	push	r18
 5a0:	3f 93       	push	r19
 5a2:	4f 93       	push	r20
 5a4:	5f 93       	push	r21
 5a6:	6f 93       	push	r22
 5a8:	7f 93       	push	r23
 5aa:	8f 93       	push	r24
 5ac:	9f 93       	push	r25
 5ae:	af 93       	push	r26
 5b0:	bf 93       	push	r27
 5b2:	ef 93       	push	r30
 5b4:	ff 93       	push	r31
	state=SET;
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	Set_Temp += 5;
 5bc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Set_Temp>
 5c0:	8b 5f       	subi	r24, 0xFB	; 251
 5c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>
	if (Set_Temp>MAX_TEMP)
 5c6:	8c 34       	cpi	r24, 0x4C	; 76
 5c8:	18 f0       	brcs	.+6      	; 0x5d0 <__vector_2+0x3c>
	{
		Set_Temp=MAX_TEMP;
 5ca:	8b e4       	ldi	r24, 0x4B	; 75
 5cc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>
	}
	EEPROM_WriteByte(Addr,Set_Temp);
 5d0:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <Set_Temp>
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	95 e0       	ldi	r25, 0x05	; 5
 5d8:	0e 94 49 02 	call	0x492	; 0x492 <EEPROM_WriteByte>
    T0_Delay(T_Set);
 5dc:	68 e8       	ldi	r22, 0x88	; 136
 5de:	73 e1       	ldi	r23, 0x13	; 19
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 3b 04 	call	0x876	; 0x876 <T0_Delay>
    T0_Start();
 5e8:	0e 94 65 04 	call	0x8ca	; 0x8ca <T0_Start>

}
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__vector_3>:

ISR(INT2_vect)
{
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	2f 93       	push	r18
 61a:	3f 93       	push	r19
 61c:	4f 93       	push	r20
 61e:	5f 93       	push	r21
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
 62c:	ef 93       	push	r30
 62e:	ff 93       	push	r31
	state=SET;
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	Set_Temp -= 5;
 636:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Set_Temp>
 63a:	85 50       	subi	r24, 0x05	; 5
 63c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>
	if (Set_Temp<MIN_TEMP)
 640:	83 32       	cpi	r24, 0x23	; 35
 642:	18 f4       	brcc	.+6      	; 0x64a <__vector_3+0x3c>
	{
		Set_Temp=MIN_TEMP;
 644:	83 e2       	ldi	r24, 0x23	; 35
 646:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>
	}
	EEPROM_WriteByte(Addr,Set_Temp);
 64a:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <Set_Temp>
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	95 e0       	ldi	r25, 0x05	; 5
 652:	0e 94 49 02 	call	0x492	; 0x492 <EEPROM_WriteByte>
    T0_Delay(T_Set);
 656:	68 e8       	ldi	r22, 0x88	; 136
 658:	73 e1       	ldi	r23, 0x13	; 19
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 3b 04 	call	0x876	; 0x876 <T0_Delay>
    T0_Start();
 662:	0e 94 65 04 	call	0x8ca	; 0x8ca <T0_Start>

 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	7f 91       	pop	r23
 674:	6f 91       	pop	r22
 676:	5f 91       	pop	r21
 678:	4f 91       	pop	r20
 67a:	3f 91       	pop	r19
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <Relay0_Init>:
{
	DIO_SetPin_Val(Relay0_Port, Relay0_PIN, DIO_PIN_OFF);
}
void Relay0_Toggle(void)
{
	DIO_TogglePin(Relay0_Port, Relay0_PIN);
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	65 e0       	ldi	r22, 0x05	; 5
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
 692:	08 95       	ret

00000694 <Relay0_ON>:
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	65 e0       	ldi	r22, 0x05	; 5
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 69e:	08 95       	ret

000006a0 <Relay0_OFF>:
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	65 e0       	ldi	r22, 0x05	; 5
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 6aa:	08 95       	ret

000006ac <Relay1_Init>:
}
//Relay1 Functions
void Relay1_Init(void)
{
	DIO_SetPin_Dir(Relay1_Port, Relay1_PIN, DIO_PIN_OUT);
 6ac:	41 e0       	ldi	r20, 0x01	; 1
 6ae:	64 e0       	ldi	r22, 0x04	; 4
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
 6b6:	08 95       	ret

000006b8 <Relay1_ON>:
}
void Relay1_ON(void)
{
	DIO_SetPin_Val(Relay1_Port, Relay1_PIN, DIO_PIN_ON);
 6b8:	41 e0       	ldi	r20, 0x01	; 1
 6ba:	64 e0       	ldi	r22, 0x04	; 4
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 6c2:	08 95       	ret

000006c4 <Relay1_OFF>:
}
void Relay1_OFF(void)
{
	DIO_SetPin_Val(Relay1_Port, Relay1_PIN, DIO_PIN_OFF);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	64 e0       	ldi	r22, 0x04	; 4
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 6ce:	08 95       	ret

000006d0 <S7_Init>:
// S7 Functions
Uint8 Nums[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
void S7_Init(void)
{
	// S7 Data Pins Direction
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN0, DIO_PIN_OUT);
 6d0:	41 e0       	ldi	r20, 0x01	; 1
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN1, DIO_PIN_OUT);
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	61 e0       	ldi	r22, 0x01	; 1
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN2, DIO_PIN_OUT);
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN3, DIO_PIN_OUT);
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	63 e0       	ldi	r22, 0x03	; 3
 6f2:	82 e0       	ldi	r24, 0x02	; 2
 6f4:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN4, DIO_PIN_OUT);
 6f8:	41 e0       	ldi	r20, 0x01	; 1
 6fa:	64 e0       	ldi	r22, 0x04	; 4
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN5, DIO_PIN_OUT);
 702:	41 e0       	ldi	r20, 0x01	; 1
 704:	65 e0       	ldi	r22, 0x05	; 5
 706:	82 e0       	ldi	r24, 0x02	; 2
 708:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN6, DIO_PIN_OUT);
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	66 e0       	ldi	r22, 0x06	; 6
 710:	82 e0       	ldi	r24, 0x02	; 2
 712:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	
	// S7 Data Pins Direction
	DIO_SetPin_Dir(S7_Control_Port, S7_E1_PIN, DIO_PIN_OUT);
 716:	41 e0       	ldi	r20, 0x01	; 1
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	83 e0       	ldi	r24, 0x03	; 3
 71c:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Control_Port, S7_E2_PIN, DIO_PIN_OUT);
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	
	// S7 DP Pin Direction
	DIO_SetPin_Dir(S7_DP_Port, S7_DP_PIN, DIO_PIN_OUT);
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	63 e0       	ldi	r22, 0x03	; 3
 72e:	83 e0       	ldi	r24, 0x03	; 3
 730:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	
	// S7 Data Pins Value
	DIO_SetPin_Val(S7_Data_Port, S7_Data_PIN0, DIO_PIN_ON);
 734:	41 e0       	ldi	r20, 0x01	; 1
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Data_Port, S7_Data_PIN1, DIO_PIN_ON);
 73e:	41 e0       	ldi	r20, 0x01	; 1
 740:	61 e0       	ldi	r22, 0x01	; 1
 742:	82 e0       	ldi	r24, 0x02	; 2
 744:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Data_Port, S7_Data_PIN2, DIO_PIN_ON);
 748:	41 e0       	ldi	r20, 0x01	; 1
 74a:	62 e0       	ldi	r22, 0x02	; 2
 74c:	82 e0       	ldi	r24, 0x02	; 2
 74e:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Data_Port, S7_Data_PIN3, DIO_PIN_ON);
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	63 e0       	ldi	r22, 0x03	; 3
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN4, DIO_PIN_ON);
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	64 e0       	ldi	r22, 0x04	; 4
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN5, DIO_PIN_ON);
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	65 e0       	ldi	r22, 0x05	; 5
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN6, DIO_PIN_ON);
 770:	41 e0       	ldi	r20, 0x01	; 1
 772:	66 e0       	ldi	r22, 0x06	; 6
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	0e 94 33 01 	call	0x266	; 0x266 <DIO_SetPin_Dir>
	
	// S7 Enable & DP Pins Value
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_ON);
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_ON);
 784:	41 e0       	ldi	r20, 0x01	; 1
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_DP_Port, S7_DP_PIN, DIO_PIN_ON);
 78e:	41 e0       	ldi	r20, 0x01	; 1
 790:	63 e0       	ldi	r22, 0x03	; 3
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 798:	08 95       	ret

0000079a <S7_Display>:
	
}
void S7_Display(Uint8 data)
{
 79a:	cf 93       	push	r28
	Uint8 Ones = 0, Tens = 0;
	data = (data >= 0) && (data < 100) ? data : 0;
 79c:	84 36       	cpi	r24, 0x64	; 100
 79e:	08 f0       	brcs	.+2      	; 0x7a2 <S7_Display+0x8>
 7a0:	80 e0       	ldi	r24, 0x00	; 0
	Ones = data % 10;
 7a2:	ed ec       	ldi	r30, 0xCD	; 205
 7a4:	8e 9f       	mul	r24, r30
 7a6:	e1 2d       	mov	r30, r1
 7a8:	11 24       	eor	r1, r1
 7aa:	9e 2f       	mov	r25, r30
 7ac:	96 95       	lsr	r25
 7ae:	96 95       	lsr	r25
 7b0:	96 95       	lsr	r25
 7b2:	99 0f       	add	r25, r25
 7b4:	29 2f       	mov	r18, r25
 7b6:	22 0f       	add	r18, r18
 7b8:	22 0f       	add	r18, r18
 7ba:	92 0f       	add	r25, r18
 7bc:	89 1b       	sub	r24, r25
	Tens = data / 10;
 7be:	ce 2f       	mov	r28, r30
 7c0:	c6 95       	lsr	r28
 7c2:	c6 95       	lsr	r28
 7c4:	c6 95       	lsr	r28
	S7_Data_Bus  = Nums[Ones];
 7c6:	e8 2f       	mov	r30, r24
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	e4 59       	subi	r30, 0x94	; 148
 7cc:	ff 4f       	sbci	r31, 0xFF	; 255
 7ce:	80 81       	ld	r24, Z
 7d0:	85 bb       	out	0x15, r24	; 21
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_OFF);
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	83 e0       	ldi	r24, 0x03	; 3
 7d8:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_ON);
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	83 e0       	ldi	r24, 0x03	; 3
 7e2:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e6:	8f e1       	ldi	r24, 0x1F	; 31
 7e8:	9e e4       	ldi	r25, 0x4E	; 78
 7ea:	01 97       	sbiw	r24, 0x01	; 1
 7ec:	f1 f7       	brne	.-4      	; 0x7ea <S7_Display+0x50>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <S7_Display+0x56>
 7f0:	00 00       	nop
	_delay_ms(5);
	S7_Data_Bus  = Nums[Tens];
 7f2:	ec 2f       	mov	r30, r28
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	e4 59       	subi	r30, 0x94	; 148
 7f8:	ff 4f       	sbci	r31, 0xFF	; 255
 7fa:	80 81       	ld	r24, Z
 7fc:	85 bb       	out	0x15, r24	; 21
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_ON);
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_OFF);
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	83 e0       	ldi	r24, 0x03	; 3
 80e:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 812:	8f e1       	ldi	r24, 0x1F	; 31
 814:	9e e4       	ldi	r25, 0x4E	; 78
 816:	01 97       	sbiw	r24, 0x01	; 1
 818:	f1 f7       	brne	.-4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81c:	00 00       	nop
	_delay_ms(5);
}
 81e:	cf 91       	pop	r28
 820:	08 95       	ret

00000822 <S7_Turn_Off>:

void S7_Turn_Off()
{
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_ON);
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	83 e0       	ldi	r24, 0x03	; 3
 828:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_ON);
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 836:	08 95       	ret

00000838 <S7_Turn_ON>:
}
void S7_Turn_ON()
{
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_OFF);
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	83 e0       	ldi	r24, 0x03	; 3
 83e:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_OFF);
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPin_Val>
 84c:	08 95       	ret

0000084e <S7_Toggle>:
}
void S7_Toggle()
{
	DIO_TogglePin(S7_Control_Port, S7_E1_PIN);
 84e:	61 e0       	ldi	r22, 0x01	; 1
 850:	83 e0       	ldi	r24, 0x03	; 3
 852:	0e 94 15 02 	call	0x42a	; 0x42a <DIO_TogglePin>
	DIO_TogglePin(S7_Control_Port, S7_E2_PIN);
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	83 e0       	ldi	r24, 0x03	; 3
 85a:	0e 94 15 02 	call	0x42a	; 0x42a <DIO_TogglePin>
 85e:	08 95       	ret

00000860 <T0_Init>:

// Timer0 Functions
void T0_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 860:	8f b7       	in	r24, 0x3f	; 63
 862:	80 68       	ori	r24, 0x80	; 128
 864:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	TIMSK = (T0_OVF_INT) | (T0_OCF_INT << 1) | (TIMSK & 0XFC);
 866:	89 b7       	in	r24, 0x39	; 57
 868:	8c 7f       	andi	r24, 0xFC	; 252
 86a:	81 60       	ori	r24, 0x01	; 1
 86c:	89 bf       	out	0x39, r24	; 57
	
	// Timer0 Mode
	TCCR0 = (Get_Bit(Timer0_Mode, 0) << 6) | (Get_Bit(Timer0_Mode, 1) << 3) | (TCCR0 & 0XB7);
 86e:	83 b7       	in	r24, 0x33	; 51
 870:	87 7b       	andi	r24, 0xB7	; 183
 872:	83 bf       	out	0x33, r24	; 51
 874:	08 95       	ret

00000876 <T0_Delay>:
	
}
void T0_Delay(Uint32 delay_ms)
{
 876:	0f 93       	push	r16
 878:	1f 93       	push	r17
 87a:	9b 01       	movw	r18, r22
 87c:	ac 01       	movw	r20, r24
	f32 Tick_Time_us = (f32)(Timer0_PreSC) / F_OSC_MHZ;
	Uint32 Tick_num = (delay_ms * 1000)/ Tick_Time_us;
 87e:	a8 ee       	ldi	r26, 0xE8	; 232
 880:	b3 e0       	ldi	r27, 0x03	; 3
 882:	0e 94 7b 07 	call	0xef6	; 0xef6 <__muluhisi3>
 886:	0e 94 71 06 	call	0xce2	; 0xce2 <__floatunsisf>
 88a:	20 e0       	ldi	r18, 0x00	; 0
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	40 e8       	ldi	r20, 0x80	; 128
 890:	5c e3       	ldi	r21, 0x3C	; 60
 892:	0e 94 d7 06 	call	0xdae	; 0xdae <__mulsf3>
 896:	0e 94 42 06 	call	0xc84	; 0xc84 <__fixunssfsi>
	
	#if Timer0_Mode == T0_OVF
	
	T0_OVF_num = Tick_num % 256 ? (Tick_num / 256) + 1 : (Tick_num / 256);
 89a:	66 23       	and	r22, r22
 89c:	39 f0       	breq	.+14     	; 0x8ac <T0_Delay+0x36>
 89e:	07 2f       	mov	r16, r23
 8a0:	18 2f       	mov	r17, r24
 8a2:	29 2f       	mov	r18, r25
 8a4:	33 27       	eor	r19, r19
 8a6:	0f 5f       	subi	r16, 0xFF	; 255
 8a8:	1f 4f       	sbci	r17, 0xFF	; 255
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <T0_Delay+0x3e>
 8ac:	07 2f       	mov	r16, r23
 8ae:	18 2f       	mov	r17, r24
 8b0:	29 2f       	mov	r18, r25
 8b2:	33 27       	eor	r19, r19
 8b4:	10 93 95 00 	sts	0x0095, r17	; 0x800095 <T0_OVF_num+0x1>
 8b8:	00 93 94 00 	sts	0x0094, r16	; 0x800094 <T0_OVF_num>
	
	T0_OVF_Init_val = 256 - (Tick_num % 256);
 8bc:	61 95       	neg	r22
 8be:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <T0_OVF_Init_val>
	TCNT0 = T0_OVF_Init_val;
 8c2:	62 bf       	out	0x32, r22	; 50
	
	T0_OCF_Init_val = (Tick_num % 256) - 1;
	OCR0 = T0_OCF_Init_val;

	#endif
}
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	08 95       	ret

000008ca <T0_Start>:
void T0_Start(void)
{
	TCCR0 = Timer0_CLK | (TCCR0 & 0XF8);
 8ca:	83 b7       	in	r24, 0x33	; 51
 8cc:	88 7f       	andi	r24, 0xF8	; 248
 8ce:	85 60       	ori	r24, 0x05	; 5
 8d0:	83 bf       	out	0x33, r24	; 51
 8d2:	08 95       	ret

000008d4 <T0_Stop>:
}
void T0_Stop(void)
{
	TCCR0 &= 0XF8;		//	   1 1 0 1 | 0 1 0 1
 8d4:	83 b7       	in	r24, 0x33	; 51
 8d6:	88 7f       	andi	r24, 0xF8	; 248
 8d8:	83 bf       	out	0x33, r24	; 51
 8da:	08 95       	ret

000008dc <__vector_11>:
	//     -----------------
	//     1 1 0 1 | 0 0 0 0
}

ISR(TIMER0_OVF_vect)
{
 8dc:	1f 92       	push	r1
 8de:	0f 92       	push	r0
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	0f 92       	push	r0
 8e4:	11 24       	eor	r1, r1
 8e6:	2f 93       	push	r18
 8e8:	3f 93       	push	r19
 8ea:	4f 93       	push	r20
 8ec:	5f 93       	push	r21
 8ee:	6f 93       	push	r22
 8f0:	7f 93       	push	r23
 8f2:	8f 93       	push	r24
 8f4:	9f 93       	push	r25
 8f6:	af 93       	push	r26
 8f8:	bf 93       	push	r27
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	ef 93       	push	r30
 900:	ff 93       	push	r31
	static Uint32 count = 0;
	count++;
 902:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <count.1872>
 906:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <count.1872+0x1>
 90a:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <count.1872+0x2>
 90e:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <count.1872+0x3>
 912:	01 96       	adiw	r24, 0x01	; 1
 914:	a1 1d       	adc	r26, r1
 916:	b1 1d       	adc	r27, r1
 918:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <count.1872>
 91c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <count.1872+0x1>
 920:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <count.1872+0x2>
 924:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <count.1872+0x3>
	if (count == T0_OVF_num)
 928:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <T0_OVF_num>
 92c:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <T0_OVF_num+0x1>
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	84 17       	cp	r24, r20
 936:	95 07       	cpc	r25, r21
 938:	a6 07       	cpc	r26, r22
 93a:	b7 07       	cpc	r27, r23
 93c:	09 f0       	breq	.+2      	; 0x940 <__vector_11+0x64>
 93e:	50 c0       	rjmp	.+160    	; 0x9e0 <__vector_11+0x104>
	{
		// --------------------------------------
		//------------------------------------------------
		if (state==SET)
 940:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 944:	82 30       	cpi	r24, 0x02	; 2
 946:	21 f4       	brne	.+8      	; 0x950 <__vector_11+0x74>
		{
			state=ON;
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 94e:	38 c0       	rjmp	.+112    	; 0x9c0 <__vector_11+0xe4>
		}
		else if (state==ON)
 950:	81 30       	cpi	r24, 0x01	; 1
 952:	b1 f5       	brne	.+108    	; 0x9c0 <__vector_11+0xe4>
		{
			static Uint8 c=0;
			Temp_Arr[c%10]=Temp_Sensor_Read();
 954:	c0 91 83 00 	lds	r28, 0x0083	; 0x800083 <c.1873>
 958:	8d ec       	ldi	r24, 0xCD	; 205
 95a:	c8 9f       	mul	r28, r24
 95c:	81 2d       	mov	r24, r1
 95e:	11 24       	eor	r1, r1
 960:	86 95       	lsr	r24
 962:	86 95       	lsr	r24
 964:	86 95       	lsr	r24
 966:	88 0f       	add	r24, r24
 968:	98 2f       	mov	r25, r24
 96a:	99 0f       	add	r25, r25
 96c:	99 0f       	add	r25, r25
 96e:	89 0f       	add	r24, r25
 970:	c8 1b       	sub	r28, r24
 972:	d0 e0       	ldi	r29, 0x00	; 0
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 97a:	bc 01       	movw	r22, r24
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 71 06 	call	0xce2	; 0xce2 <__floatunsisf>
 984:	20 e0       	ldi	r18, 0x00	; 0
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	4a ef       	ldi	r20, 0xFA	; 250
 98a:	5e e3       	ldi	r21, 0x3E	; 62
 98c:	0e 94 d7 06 	call	0xdae	; 0xdae <__mulsf3>
 990:	0e 94 42 06 	call	0xc84	; 0xc84 <__fixunssfsi>
 994:	c0 5a       	subi	r28, 0xA0	; 160
 996:	df 4f       	sbci	r29, 0xFF	; 255
 998:	68 83       	st	Y, r22
			c++;
 99a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <c.1873>
 99e:	8f 5f       	subi	r24, 0xFF	; 255
 9a0:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <c.1873>
			Avg_Temp=AVG(Temp_Arr);
 9a4:	80 e6       	ldi	r24, 0x60	; 96
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 1a 01 	call	0x234	; 0x234 <AVG>
 9ac:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Avg_Temp>
			T0_Delay(T_Temp);
 9b0:	64 e6       	ldi	r22, 0x64	; 100
 9b2:	70 e0       	ldi	r23, 0x00	; 0
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 3b 04 	call	0x876	; 0x876 <T0_Delay>
			T0_Start();
 9bc:	0e 94 65 04 	call	0x8ca	; 0x8ca <T0_Start>
		//----------------------
		//---------------------------------------
		
		
		
		T0_G_Val++;
 9c0:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <T0_G_Val>
 9c4:	8f 5f       	subi	r24, 0xFF	; 255
 9c6:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <T0_G_Val>
		count = 0;
 9ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count.1872>
 9ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count.1872+0x1>
 9d2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <count.1872+0x2>
 9d6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <count.1872+0x3>
		TCNT0 = T0_OVF_Init_val;
 9da:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <T0_OVF_Init_val>
 9de:	82 bf       	out	0x32, r24	; 50
	}
	
}
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	bf 91       	pop	r27
 9ea:	af 91       	pop	r26
 9ec:	9f 91       	pop	r25
 9ee:	8f 91       	pop	r24
 9f0:	7f 91       	pop	r23
 9f2:	6f 91       	pop	r22
 9f4:	5f 91       	pop	r21
 9f6:	4f 91       	pop	r20
 9f8:	3f 91       	pop	r19
 9fa:	2f 91       	pop	r18
 9fc:	0f 90       	pop	r0
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	0f 90       	pop	r0
 a02:	1f 90       	pop	r1
 a04:	18 95       	reti

00000a06 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 a06:	1f 92       	push	r1
 a08:	0f 92       	push	r0
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	0f 92       	push	r0
 a0e:	11 24       	eor	r1, r1
 a10:	4f 93       	push	r20
 a12:	5f 93       	push	r21
 a14:	6f 93       	push	r22
 a16:	7f 93       	push	r23
 a18:	8f 93       	push	r24
 a1a:	9f 93       	push	r25
 a1c:	af 93       	push	r26
 a1e:	bf 93       	push	r27
	static Uint32 count = 0;
	count++;
 a20:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <count.1879>
 a24:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <count.1879+0x1>
 a28:	a0 91 81 00 	lds	r26, 0x0081	; 0x800081 <count.1879+0x2>
 a2c:	b0 91 82 00 	lds	r27, 0x0082	; 0x800082 <count.1879+0x3>
 a30:	01 96       	adiw	r24, 0x01	; 1
 a32:	a1 1d       	adc	r26, r1
 a34:	b1 1d       	adc	r27, r1
 a36:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <count.1879>
 a3a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <count.1879+0x1>
 a3e:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <count.1879+0x2>
 a42:	b0 93 82 00 	sts	0x0082, r27	; 0x800082 <count.1879+0x3>
	if (count == T0_OCF_num)
 a46:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <T0_OCF_num>
 a4a:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <T0_OCF_num+0x1>
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	84 17       	cp	r24, r20
 a54:	95 07       	cpc	r25, r21
 a56:	a6 07       	cpc	r26, r22
 a58:	b7 07       	cpc	r27, r23
 a5a:	89 f4       	brne	.+34     	; 0xa7e <__vector_10+0x78>
	{
		// Write your code here
		T0_G_Val++;
 a5c:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <T0_G_Val>
 a60:	8f 5f       	subi	r24, 0xFF	; 255
 a62:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <T0_G_Val>
		
		
		count = 0;
 a66:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <count.1879>
 a6a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <count.1879+0x1>
 a6e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <count.1879+0x2>
 a72:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <count.1879+0x3>
		OCR0 = T0_OCF_Init_val;
 a76:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <T0_OCF_Init_val>
 a7a:	8c bf       	out	0x3c, r24	; 60
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <__vector_10+0x7c>
	}
	else
	OCR0 = 255;
 a7e:	8f ef       	ldi	r24, 0xFF	; 255
 a80:	8c bf       	out	0x3c, r24	; 60
}
 a82:	bf 91       	pop	r27
 a84:	af 91       	pop	r26
 a86:	9f 91       	pop	r25
 a88:	8f 91       	pop	r24
 a8a:	7f 91       	pop	r23
 a8c:	6f 91       	pop	r22
 a8e:	5f 91       	pop	r21
 a90:	4f 91       	pop	r20
 a92:	0f 90       	pop	r0
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	0f 90       	pop	r0
 a98:	1f 90       	pop	r1
 a9a:	18 95       	reti

00000a9c <T2_Init>:

// Timer2 Functions
void T2_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 a9c:	8f b7       	in	r24, 0x3f	; 63
 a9e:	80 68       	ori	r24, 0x80	; 128
 aa0:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	TIMSK = (T2_OVF_INT << 6) | (T2_OCF_INT << 7) | (TIMSK & 0X3F);
 aa2:	89 b7       	in	r24, 0x39	; 57
 aa4:	8f 73       	andi	r24, 0x3F	; 63
 aa6:	80 68       	ori	r24, 0x80	; 128
 aa8:	89 bf       	out	0x39, r24	; 57
	
	// Timer2 Mode
	TCCR2 = (Get_Bit(Timer2_Mode, 0) << 6) | (Get_Bit(Timer2_Mode, 1) << 3) | (TCCR2 & 0XB7);
 aaa:	85 b5       	in	r24, 0x25	; 37
 aac:	87 7b       	andi	r24, 0xB7	; 183
 aae:	88 60       	ori	r24, 0x08	; 8
 ab0:	85 bd       	out	0x25, r24	; 37
 ab2:	08 95       	ret

00000ab4 <T2_Delay>:
}
void T2_Delay(Uint32 delay_ms)
{
 ab4:	0f 93       	push	r16
 ab6:	1f 93       	push	r17
 ab8:	9b 01       	movw	r18, r22
 aba:	ac 01       	movw	r20, r24
	f32 Tick_Time_us = (f32)(Timer2_PreSC) / F_OSC_MHZ;
	Uint32 Tick_num = (delay_ms * 1000)/ Tick_Time_us;
 abc:	a8 ee       	ldi	r26, 0xE8	; 232
 abe:	b3 e0       	ldi	r27, 0x03	; 3
 ac0:	0e 94 7b 07 	call	0xef6	; 0xef6 <__muluhisi3>
 ac4:	0e 94 71 06 	call	0xce2	; 0xce2 <__floatunsisf>
 ac8:	20 e0       	ldi	r18, 0x00	; 0
 aca:	30 e0       	ldi	r19, 0x00	; 0
 acc:	40 e8       	ldi	r20, 0x80	; 128
 ace:	5c e3       	ldi	r21, 0x3C	; 60
 ad0:	0e 94 d7 06 	call	0xdae	; 0xdae <__mulsf3>
 ad4:	0e 94 42 06 	call	0xc84	; 0xc84 <__fixunssfsi>
	T2_OVF_Init_val = 256 - (Tick_num % 256);
	TCNT2 = T2_OVF_Init_val;
	
	#elif Timer2_Mode == T2_CTC

	T2_OCF_num = Tick_num % 256 ? (Tick_num / 256) + 1 : (Tick_num / 256);
 ad8:	66 23       	and	r22, r22
 ada:	39 f0       	breq	.+14     	; 0xaea <T2_Delay+0x36>
 adc:	07 2f       	mov	r16, r23
 ade:	18 2f       	mov	r17, r24
 ae0:	29 2f       	mov	r18, r25
 ae2:	33 27       	eor	r19, r19
 ae4:	0f 5f       	subi	r16, 0xFF	; 255
 ae6:	1f 4f       	sbci	r17, 0xFF	; 255
 ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <T2_Delay+0x3e>
 aea:	07 2f       	mov	r16, r23
 aec:	18 2f       	mov	r17, r24
 aee:	29 2f       	mov	r18, r25
 af0:	33 27       	eor	r19, r19
 af2:	10 93 8c 00 	sts	0x008C, r17	; 0x80008c <T2_OCF_num+0x1>
 af6:	00 93 8b 00 	sts	0x008B, r16	; 0x80008b <T2_OCF_num>
	
	T2_OCF_Init_val = (Tick_num % 256) - 1;
 afa:	61 50       	subi	r22, 0x01	; 1
 afc:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <T2_OCF_Init_val>
	OCR2 = T2_OCF_Init_val;
 b00:	63 bd       	out	0x23, r22	; 35

	#endif
}
 b02:	1f 91       	pop	r17
 b04:	0f 91       	pop	r16
 b06:	08 95       	ret

00000b08 <T2_Start>:
void T2_Start(void)
{
	TCCR2 = Timer2_CLK | (TCCR2 & 0XF8);
 b08:	85 b5       	in	r24, 0x25	; 37
 b0a:	87 60       	ori	r24, 0x07	; 7
 b0c:	85 bd       	out	0x25, r24	; 37
 b0e:	08 95       	ret

00000b10 <T2_Stop>:
}
void T2_Stop(void)
{
	TCCR2 &= 0XF8;		//	   1 1 0 1 | 0 1 0 1
 b10:	85 b5       	in	r24, 0x25	; 37
 b12:	88 7f       	andi	r24, 0xF8	; 248
 b14:	85 bd       	out	0x25, r24	; 37
 b16:	08 95       	ret

00000b18 <__vector_5>:
	//     -----------------
	//     1 1 0 1 | 0 0 0 0
}

ISR(TIMER2_OVF_vect)
{
 b18:	1f 92       	push	r1
 b1a:	0f 92       	push	r0
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	0f 92       	push	r0
 b20:	11 24       	eor	r1, r1
 b22:	2f 93       	push	r18
 b24:	3f 93       	push	r19
 b26:	4f 93       	push	r20
 b28:	5f 93       	push	r21
 b2a:	6f 93       	push	r22
 b2c:	7f 93       	push	r23
 b2e:	8f 93       	push	r24
 b30:	9f 93       	push	r25
 b32:	af 93       	push	r26
 b34:	bf 93       	push	r27
 b36:	ef 93       	push	r30
 b38:	ff 93       	push	r31
	static Uint32 count = 0;
	count++;
 b3a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <count.1899>
 b3e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <count.1899+0x1>
 b42:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <count.1899+0x2>
 b46:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <count.1899+0x3>
 b4a:	01 96       	adiw	r24, 0x01	; 1
 b4c:	a1 1d       	adc	r26, r1
 b4e:	b1 1d       	adc	r27, r1
 b50:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <count.1899>
 b54:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <count.1899+0x1>
 b58:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <count.1899+0x2>
 b5c:	b0 93 7e 00 	sts	0x007E, r27	; 0x80007e <count.1899+0x3>
	if (count == T2_OVF_num)
 b60:	40 91 8d 00 	lds	r20, 0x008D	; 0x80008d <T2_OVF_num>
 b64:	50 91 8e 00 	lds	r21, 0x008E	; 0x80008e <T2_OVF_num+0x1>
 b68:	60 e0       	ldi	r22, 0x00	; 0
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	84 17       	cp	r24, r20
 b6e:	95 07       	cpc	r25, r21
 b70:	a6 07       	cpc	r26, r22
 b72:	b7 07       	cpc	r27, r23
 b74:	59 f5       	brne	.+86     	; 0xbcc <__vector_5+0xb4>
	{
		// Write your code here
		//--------------
		if(state==ON)
 b76:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 b7a:	81 30       	cpi	r24, 0x01	; 1
 b7c:	59 f4       	brne	.+22     	; 0xb94 <__vector_5+0x7c>
		{
			LED0_Toggle();
 b7e:	0e 94 9d 02 	call	0x53a	; 0x53a <LED0_Toggle>

			T2_Delay(T_Blink);
 b82:	64 ef       	ldi	r22, 0xF4	; 244
 b84:	71 e0       	ldi	r23, 0x01	; 1
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 5a 05 	call	0xab4	; 0xab4 <T2_Delay>
			T2_Start();
 b8e:	0e 94 84 05 	call	0xb08	; 0xb08 <T2_Start>
 b92:	0c c0       	rjmp	.+24     	; 0xbac <__vector_5+0x94>
		}
		else if (state==SET)
 b94:	82 30       	cpi	r24, 0x02	; 2
 b96:	51 f4       	brne	.+20     	; 0xbac <__vector_5+0x94>
		{
			S7_Toggle();
 b98:	0e 94 27 04 	call	0x84e	; 0x84e <S7_Toggle>
			T2_Delay(T_Blink);
 b9c:	64 ef       	ldi	r22, 0xF4	; 244
 b9e:	71 e0       	ldi	r23, 0x01	; 1
 ba0:	80 e0       	ldi	r24, 0x00	; 0
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	0e 94 5a 05 	call	0xab4	; 0xab4 <T2_Delay>
			T2_Start();
 ba8:	0e 94 84 05 	call	0xb08	; 0xb08 <T2_Start>
		//--------------
		
		
		
		
		T2_G_Val++;
 bac:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <T2_G_Val>
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <T2_G_Val>
		count = 0;
 bb6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <count.1899>
 bba:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <count.1899+0x1>
 bbe:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <count.1899+0x2>
 bc2:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <count.1899+0x3>
		TCNT2 = T2_OVF_Init_val;
 bc6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <T2_OVF_Init_val>
 bca:	84 bd       	out	0x24, r24	; 36
	}
	
}
 bcc:	ff 91       	pop	r31
 bce:	ef 91       	pop	r30
 bd0:	bf 91       	pop	r27
 bd2:	af 91       	pop	r26
 bd4:	9f 91       	pop	r25
 bd6:	8f 91       	pop	r24
 bd8:	7f 91       	pop	r23
 bda:	6f 91       	pop	r22
 bdc:	5f 91       	pop	r21
 bde:	4f 91       	pop	r20
 be0:	3f 91       	pop	r19
 be2:	2f 91       	pop	r18
 be4:	0f 90       	pop	r0
 be6:	0f be       	out	0x3f, r0	; 63
 be8:	0f 90       	pop	r0
 bea:	1f 90       	pop	r1
 bec:	18 95       	reti

00000bee <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 bee:	1f 92       	push	r1
 bf0:	0f 92       	push	r0
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	0f 92       	push	r0
 bf6:	11 24       	eor	r1, r1
 bf8:	4f 93       	push	r20
 bfa:	5f 93       	push	r21
 bfc:	6f 93       	push	r22
 bfe:	7f 93       	push	r23
 c00:	8f 93       	push	r24
 c02:	9f 93       	push	r25
 c04:	af 93       	push	r26
 c06:	bf 93       	push	r27
	static Uint32 count = 0;
	count++;
 c08:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <count.1905>
 c0c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count.1905+0x1>
 c10:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <count.1905+0x2>
 c14:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <count.1905+0x3>
 c18:	01 96       	adiw	r24, 0x01	; 1
 c1a:	a1 1d       	adc	r26, r1
 c1c:	b1 1d       	adc	r27, r1
 c1e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <count.1905>
 c22:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <count.1905+0x1>
 c26:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <count.1905+0x2>
 c2a:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <count.1905+0x3>
	if (count == T2_OCF_num)
 c2e:	40 91 8b 00 	lds	r20, 0x008B	; 0x80008b <T2_OCF_num>
 c32:	50 91 8c 00 	lds	r21, 0x008C	; 0x80008c <T2_OCF_num+0x1>
 c36:	60 e0       	ldi	r22, 0x00	; 0
 c38:	70 e0       	ldi	r23, 0x00	; 0
 c3a:	84 17       	cp	r24, r20
 c3c:	95 07       	cpc	r25, r21
 c3e:	a6 07       	cpc	r26, r22
 c40:	b7 07       	cpc	r27, r23
 c42:	89 f4       	brne	.+34     	; 0xc66 <__vector_4+0x78>
	{
		// Write your code here
		T2_G_Val++;
 c44:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <T2_G_Val>
 c48:	8f 5f       	subi	r24, 0xFF	; 255
 c4a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <T2_G_Val>
		
		
		count = 0;
 c4e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <count.1905>
 c52:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <count.1905+0x1>
 c56:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <count.1905+0x2>
 c5a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <count.1905+0x3>
		OCR2 = T2_OCF_Init_val;
 c5e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <T2_OCF_Init_val>
 c62:	83 bd       	out	0x23, r24	; 35
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <__vector_4+0x7c>
	}
	else
	OCR2 = 255;
 c66:	8f ef       	ldi	r24, 0xFF	; 255
 c68:	83 bd       	out	0x23, r24	; 35
}
 c6a:	bf 91       	pop	r27
 c6c:	af 91       	pop	r26
 c6e:	9f 91       	pop	r25
 c70:	8f 91       	pop	r24
 c72:	7f 91       	pop	r23
 c74:	6f 91       	pop	r22
 c76:	5f 91       	pop	r21
 c78:	4f 91       	pop	r20
 c7a:	0f 90       	pop	r0
 c7c:	0f be       	out	0x3f, r0	; 63
 c7e:	0f 90       	pop	r0
 c80:	1f 90       	pop	r1
 c82:	18 95       	reti

00000c84 <__fixunssfsi>:
 c84:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_splitA>
 c88:	88 f0       	brcs	.+34     	; 0xcac <__fixunssfsi+0x28>
 c8a:	9f 57       	subi	r25, 0x7F	; 127
 c8c:	98 f0       	brcs	.+38     	; 0xcb4 <__fixunssfsi+0x30>
 c8e:	b9 2f       	mov	r27, r25
 c90:	99 27       	eor	r25, r25
 c92:	b7 51       	subi	r27, 0x17	; 23
 c94:	b0 f0       	brcs	.+44     	; 0xcc2 <__fixunssfsi+0x3e>
 c96:	e1 f0       	breq	.+56     	; 0xcd0 <__fixunssfsi+0x4c>
 c98:	66 0f       	add	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	99 1f       	adc	r25, r25
 ca0:	1a f0       	brmi	.+6      	; 0xca8 <__fixunssfsi+0x24>
 ca2:	ba 95       	dec	r27
 ca4:	c9 f7       	brne	.-14     	; 0xc98 <__fixunssfsi+0x14>
 ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <__fixunssfsi+0x4c>
 ca8:	b1 30       	cpi	r27, 0x01	; 1
 caa:	91 f0       	breq	.+36     	; 0xcd0 <__fixunssfsi+0x4c>
 cac:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_zero>
 cb0:	b1 e0       	ldi	r27, 0x01	; 1
 cb2:	08 95       	ret
 cb4:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_zero>
 cb8:	67 2f       	mov	r22, r23
 cba:	78 2f       	mov	r23, r24
 cbc:	88 27       	eor	r24, r24
 cbe:	b8 5f       	subi	r27, 0xF8	; 248
 cc0:	39 f0       	breq	.+14     	; 0xcd0 <__fixunssfsi+0x4c>
 cc2:	b9 3f       	cpi	r27, 0xF9	; 249
 cc4:	cc f3       	brlt	.-14     	; 0xcb8 <__fixunssfsi+0x34>
 cc6:	86 95       	lsr	r24
 cc8:	77 95       	ror	r23
 cca:	67 95       	ror	r22
 ccc:	b3 95       	inc	r27
 cce:	d9 f7       	brne	.-10     	; 0xcc6 <__fixunssfsi+0x42>
 cd0:	3e f4       	brtc	.+14     	; 0xce0 <__fixunssfsi+0x5c>
 cd2:	90 95       	com	r25
 cd4:	80 95       	com	r24
 cd6:	70 95       	com	r23
 cd8:	61 95       	neg	r22
 cda:	7f 4f       	sbci	r23, 0xFF	; 255
 cdc:	8f 4f       	sbci	r24, 0xFF	; 255
 cde:	9f 4f       	sbci	r25, 0xFF	; 255
 ce0:	08 95       	ret

00000ce2 <__floatunsisf>:
 ce2:	e8 94       	clt
 ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <__floatsisf+0x12>

00000ce6 <__floatsisf>:
 ce6:	97 fb       	bst	r25, 7
 ce8:	3e f4       	brtc	.+14     	; 0xcf8 <__floatsisf+0x12>
 cea:	90 95       	com	r25
 cec:	80 95       	com	r24
 cee:	70 95       	com	r23
 cf0:	61 95       	neg	r22
 cf2:	7f 4f       	sbci	r23, 0xFF	; 255
 cf4:	8f 4f       	sbci	r24, 0xFF	; 255
 cf6:	9f 4f       	sbci	r25, 0xFF	; 255
 cf8:	99 23       	and	r25, r25
 cfa:	a9 f0       	breq	.+42     	; 0xd26 <__floatsisf+0x40>
 cfc:	f9 2f       	mov	r31, r25
 cfe:	96 e9       	ldi	r25, 0x96	; 150
 d00:	bb 27       	eor	r27, r27
 d02:	93 95       	inc	r25
 d04:	f6 95       	lsr	r31
 d06:	87 95       	ror	r24
 d08:	77 95       	ror	r23
 d0a:	67 95       	ror	r22
 d0c:	b7 95       	ror	r27
 d0e:	f1 11       	cpse	r31, r1
 d10:	f8 cf       	rjmp	.-16     	; 0xd02 <__floatsisf+0x1c>
 d12:	fa f4       	brpl	.+62     	; 0xd52 <__floatsisf+0x6c>
 d14:	bb 0f       	add	r27, r27
 d16:	11 f4       	brne	.+4      	; 0xd1c <__floatsisf+0x36>
 d18:	60 ff       	sbrs	r22, 0
 d1a:	1b c0       	rjmp	.+54     	; 0xd52 <__floatsisf+0x6c>
 d1c:	6f 5f       	subi	r22, 0xFF	; 255
 d1e:	7f 4f       	sbci	r23, 0xFF	; 255
 d20:	8f 4f       	sbci	r24, 0xFF	; 255
 d22:	9f 4f       	sbci	r25, 0xFF	; 255
 d24:	16 c0       	rjmp	.+44     	; 0xd52 <__floatsisf+0x6c>
 d26:	88 23       	and	r24, r24
 d28:	11 f0       	breq	.+4      	; 0xd2e <__floatsisf+0x48>
 d2a:	96 e9       	ldi	r25, 0x96	; 150
 d2c:	11 c0       	rjmp	.+34     	; 0xd50 <__floatsisf+0x6a>
 d2e:	77 23       	and	r23, r23
 d30:	21 f0       	breq	.+8      	; 0xd3a <__floatsisf+0x54>
 d32:	9e e8       	ldi	r25, 0x8E	; 142
 d34:	87 2f       	mov	r24, r23
 d36:	76 2f       	mov	r23, r22
 d38:	05 c0       	rjmp	.+10     	; 0xd44 <__floatsisf+0x5e>
 d3a:	66 23       	and	r22, r22
 d3c:	71 f0       	breq	.+28     	; 0xd5a <__floatsisf+0x74>
 d3e:	96 e8       	ldi	r25, 0x86	; 134
 d40:	86 2f       	mov	r24, r22
 d42:	70 e0       	ldi	r23, 0x00	; 0
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	2a f0       	brmi	.+10     	; 0xd52 <__floatsisf+0x6c>
 d48:	9a 95       	dec	r25
 d4a:	66 0f       	add	r22, r22
 d4c:	77 1f       	adc	r23, r23
 d4e:	88 1f       	adc	r24, r24
 d50:	da f7       	brpl	.-10     	; 0xd48 <__floatsisf+0x62>
 d52:	88 0f       	add	r24, r24
 d54:	96 95       	lsr	r25
 d56:	87 95       	ror	r24
 d58:	97 f9       	bld	r25, 7
 d5a:	08 95       	ret

00000d5c <__fp_split3>:
 d5c:	57 fd       	sbrc	r21, 7
 d5e:	90 58       	subi	r25, 0x80	; 128
 d60:	44 0f       	add	r20, r20
 d62:	55 1f       	adc	r21, r21
 d64:	59 f0       	breq	.+22     	; 0xd7c <__fp_splitA+0x10>
 d66:	5f 3f       	cpi	r21, 0xFF	; 255
 d68:	71 f0       	breq	.+28     	; 0xd86 <__fp_splitA+0x1a>
 d6a:	47 95       	ror	r20

00000d6c <__fp_splitA>:
 d6c:	88 0f       	add	r24, r24
 d6e:	97 fb       	bst	r25, 7
 d70:	99 1f       	adc	r25, r25
 d72:	61 f0       	breq	.+24     	; 0xd8c <__fp_splitA+0x20>
 d74:	9f 3f       	cpi	r25, 0xFF	; 255
 d76:	79 f0       	breq	.+30     	; 0xd96 <__fp_splitA+0x2a>
 d78:	87 95       	ror	r24
 d7a:	08 95       	ret
 d7c:	12 16       	cp	r1, r18
 d7e:	13 06       	cpc	r1, r19
 d80:	14 06       	cpc	r1, r20
 d82:	55 1f       	adc	r21, r21
 d84:	f2 cf       	rjmp	.-28     	; 0xd6a <__fp_split3+0xe>
 d86:	46 95       	lsr	r20
 d88:	f1 df       	rcall	.-30     	; 0xd6c <__fp_splitA>
 d8a:	08 c0       	rjmp	.+16     	; 0xd9c <__fp_splitA+0x30>
 d8c:	16 16       	cp	r1, r22
 d8e:	17 06       	cpc	r1, r23
 d90:	18 06       	cpc	r1, r24
 d92:	99 1f       	adc	r25, r25
 d94:	f1 cf       	rjmp	.-30     	; 0xd78 <__fp_splitA+0xc>
 d96:	86 95       	lsr	r24
 d98:	71 05       	cpc	r23, r1
 d9a:	61 05       	cpc	r22, r1
 d9c:	08 94       	sec
 d9e:	08 95       	ret

00000da0 <__fp_zero>:
 da0:	e8 94       	clt

00000da2 <__fp_szero>:
 da2:	bb 27       	eor	r27, r27
 da4:	66 27       	eor	r22, r22
 da6:	77 27       	eor	r23, r23
 da8:	cb 01       	movw	r24, r22
 daa:	97 f9       	bld	r25, 7
 dac:	08 95       	ret

00000dae <__mulsf3>:
 dae:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__mulsf3x>
 db2:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_round>
 db6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_pscA>
 dba:	38 f0       	brcs	.+14     	; 0xdca <__mulsf3+0x1c>
 dbc:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_pscB>
 dc0:	20 f0       	brcs	.+8      	; 0xdca <__mulsf3+0x1c>
 dc2:	95 23       	and	r25, r21
 dc4:	11 f0       	breq	.+4      	; 0xdca <__mulsf3+0x1c>
 dc6:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__fp_inf>
 dca:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_nan>
 dce:	11 24       	eor	r1, r1
 dd0:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>

00000dd4 <__mulsf3x>:
 dd4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_split3>
 dd8:	70 f3       	brcs	.-36     	; 0xdb6 <__mulsf3+0x8>

00000dda <__mulsf3_pse>:
 dda:	95 9f       	mul	r25, r21
 ddc:	c1 f3       	breq	.-16     	; 0xdce <__mulsf3+0x20>
 dde:	95 0f       	add	r25, r21
 de0:	50 e0       	ldi	r21, 0x00	; 0
 de2:	55 1f       	adc	r21, r21
 de4:	62 9f       	mul	r22, r18
 de6:	f0 01       	movw	r30, r0
 de8:	72 9f       	mul	r23, r18
 dea:	bb 27       	eor	r27, r27
 dec:	f0 0d       	add	r31, r0
 dee:	b1 1d       	adc	r27, r1
 df0:	63 9f       	mul	r22, r19
 df2:	aa 27       	eor	r26, r26
 df4:	f0 0d       	add	r31, r0
 df6:	b1 1d       	adc	r27, r1
 df8:	aa 1f       	adc	r26, r26
 dfa:	64 9f       	mul	r22, r20
 dfc:	66 27       	eor	r22, r22
 dfe:	b0 0d       	add	r27, r0
 e00:	a1 1d       	adc	r26, r1
 e02:	66 1f       	adc	r22, r22
 e04:	82 9f       	mul	r24, r18
 e06:	22 27       	eor	r18, r18
 e08:	b0 0d       	add	r27, r0
 e0a:	a1 1d       	adc	r26, r1
 e0c:	62 1f       	adc	r22, r18
 e0e:	73 9f       	mul	r23, r19
 e10:	b0 0d       	add	r27, r0
 e12:	a1 1d       	adc	r26, r1
 e14:	62 1f       	adc	r22, r18
 e16:	83 9f       	mul	r24, r19
 e18:	a0 0d       	add	r26, r0
 e1a:	61 1d       	adc	r22, r1
 e1c:	22 1f       	adc	r18, r18
 e1e:	74 9f       	mul	r23, r20
 e20:	33 27       	eor	r19, r19
 e22:	a0 0d       	add	r26, r0
 e24:	61 1d       	adc	r22, r1
 e26:	23 1f       	adc	r18, r19
 e28:	84 9f       	mul	r24, r20
 e2a:	60 0d       	add	r22, r0
 e2c:	21 1d       	adc	r18, r1
 e2e:	82 2f       	mov	r24, r18
 e30:	76 2f       	mov	r23, r22
 e32:	6a 2f       	mov	r22, r26
 e34:	11 24       	eor	r1, r1
 e36:	9f 57       	subi	r25, 0x7F	; 127
 e38:	50 40       	sbci	r21, 0x00	; 0
 e3a:	9a f0       	brmi	.+38     	; 0xe62 <__mulsf3_pse+0x88>
 e3c:	f1 f0       	breq	.+60     	; 0xe7a <__mulsf3_pse+0xa0>
 e3e:	88 23       	and	r24, r24
 e40:	4a f0       	brmi	.+18     	; 0xe54 <__mulsf3_pse+0x7a>
 e42:	ee 0f       	add	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	bb 1f       	adc	r27, r27
 e48:	66 1f       	adc	r22, r22
 e4a:	77 1f       	adc	r23, r23
 e4c:	88 1f       	adc	r24, r24
 e4e:	91 50       	subi	r25, 0x01	; 1
 e50:	50 40       	sbci	r21, 0x00	; 0
 e52:	a9 f7       	brne	.-22     	; 0xe3e <__mulsf3_pse+0x64>
 e54:	9e 3f       	cpi	r25, 0xFE	; 254
 e56:	51 05       	cpc	r21, r1
 e58:	80 f0       	brcs	.+32     	; 0xe7a <__mulsf3_pse+0xa0>
 e5a:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__fp_inf>
 e5e:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>
 e62:	5f 3f       	cpi	r21, 0xFF	; 255
 e64:	e4 f3       	brlt	.-8      	; 0xe5e <__mulsf3_pse+0x84>
 e66:	98 3e       	cpi	r25, 0xE8	; 232
 e68:	d4 f3       	brlt	.-12     	; 0xe5e <__mulsf3_pse+0x84>
 e6a:	86 95       	lsr	r24
 e6c:	77 95       	ror	r23
 e6e:	67 95       	ror	r22
 e70:	b7 95       	ror	r27
 e72:	f7 95       	ror	r31
 e74:	e7 95       	ror	r30
 e76:	9f 5f       	subi	r25, 0xFF	; 255
 e78:	c1 f7       	brne	.-16     	; 0xe6a <__mulsf3_pse+0x90>
 e7a:	fe 2b       	or	r31, r30
 e7c:	88 0f       	add	r24, r24
 e7e:	91 1d       	adc	r25, r1
 e80:	96 95       	lsr	r25
 e82:	87 95       	ror	r24
 e84:	97 f9       	bld	r25, 7
 e86:	08 95       	ret

00000e88 <__fp_inf>:
 e88:	97 f9       	bld	r25, 7
 e8a:	9f 67       	ori	r25, 0x7F	; 127
 e8c:	80 e8       	ldi	r24, 0x80	; 128
 e8e:	70 e0       	ldi	r23, 0x00	; 0
 e90:	60 e0       	ldi	r22, 0x00	; 0
 e92:	08 95       	ret

00000e94 <__fp_nan>:
 e94:	9f ef       	ldi	r25, 0xFF	; 255
 e96:	80 ec       	ldi	r24, 0xC0	; 192
 e98:	08 95       	ret

00000e9a <__fp_pscA>:
 e9a:	00 24       	eor	r0, r0
 e9c:	0a 94       	dec	r0
 e9e:	16 16       	cp	r1, r22
 ea0:	17 06       	cpc	r1, r23
 ea2:	18 06       	cpc	r1, r24
 ea4:	09 06       	cpc	r0, r25
 ea6:	08 95       	ret

00000ea8 <__fp_pscB>:
 ea8:	00 24       	eor	r0, r0
 eaa:	0a 94       	dec	r0
 eac:	12 16       	cp	r1, r18
 eae:	13 06       	cpc	r1, r19
 eb0:	14 06       	cpc	r1, r20
 eb2:	05 06       	cpc	r0, r21
 eb4:	08 95       	ret

00000eb6 <__fp_round>:
 eb6:	09 2e       	mov	r0, r25
 eb8:	03 94       	inc	r0
 eba:	00 0c       	add	r0, r0
 ebc:	11 f4       	brne	.+4      	; 0xec2 <__fp_round+0xc>
 ebe:	88 23       	and	r24, r24
 ec0:	52 f0       	brmi	.+20     	; 0xed6 <__fp_round+0x20>
 ec2:	bb 0f       	add	r27, r27
 ec4:	40 f4       	brcc	.+16     	; 0xed6 <__fp_round+0x20>
 ec6:	bf 2b       	or	r27, r31
 ec8:	11 f4       	brne	.+4      	; 0xece <__fp_round+0x18>
 eca:	60 ff       	sbrs	r22, 0
 ecc:	04 c0       	rjmp	.+8      	; 0xed6 <__fp_round+0x20>
 ece:	6f 5f       	subi	r22, 0xFF	; 255
 ed0:	7f 4f       	sbci	r23, 0xFF	; 255
 ed2:	8f 4f       	sbci	r24, 0xFF	; 255
 ed4:	9f 4f       	sbci	r25, 0xFF	; 255
 ed6:	08 95       	ret

00000ed8 <__umulhisi3>:
 ed8:	a2 9f       	mul	r26, r18
 eda:	b0 01       	movw	r22, r0
 edc:	b3 9f       	mul	r27, r19
 ede:	c0 01       	movw	r24, r0
 ee0:	a3 9f       	mul	r26, r19
 ee2:	70 0d       	add	r23, r0
 ee4:	81 1d       	adc	r24, r1
 ee6:	11 24       	eor	r1, r1
 ee8:	91 1d       	adc	r25, r1
 eea:	b2 9f       	mul	r27, r18
 eec:	70 0d       	add	r23, r0
 eee:	81 1d       	adc	r24, r1
 ef0:	11 24       	eor	r1, r1
 ef2:	91 1d       	adc	r25, r1
 ef4:	08 95       	ret

00000ef6 <__muluhisi3>:
 ef6:	0e 94 6c 07 	call	0xed8	; 0xed8 <__umulhisi3>
 efa:	a5 9f       	mul	r26, r21
 efc:	90 0d       	add	r25, r0
 efe:	b4 9f       	mul	r27, r20
 f00:	90 0d       	add	r25, r0
 f02:	a4 9f       	mul	r26, r20
 f04:	80 0d       	add	r24, r0
 f06:	91 1d       	adc	r25, r1
 f08:	11 24       	eor	r1, r1
 f0a:	08 95       	ret

00000f0c <_exit>:
 f0c:	f8 94       	cli

00000f0e <__stop_program>:
 f0e:	ff cf       	rjmp	.-2      	; 0xf0e <__stop_program>
