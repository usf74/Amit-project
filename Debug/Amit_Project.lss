
Amit_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000e44  00000ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800076  00800076  00000eee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f44  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c35  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e1  00000000  00000000  00003d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  00004e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070e  00000000  00000000  000054ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1a  00000000  00000000  00005bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00006814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_1>
   8:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_2>
   c:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_3>
  10:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_4>
  14:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_10>
  2c:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f6 01 	call	0x3ec	; 0x3ec <main>
  8a:	0c 94 20 07 	jmp	0xe40	; 0xe40 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
  92:	8f b7       	in	r24, 0x3f	; 63
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8f bf       	out	0x3f, r24	; 63
	
	// Preipheral Enable/ Disable Interrupt
	ADCSRA = (ADC_INT << 3) | (ADCSRA & 0XF7); 
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	86 b9       	out	0x06, r24	; 6
	
	// ADC Voltage Reference / Data Adjust
	ADMUX = (ADC_Volt_Ref << 6) | (ADC_Data_Adjust << 5) | (ADMUX & 0X1F);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 71       	andi	r24, 0x1F	; 31
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	87 b9       	out	0x07, r24	; 7
	
	// ADC Mode / CLK Source
	ADCSRA = (ADC_Mode << 5) | (ADC_CLK_Source) | (ADCSRA & 0XD8);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	87 62       	ori	r24, 0x27	; 39
  aa:	86 b9       	out	0x06, r24	; 6
	
	// ADC Auto Trigger Mode
	SFIOR = (ADC_AT_Mode << 5) | (SFIOR & 0X1F);
  ac:	80 b7       	in	r24, 0x30	; 48
  ae:	8f 71       	andi	r24, 0x1F	; 31
  b0:	80 bf       	out	0x30, r24	; 48
	
	// ADC Enable
	Set_Bit(ADCSRA, 7);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_Read>:
}
Uint16 ADC_Read(Uint8 Channel)
{
	Uint16 Value;
	// ADC Select Channel
	ADMUX = Channel | (ADMUX & 0XF8);
  ba:	97 b1       	in	r25, 0x07	; 7
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	89 2b       	or	r24, r25
  c0:	87 b9       	out	0x07, r24	; 7
	
	// ADC Start of Conversion
	Set_Bit(ADCSRA, 6);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	86 b9       	out	0x06, r24	; 6
	while(!Get_Bit(ADCSRA, 4));
  c8:	34 9b       	sbis	0x06, 4	; 6
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <ADC_Read+0xe>
	
	Value = ADCR;
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	95 b1       	in	r25, 0x05	; 5
	
	return Value;
  d0:	08 95       	ret

000000d2 <App_Init>:
    T0_Start();

    T2_Delay(T_Blink);
    T2_Start();
    while(state==SET);
}
  d2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <T0_Init>
  d6:	0e 94 ca 04 	call	0x994	; 0x994 <T2_Init>
  da:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
  de:	0e 94 98 02 	call	0x530	; 0x530 <Relay1_Init>
  e2:	0e 94 92 02 	call	0x524	; 0x524 <Relay0_Init>
  e6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LED0_Init>
  ea:	0e 94 bc 01 	call	0x378	; 0x378 <EXT0_INT_Init>
  ee:	0e 94 cb 01 	call	0x396	; 0x396 <EXT1_INT_Init>
  f2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <EXT2_INT_Init>
  f6:	0e 94 9e 02 	call	0x53c	; 0x53c <S7_Init>
  fa:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <Set_Temp>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	95 e0       	ldi	r25, 0x05	; 5
 102:	0e 94 b0 01 	call	0x360	; 0x360 <EEPROM_WriteByte>
 106:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
 10a:	08 95       	ret

0000010c <AVG>:
Uint8 AVG(Uint8 *Data)
{
 10c:	ac 01       	movw	r20, r24
    Uint8 s=0;
    for(Uint8 i=0;i<10;i++)
 10e:	90 e0       	ldi	r25, 0x00	; 0
    T2_Start();
    while(state==SET);
}
Uint8 AVG(Uint8 *Data)
{
    Uint8 s=0;
 110:	20 e0       	ldi	r18, 0x00	; 0
    for(Uint8 i=0;i<10;i++)
 112:	06 c0       	rjmp	.+12     	; 0x120 <AVG+0x14>
    {
        s+=Data[i];
 114:	fa 01       	movw	r30, r20
 116:	e9 0f       	add	r30, r25
 118:	f1 1d       	adc	r31, r1
 11a:	30 81       	ld	r19, Z
 11c:	23 0f       	add	r18, r19
    while(state==SET);
}
Uint8 AVG(Uint8 *Data)
{
    Uint8 s=0;
    for(Uint8 i=0;i<10;i++)
 11e:	9f 5f       	subi	r25, 0xFF	; 255
 120:	9a 30       	cpi	r25, 0x0A	; 10
 122:	c0 f3       	brcs	.-16     	; 0x114 <AVG+0x8>
    {
        s+=Data[i];
    }
    return s/10;
 124:	8d ec       	ldi	r24, 0xCD	; 205
 126:	28 9f       	mul	r18, r24
 128:	81 2d       	mov	r24, r1
 12a:	11 24       	eor	r1, r1
 12c:	86 95       	lsr	r24
 12e:	86 95       	lsr	r24
 130:	86 95       	lsr	r24
 132:	08 95       	ret

00000134 <DIO_SetPin_Dir>:

#include "DIO.h"

void DIO_SetPin_Dir(Uint8 port, Uint8 pin, Uint8 dir)
{
	switch (dir)
 134:	44 23       	and	r20, r20
 136:	19 f0       	breq	.+6      	; 0x13e <DIO_SetPin_Dir+0xa>
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	c9 f1       	breq	.+114    	; 0x1ae <DIO_SetPin_Dir+0x7a>
 13c:	08 95       	ret
	{
		case DIO_PIN_IN:
		switch(port)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	91 f0       	breq	.+36     	; 0x166 <DIO_SetPin_Dir+0x32>
 142:	28 f0       	brcs	.+10     	; 0x14e <DIO_SetPin_Dir+0x1a>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	d9 f0       	breq	.+54     	; 0x17e <DIO_SetPin_Dir+0x4a>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	29 f1       	breq	.+74     	; 0x196 <DIO_SetPin_Dir+0x62>
 14c:	08 95       	ret
		{
			case DIO_PORTA:
			Clear_Bit(DDRA, pin);
 14e:	2a b3       	in	r18, 0x1a	; 26
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPin_Dir+0x26>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPin_Dir+0x22>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	8a bb       	out	0x1a, r24	; 26
			break;
 164:	08 95       	ret
			
			case DIO_PORTB:
			Clear_Bit(DDRB, pin);
 166:	27 b3       	in	r18, 0x17	; 23
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPin_Dir+0x3e>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPin_Dir+0x3a>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	87 bb       	out	0x17, r24	; 23
			break;
 17c:	08 95       	ret
			
			case DIO_PORTC:
			Clear_Bit(DDRC, pin);
 17e:	24 b3       	in	r18, 0x14	; 20
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPin_Dir+0x56>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPin_Dir+0x52>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	84 bb       	out	0x14, r24	; 20
			break;
 194:	08 95       	ret
			
			case DIO_PORTD:
			Clear_Bit(DDRD, pin);
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPin_Dir+0x6e>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPin_Dir+0x6a>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	81 bb       	out	0x11, r24	; 17
			break;
 1ac:	08 95       	ret
			break;	
		}
		break;
		
		case DIO_PIN_OUT:
		switch(port)
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	89 f0       	breq	.+34     	; 0x1d4 <DIO_SetPin_Dir+0xa0>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <DIO_SetPin_Dir+0x8a>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	c9 f0       	breq	.+50     	; 0x1ea <DIO_SetPin_Dir+0xb6>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	11 f1       	breq	.+68     	; 0x200 <DIO_SetPin_Dir+0xcc>
 1bc:	08 95       	ret
		{
			case DIO_PORTA:
			Set_Bit(DDRA, pin);
 1be:	2a b3       	in	r18, 0x1a	; 26
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPin_Dir+0x96>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPin_Dir+0x92>
 1ce:	82 2b       	or	r24, r18
 1d0:	8a bb       	out	0x1a, r24	; 26
			break;
 1d2:	08 95       	ret
			
			case DIO_PORTB:
			Set_Bit(DDRB, pin);
 1d4:	27 b3       	in	r18, 0x17	; 23
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_SetPin_Dir+0xac>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_SetPin_Dir+0xa8>
 1e4:	82 2b       	or	r24, r18
 1e6:	87 bb       	out	0x17, r24	; 23
			break;
 1e8:	08 95       	ret
			
			case DIO_PORTC:
			Set_Bit(DDRC, pin);
 1ea:	24 b3       	in	r18, 0x14	; 20
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPin_Dir+0xc2>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SetPin_Dir+0xbe>
 1fa:	82 2b       	or	r24, r18
 1fc:	84 bb       	out	0x14, r24	; 20
			break;
 1fe:	08 95       	ret
			
			case DIO_PORTD:
			Set_Bit(DDRD, pin);
 200:	21 b3       	in	r18, 0x11	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPin_Dir+0xd8>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPin_Dir+0xd4>
 210:	82 2b       	or	r24, r18
 212:	81 bb       	out	0x11, r24	; 17
 214:	08 95       	ret

00000216 <DIO_SetPin_Val>:
	}
}

void DIO_SetPin_Val(Uint8 port, Uint8 pin, Uint8 val)
{
	switch (val)
 216:	44 23       	and	r20, r20
 218:	19 f0       	breq	.+6      	; 0x220 <DIO_SetPin_Val+0xa>
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	c9 f1       	breq	.+114    	; 0x290 <DIO_SetPin_Val+0x7a>
 21e:	08 95       	ret
	{
		case DIO_PIN_OFF:
		switch(port)
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 f0       	breq	.+36     	; 0x248 <DIO_SetPin_Val+0x32>
 224:	28 f0       	brcs	.+10     	; 0x230 <DIO_SetPin_Val+0x1a>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	d9 f0       	breq	.+54     	; 0x260 <DIO_SetPin_Val+0x4a>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	29 f1       	breq	.+74     	; 0x278 <DIO_SetPin_Val+0x62>
 22e:	08 95       	ret
		{
			case DIO_PORTA:
			Clear_Bit(PORTA, pin);
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPin_Val+0x26>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPin_Val+0x22>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	8b bb       	out	0x1b, r24	; 27
			break;
 246:	08 95       	ret
			
			case DIO_PORTB:
			Clear_Bit(PORTB, pin);
 248:	28 b3       	in	r18, 0x18	; 24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_SetPin_Val+0x3e>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_SetPin_Val+0x3a>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	88 bb       	out	0x18, r24	; 24
			break;
 25e:	08 95       	ret
			
			case DIO_PORTC:
			Clear_Bit(PORTC, pin);
 260:	25 b3       	in	r18, 0x15	; 21
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_SetPin_Val+0x56>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_SetPin_Val+0x52>
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	85 bb       	out	0x15, r24	; 21
			break;
 276:	08 95       	ret
			
			case DIO_PORTD:
			Clear_Bit(PORTD, pin);
 278:	22 b3       	in	r18, 0x12	; 18
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_SetPin_Val+0x6e>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_SetPin_Val+0x6a>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	82 bb       	out	0x12, r24	; 18
			break;
 28e:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_ON:
		switch(port)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	89 f0       	breq	.+34     	; 0x2b6 <DIO_SetPin_Val+0xa0>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <DIO_SetPin_Val+0x8a>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	c9 f0       	breq	.+50     	; 0x2cc <DIO_SetPin_Val+0xb6>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	11 f1       	breq	.+68     	; 0x2e2 <DIO_SetPin_Val+0xcc>
 29e:	08 95       	ret
		{
			case DIO_PORTA:
			Set_Bit(PORTA, pin);
 2a0:	2b b3       	in	r18, 0x1b	; 27
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_SetPin_Val+0x96>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_SetPin_Val+0x92>
 2b0:	82 2b       	or	r24, r18
 2b2:	8b bb       	out	0x1b, r24	; 27
			break;
 2b4:	08 95       	ret
			
			case DIO_PORTB:
			Set_Bit(PORTB, pin);
 2b6:	28 b3       	in	r18, 0x18	; 24
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_SetPin_Val+0xac>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_SetPin_Val+0xa8>
 2c6:	82 2b       	or	r24, r18
 2c8:	88 bb       	out	0x18, r24	; 24
			break;
 2ca:	08 95       	ret
			
			case DIO_PORTC:
			Set_Bit(PORTC, pin);
 2cc:	25 b3       	in	r18, 0x15	; 21
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_SetPin_Val+0xc2>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_SetPin_Val+0xbe>
 2dc:	82 2b       	or	r24, r18
 2de:	85 bb       	out	0x15, r24	; 21
			break;
 2e0:	08 95       	ret
			
			case DIO_PORTD:
			Set_Bit(PORTD, pin);
 2e2:	22 b3       	in	r18, 0x12	; 18
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_SetPin_Val+0xd8>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_SetPin_Val+0xd4>
 2f2:	82 2b       	or	r24, r18
 2f4:	82 bb       	out	0x12, r24	; 18
 2f6:	08 95       	ret

000002f8 <DIO_TogglePin>:
	}		
}

void DIO_TogglePin(Uint8 port, Uint8 pin)
{
	switch(port)
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	89 f0       	breq	.+34     	; 0x31e <DIO_TogglePin+0x26>
 2fc:	28 f0       	brcs	.+10     	; 0x308 <DIO_TogglePin+0x10>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	c9 f0       	breq	.+50     	; 0x334 <DIO_TogglePin+0x3c>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	11 f1       	breq	.+68     	; 0x34a <DIO_TogglePin+0x52>
 306:	08 95       	ret
	{
		case DIO_PORTA:
		Toggle_Bit(PORTA, pin);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_TogglePin+0x1c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_TogglePin+0x18>
 318:	82 27       	eor	r24, r18
 31a:	8b bb       	out	0x1b, r24	; 27
		break;
 31c:	08 95       	ret
		
		case DIO_PORTB:
		Toggle_Bit(PORTB, pin);
 31e:	28 b3       	in	r18, 0x18	; 24
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_TogglePin+0x32>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_TogglePin+0x2e>
 32e:	82 27       	eor	r24, r18
 330:	88 bb       	out	0x18, r24	; 24
		break;
 332:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_Bit(PORTC, pin);
 334:	25 b3       	in	r18, 0x15	; 21
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_TogglePin+0x48>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_TogglePin+0x44>
 344:	82 27       	eor	r24, r18
 346:	85 bb       	out	0x15, r24	; 21
		break;
 348:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_Bit(PORTD, pin);
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_TogglePin+0x5e>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_TogglePin+0x5a>
 35a:	82 27       	eor	r24, r18
 35c:	82 bb       	out	0x12, r24	; 18
 35e:	08 95       	ret

00000360 <EEPROM_WriteByte>:
    EECR |= EEPROM_INT<<EERIE;
}

void EEPROM_WriteByte(Uint16 Addr , Uint8 Data)
{
    while (EECR & 1<<EEWE);    // To Await previous write operation finish
 360:	e1 99       	sbic	0x1c, 1	; 28
 362:	fe cf       	rjmp	.-4      	; 0x360 <EEPROM_WriteByte>
    // Write data and address registers
    EEDR=Data;
 364:	6d bb       	out	0x1d, r22	; 29
    EARL=(Uint8)Addr;
 366:	8e bb       	out	0x1e, r24	; 30
    EARH=(Uint8)(Addr>>8);
 368:	9f bb       	out	0x1f, r25	; 31
    //EEAR=addr;
    // Start Write
    EECR |= (1<<EEMWE);
 36a:	8c b3       	in	r24, 0x1c	; 28
 36c:	84 60       	ori	r24, 0x04	; 4
 36e:	8c bb       	out	0x1c, r24	; 28
    EECR |= (1<<EEWE);
 370:	8c b3       	in	r24, 0x1c	; 28
 372:	82 60       	ori	r24, 0x02	; 2
 374:	8c bb       	out	0x1c, r24	; 28
 376:	08 95       	ret

00000378 <EXT0_INT_Init>:

// EXT INT Functions
void EXT0_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 378:	8f b7       	in	r24, 0x3f	; 63
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT0_INT << 6) | (GICR & 0XBF);
 37e:	8b b7       	in	r24, 0x3b	; 59
 380:	80 64       	ori	r24, 0x40	; 64
 382:	8b bf       	out	0x3b, r24	; 59
	
	// EXT0 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, DIO_PIN_2, DIO_PIN_IN);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
	
	// EXT0 INT Trigger
	MCUCR = EXT0_INT_Trigger | (MCUCR & 0XFC);
 38e:	85 b7       	in	r24, 0x35	; 53
 390:	83 60       	ori	r24, 0x03	; 3
 392:	85 bf       	out	0x35, r24	; 53
 394:	08 95       	ret

00000396 <EXT1_INT_Init>:
}

void EXT1_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 396:	8f b7       	in	r24, 0x3f	; 63
 398:	80 68       	ori	r24, 0x80	; 128
 39a:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT1_INT << 7) | (GICR & 0X7F);
 39c:	8b b7       	in	r24, 0x3b	; 59
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	8b bf       	out	0x3b, r24	; 59
	
	// EXT1 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, DIO_PIN_3, DIO_PIN_IN);
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	63 e0       	ldi	r22, 0x03	; 3
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
	
	// EXT1 INT Trigger
	MCUCR = EXT1_INT_Trigger | (MCUCR & 0XF3);
 3ac:	85 b7       	in	r24, 0x35	; 53
 3ae:	80 7f       	andi	r24, 0xF0	; 240
 3b0:	83 60       	ori	r24, 0x03	; 3
 3b2:	85 bf       	out	0x35, r24	; 53
 3b4:	08 95       	ret

000003b6 <EXT2_INT_Init>:
}

void EXT2_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 3b6:	8f b7       	in	r24, 0x3f	; 63
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT2_INT << 5) | (GICR & 0XDF);
 3bc:	8b b7       	in	r24, 0x3b	; 59
 3be:	80 62       	ori	r24, 0x20	; 32
 3c0:	8b bf       	out	0x3b, r24	; 59
	
	// EXT2 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTB, DIO_PIN_2, DIO_PIN_IN);
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
	
	// EXT2 INT Trigger
	MCUCSR = EXT2_INT_Trigger | (MCUCSR & 0XBF);
 3cc:	84 b7       	in	r24, 0x34	; 52
 3ce:	8e 7b       	andi	r24, 0xBE	; 190
 3d0:	81 60       	ori	r24, 0x01	; 1
 3d2:	84 bf       	out	0x34, r24	; 52
 3d4:	08 95       	ret

000003d6 <LED0_Init>:
{
	DIO_SetPin_Val(LED0_Port, LED0_PIN, DIO_PIN_ON);
}
void LED0_OFF(void)
{
	DIO_SetPin_Val(LED0_Port, LED0_PIN, DIO_PIN_OFF);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 3e0:	08 95       	ret

000003e2 <LED0_Toggle>:
}
void LED0_Toggle(void)
{
	DIO_TogglePin(LED0_Port, LED0_PIN);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_TogglePin>
 3ea:	08 95       	ret

000003ec <main>:
Uint8 Temp_Arr[10]={60,60,60,60,60,60,60,60,60,60};


int main(void)
{
	App_Init();
 3ec:	0e 94 69 00 	call	0xd2	; 0xd2 <App_Init>
	state=ON;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	T0_Init();
 3f6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <T0_Init>
	Temp_Sensor_Init();
 3fa:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>

	
	while(1)
	{

		S7_Display(Temp_Sensor_Read());
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 404:	bc 01       	movw	r22, r24
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__floatunsisf>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	4a ef       	ldi	r20, 0xFA	; 250
 414:	5e e3       	ldi	r21, 0x3E	; 62
 416:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__mulsf3>
 41a:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fixunssfsi>
 41e:	86 2f       	mov	r24, r22
 420:	0e 94 03 03 	call	0x606	; 0x606 <S7_Display>
 424:	ec cf       	rjmp	.-40     	; 0x3fe <main+0x12>

00000426 <__vector_1>:
	}
}

ISR(INT0_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
	state= !state;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <__data_end>
 43a:	91 11       	cpse	r25, r1
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
}
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <__vector_2>:

ISR(INT1_vect)
{
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	2f 93       	push	r18
 45c:	3f 93       	push	r19
 45e:	4f 93       	push	r20
 460:	5f 93       	push	r21
 462:	6f 93       	push	r22
 464:	7f 93       	push	r23
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	af 93       	push	r26
 46c:	bf 93       	push	r27
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
	state=SET;
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	Set_Temp += 5;
 478:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Set_Temp>
 47c:	8b 5f       	subi	r24, 0xFB	; 251
 47e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>
	if (Set_Temp>MAX_TEMP)
 482:	8c 34       	cpi	r24, 0x4C	; 76
 484:	18 f0       	brcs	.+6      	; 0x48c <__vector_2+0x3c>
	{
		Set_Temp=MAX_TEMP;
 486:	8b e4       	ldi	r24, 0x4B	; 75
 488:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>
	}
	EEPROM_WriteByte(Addr,Set_Temp);
 48c:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <Set_Temp>
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	95 e0       	ldi	r25, 0x05	; 5
 494:	0e 94 b0 01 	call	0x360	; 0x360 <EEPROM_WriteByte>
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__vector_3>:

ISR(INT2_vect)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	4f 93       	push	r20
 4ca:	5f 93       	push	r21
 4cc:	6f 93       	push	r22
 4ce:	7f 93       	push	r23
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
	state=SET;
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	Set_Temp -= 5;
 4e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Set_Temp>
 4e6:	85 50       	subi	r24, 0x05	; 5
 4e8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>
	if (Set_Temp<MIN_TEMP)
 4ec:	83 32       	cpi	r24, 0x23	; 35
 4ee:	18 f4       	brcc	.+6      	; 0x4f6 <__vector_3+0x3c>
	{
		Set_Temp=MIN_TEMP;
 4f0:	83 e2       	ldi	r24, 0x23	; 35
 4f2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Set_Temp>
	}
	EEPROM_WriteByte(Addr,Set_Temp);
 4f6:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <Set_Temp>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	95 e0       	ldi	r25, 0x05	; 5
 4fe:	0e 94 b0 01 	call	0x360	; 0x360 <EEPROM_WriteByte>
}
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <Relay0_Init>:
{
	DIO_SetPin_Val(Relay0_Port, Relay0_PIN, DIO_PIN_OFF);
}
void Relay0_Toggle(void)
{
	DIO_TogglePin(Relay0_Port, Relay0_PIN);
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	65 e0       	ldi	r22, 0x05	; 5
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 52e:	08 95       	ret

00000530 <Relay1_Init>:
}
//Relay1 Functions
void Relay1_Init(void)
{
	DIO_SetPin_Dir(Relay1_Port, Relay1_PIN, DIO_PIN_OUT);
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	64 e0       	ldi	r22, 0x04	; 4
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 53a:	08 95       	ret

0000053c <S7_Init>:
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_ON);
}
void S7_Turn_ON()
{
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_OFF);
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_OFF);
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	63 e0       	ldi	r22, 0x03	; 3
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 564:	41 e0       	ldi	r20, 0x01	; 1
 566:	64 e0       	ldi	r22, 0x04	; 4
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	65 e0       	ldi	r22, 0x05	; 5
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 578:	41 e0       	ldi	r20, 0x01	; 1
 57a:	66 e0       	ldi	r22, 0x06	; 6
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 582:	41 e0       	ldi	r20, 0x01	; 1
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	83 e0       	ldi	r24, 0x03	; 3
 592:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	63 e0       	ldi	r22, 0x03	; 3
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	82 e0       	ldi	r24, 0x02	; 2
 5ba:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	63 e0       	ldi	r22, 0x03	; 3
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	64 e0       	ldi	r22, 0x04	; 4
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 5d2:	41 e0       	ldi	r20, 0x01	; 1
 5d4:	65 e0       	ldi	r22, 0x05	; 5
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 5dc:	41 e0       	ldi	r20, 0x01	; 1
 5de:	66 e0       	ldi	r22, 0x06	; 6
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPin_Dir>
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	83 e0       	ldi	r24, 0x03	; 3
 5ec:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 5fa:	41 e0       	ldi	r20, 0x01	; 1
 5fc:	63 e0       	ldi	r22, 0x03	; 3
 5fe:	83 e0       	ldi	r24, 0x03	; 3
 600:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 604:	08 95       	ret

00000606 <S7_Display>:
 606:	cf 93       	push	r28
 608:	84 36       	cpi	r24, 0x64	; 100
 60a:	08 f0       	brcs	.+2      	; 0x60e <S7_Display+0x8>
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	ed ec       	ldi	r30, 0xCD	; 205
 610:	8e 9f       	mul	r24, r30
 612:	e1 2d       	mov	r30, r1
 614:	11 24       	eor	r1, r1
 616:	9e 2f       	mov	r25, r30
 618:	96 95       	lsr	r25
 61a:	96 95       	lsr	r25
 61c:	96 95       	lsr	r25
 61e:	99 0f       	add	r25, r25
 620:	29 2f       	mov	r18, r25
 622:	22 0f       	add	r18, r18
 624:	22 0f       	add	r18, r18
 626:	92 0f       	add	r25, r18
 628:	89 1b       	sub	r24, r25
 62a:	ce 2f       	mov	r28, r30
 62c:	c6 95       	lsr	r28
 62e:	c6 95       	lsr	r28
 630:	c6 95       	lsr	r28
 632:	e8 2f       	mov	r30, r24
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	e4 59       	subi	r30, 0x94	; 148
 638:	ff 4f       	sbci	r31, 0xFF	; 255
 63a:	80 81       	ld	r24, Z
 63c:	85 bb       	out	0x15, r24	; 21
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	83 e0       	ldi	r24, 0x03	; 3
 644:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	83 e0       	ldi	r24, 0x03	; 3
 64e:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 652:	8f e1       	ldi	r24, 0x1F	; 31
 654:	9e e4       	ldi	r25, 0x4E	; 78
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <S7_Display+0x50>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <S7_Display+0x56>
 65c:	00 00       	nop
 65e:	ec 2f       	mov	r30, r28
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	e4 59       	subi	r30, 0x94	; 148
 664:	ff 4f       	sbci	r31, 0xFF	; 255
 666:	80 81       	ld	r24, Z
 668:	85 bb       	out	0x15, r24	; 21
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	83 e0       	ldi	r24, 0x03	; 3
 670:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	83 e0       	ldi	r24, 0x03	; 3
 67a:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_SetPin_Val>
 67e:	8f e1       	ldi	r24, 0x1F	; 31
 680:	9e e4       	ldi	r25, 0x4E	; 78
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <S7_Display+0x7c>
 686:	00 c0       	rjmp	.+0      	; 0x688 <S7_Display+0x82>
 688:	00 00       	nop
 68a:	cf 91       	pop	r28
 68c:	08 95       	ret

0000068e <S7_Toggle>:
}
void S7_Toggle()
{
	DIO_TogglePin(S7_Control_Port, S7_E1_PIN);
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	83 e0       	ldi	r24, 0x03	; 3
 692:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_TogglePin>
	DIO_TogglePin(S7_Control_Port, S7_E2_PIN);
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	83 e0       	ldi	r24, 0x03	; 3
 69a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_TogglePin>
 69e:	08 95       	ret

000006a0 <T0_Init>:
{
	TCCR2 = Timer2_CLK | (TCCR2 & 0XF8);
}
void T2_Stop(void)
{
	TCCR2 &= 0XF8;		//	   1 1 0 1 | 0 1 0 1
 6a0:	8f b7       	in	r24, 0x3f	; 63
 6a2:	80 68       	ori	r24, 0x80	; 128
 6a4:	8f bf       	out	0x3f, r24	; 63
 6a6:	89 b7       	in	r24, 0x39	; 57
 6a8:	8c 7f       	andi	r24, 0xFC	; 252
 6aa:	81 60       	ori	r24, 0x01	; 1
 6ac:	89 bf       	out	0x39, r24	; 57
 6ae:	83 b7       	in	r24, 0x33	; 51
 6b0:	87 7b       	andi	r24, 0xB7	; 183
 6b2:	83 bf       	out	0x33, r24	; 51
 6b4:	08 95       	ret

000006b6 <T0_Delay>:
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	9b 01       	movw	r18, r22
 6bc:	ac 01       	movw	r20, r24
 6be:	a8 ee       	ldi	r26, 0xE8	; 232
 6c0:	b3 e0       	ldi	r27, 0x03	; 3
 6c2:	0e 94 06 07 	call	0xe0c	; 0xe0c <__muluhisi3>
 6c6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__floatunsisf>
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	40 e8       	ldi	r20, 0x80	; 128
 6d0:	5c e3       	ldi	r21, 0x3C	; 60
 6d2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__mulsf3>
 6d6:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fixunssfsi>
 6da:	66 23       	and	r22, r22
 6dc:	39 f0       	breq	.+14     	; 0x6ec <T0_Delay+0x36>
 6de:	07 2f       	mov	r16, r23
 6e0:	18 2f       	mov	r17, r24
 6e2:	29 2f       	mov	r18, r25
 6e4:	33 27       	eor	r19, r19
 6e6:	0f 5f       	subi	r16, 0xFF	; 255
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <T0_Delay+0x3e>
 6ec:	07 2f       	mov	r16, r23
 6ee:	18 2f       	mov	r17, r24
 6f0:	29 2f       	mov	r18, r25
 6f2:	33 27       	eor	r19, r19
 6f4:	10 93 94 00 	sts	0x0094, r17	; 0x800094 <T0_OVF_num+0x1>
 6f8:	00 93 93 00 	sts	0x0093, r16	; 0x800093 <T0_OVF_num>
 6fc:	61 95       	neg	r22
 6fe:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <T0_OVF_Init_val>
 702:	62 bf       	out	0x32, r22	; 50
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	08 95       	ret

0000070a <T0_Start>:
 70a:	83 b7       	in	r24, 0x33	; 51
 70c:	88 7f       	andi	r24, 0xF8	; 248
 70e:	85 60       	ori	r24, 0x05	; 5
 710:	83 bf       	out	0x33, r24	; 51
 712:	08 95       	ret

00000714 <__vector_11>:
 714:	1f 92       	push	r1
 716:	0f 92       	push	r0
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	0f 92       	push	r0
 71c:	11 24       	eor	r1, r1
 71e:	2f 93       	push	r18
 720:	3f 93       	push	r19
 722:	4f 93       	push	r20
 724:	5f 93       	push	r21
 726:	6f 93       	push	r22
 728:	7f 93       	push	r23
 72a:	8f 93       	push	r24
 72c:	9f 93       	push	r25
 72e:	af 93       	push	r26
 730:	bf 93       	push	r27
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	ef 93       	push	r30
 738:	ff 93       	push	r31
 73a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <count.1873>
 73e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <count.1873+0x1>
 742:	a0 91 85 00 	lds	r26, 0x0085	; 0x800085 <count.1873+0x2>
 746:	b0 91 86 00 	lds	r27, 0x0086	; 0x800086 <count.1873+0x3>
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	a1 1d       	adc	r26, r1
 74e:	b1 1d       	adc	r27, r1
 750:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <count.1873>
 754:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <count.1873+0x1>
 758:	a0 93 85 00 	sts	0x0085, r26	; 0x800085 <count.1873+0x2>
 75c:	b0 93 86 00 	sts	0x0086, r27	; 0x800086 <count.1873+0x3>
 760:	40 91 93 00 	lds	r20, 0x0093	; 0x800093 <T0_OVF_num>
 764:	50 91 94 00 	lds	r21, 0x0094	; 0x800094 <T0_OVF_num+0x1>
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	84 17       	cp	r24, r20
 76e:	95 07       	cpc	r25, r21
 770:	a6 07       	cpc	r26, r22
 772:	b7 07       	cpc	r27, r23
 774:	09 f0       	breq	.+2      	; 0x778 <__vector_11+0x64>
 776:	58 c0       	rjmp	.+176    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 778:	85 e4       	ldi	r24, 0x45	; 69
 77a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Avg_Temp>
 77e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 782:	82 30       	cpi	r24, 0x02	; 2
 784:	21 f4       	brne	.+8      	; 0x78e <__vector_11+0x7a>
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 78c:	3d c0       	rjmp	.+122    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	d9 f5       	brne	.+118    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 792:	c0 91 95 00 	lds	r28, 0x0095	; 0x800095 <c>
 796:	8d ec       	ldi	r24, 0xCD	; 205
 798:	c8 9f       	mul	r28, r24
 79a:	81 2d       	mov	r24, r1
 79c:	11 24       	eor	r1, r1
 79e:	86 95       	lsr	r24
 7a0:	86 95       	lsr	r24
 7a2:	86 95       	lsr	r24
 7a4:	88 0f       	add	r24, r24
 7a6:	98 2f       	mov	r25, r24
 7a8:	99 0f       	add	r25, r25
 7aa:	99 0f       	add	r25, r25
 7ac:	89 0f       	add	r24, r25
 7ae:	c8 1b       	sub	r28, r24
 7b0:	d0 e0       	ldi	r29, 0x00	; 0
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 7b8:	bc 01       	movw	r22, r24
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__floatunsisf>
 7c2:	20 e0       	ldi	r18, 0x00	; 0
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	4a ef       	ldi	r20, 0xFA	; 250
 7c8:	5e e3       	ldi	r21, 0x3E	; 62
 7ca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__mulsf3>
 7ce:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fixunssfsi>
 7d2:	c0 5a       	subi	r28, 0xA0	; 160
 7d4:	df 4f       	sbci	r29, 0xFF	; 255
 7d6:	68 83       	st	Y, r22
 7d8:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <c>
 7dc:	8f 5f       	subi	r24, 0xFF	; 255
 7de:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <c>
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 7e8:	96 95       	lsr	r25
 7ea:	96 95       	lsr	r25
 7ec:	89 2f       	mov	r24, r25
 7ee:	88 0f       	add	r24, r24
 7f0:	88 0f       	add	r24, r24
 7f2:	98 0f       	add	r25, r24
 7f4:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Avg_Temp>
 7f8:	64 e6       	ldi	r22, 0x64	; 100
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <T0_Delay>
 804:	0e 94 85 03 	call	0x70a	; 0x70a <T0_Start>
 808:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <T0_G_Val>
 80c:	8f 5f       	subi	r24, 0xFF	; 255
 80e:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <T0_G_Val>
 812:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <count.1873>
 816:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count.1873+0x1>
 81a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count.1873+0x2>
 81e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <count.1873+0x3>
 822:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <T0_OVF_Init_val>
 826:	82 bf       	out	0x32, r24	; 50
 828:	ff 91       	pop	r31
 82a:	ef 91       	pop	r30
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	bf 91       	pop	r27
 832:	af 91       	pop	r26
 834:	9f 91       	pop	r25
 836:	8f 91       	pop	r24
 838:	7f 91       	pop	r23
 83a:	6f 91       	pop	r22
 83c:	5f 91       	pop	r21
 83e:	4f 91       	pop	r20
 840:	3f 91       	pop	r19
 842:	2f 91       	pop	r18
 844:	0f 90       	pop	r0
 846:	0f be       	out	0x3f, r0	; 63
 848:	0f 90       	pop	r0
 84a:	1f 90       	pop	r1
 84c:	18 95       	reti

0000084e <__vector_10>:
 84e:	1f 92       	push	r1
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	cf 92       	push	r12
 85a:	df 92       	push	r13
 85c:	ef 92       	push	r14
 85e:	ff 92       	push	r15
 860:	0f 93       	push	r16
 862:	1f 93       	push	r17
 864:	2f 93       	push	r18
 866:	3f 93       	push	r19
 868:	4f 93       	push	r20
 86a:	5f 93       	push	r21
 86c:	6f 93       	push	r22
 86e:	7f 93       	push	r23
 870:	8f 93       	push	r24
 872:	9f 93       	push	r25
 874:	af 93       	push	r26
 876:	bf 93       	push	r27
 878:	ef 93       	push	r30
 87a:	ff 93       	push	r31
 87c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <count.1879>
 880:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <count.1879+0x1>
 884:	a0 91 81 00 	lds	r26, 0x0081	; 0x800081 <count.1879+0x2>
 888:	b0 91 82 00 	lds	r27, 0x0082	; 0x800082 <count.1879+0x3>
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	a1 1d       	adc	r26, r1
 890:	b1 1d       	adc	r27, r1
 892:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <count.1879>
 896:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <count.1879+0x1>
 89a:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <count.1879+0x2>
 89e:	b0 93 82 00 	sts	0x0082, r27	; 0x800082 <count.1879+0x3>
 8a2:	25 e4       	ldi	r18, 0x45	; 69
 8a4:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <Avg_Temp>
 8a8:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <c>
 8ac:	2f 5f       	subi	r18, 0xFF	; 255
 8ae:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <c>
 8b2:	00 91 91 00 	lds	r16, 0x0091	; 0x800091 <T0_OCF_num>
 8b6:	10 91 92 00 	lds	r17, 0x0092	; 0x800092 <T0_OCF_num+0x1>
 8ba:	20 e0       	ldi	r18, 0x00	; 0
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	80 17       	cp	r24, r16
 8c0:	91 07       	cpc	r25, r17
 8c2:	a2 07       	cpc	r26, r18
 8c4:	b3 07       	cpc	r27, r19
 8c6:	09 f0       	breq	.+2      	; 0x8ca <__stack+0x6b>
 8c8:	4c c0       	rjmp	.+152    	; 0x962 <__stack+0x103>
 8ca:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__data_end>
 8ce:	22 30       	cpi	r18, 0x02	; 2
 8d0:	21 f4       	brne	.+8      	; 0x8da <__stack+0x7b>
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 8d8:	33 c0       	rjmp	.+102    	; 0x940 <__stack+0xe1>
 8da:	21 30       	cpi	r18, 0x01	; 1
 8dc:	89 f5       	brne	.+98     	; 0x940 <__stack+0xe1>
 8de:	bc 01       	movw	r22, r24
 8e0:	cd 01       	movw	r24, r26
 8e2:	2a e0       	ldi	r18, 0x0A	; 10
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	40 e0       	ldi	r20, 0x00	; 0
 8e8:	50 e0       	ldi	r21, 0x00	; 0
 8ea:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__udivmodsi4>
 8ee:	6b 01       	movw	r12, r22
 8f0:	7c 01       	movw	r14, r24
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 8f8:	bc 01       	movw	r22, r24
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__floatunsisf>
 902:	20 e0       	ldi	r18, 0x00	; 0
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	4a ef       	ldi	r20, 0xFA	; 250
 908:	5e e3       	ldi	r21, 0x3E	; 62
 90a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__mulsf3>
 90e:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fixunssfsi>
 912:	f6 01       	movw	r30, r12
 914:	e0 5a       	subi	r30, 0xA0	; 160
 916:	ff 4f       	sbci	r31, 0xFF	; 255
 918:	60 83       	st	Z, r22
 91a:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <c>
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <c>
 924:	80 e6       	ldi	r24, 0x60	; 96
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 86 00 	call	0x10c	; 0x10c <AVG>
 92c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Avg_Temp>
 930:	64 e6       	ldi	r22, 0x64	; 100
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <T0_Delay>
 93c:	0e 94 85 03 	call	0x70a	; 0x70a <T0_Start>
 940:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <T0_G_Val>
 944:	8f 5f       	subi	r24, 0xFF	; 255
 946:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <T0_G_Val>
 94a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <count.1879>
 94e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <count.1879+0x1>
 952:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <count.1879+0x2>
 956:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <count.1879+0x3>
 95a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <T0_OCF_Init_val>
 95e:	8c bf       	out	0x3c, r24	; 60
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x107>
 962:	8f ef       	ldi	r24, 0xFF	; 255
 964:	8c bf       	out	0x3c, r24	; 60
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	bf 91       	pop	r27
 96c:	af 91       	pop	r26
 96e:	9f 91       	pop	r25
 970:	8f 91       	pop	r24
 972:	7f 91       	pop	r23
 974:	6f 91       	pop	r22
 976:	5f 91       	pop	r21
 978:	4f 91       	pop	r20
 97a:	3f 91       	pop	r19
 97c:	2f 91       	pop	r18
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	ff 90       	pop	r15
 984:	ef 90       	pop	r14
 986:	df 90       	pop	r13
 988:	cf 90       	pop	r12
 98a:	0f 90       	pop	r0
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	0f 90       	pop	r0
 990:	1f 90       	pop	r1
 992:	18 95       	reti

00000994 <T2_Init>:
 994:	8f b7       	in	r24, 0x3f	; 63
 996:	80 68       	ori	r24, 0x80	; 128
 998:	8f bf       	out	0x3f, r24	; 63
 99a:	89 b7       	in	r24, 0x39	; 57
 99c:	8f 73       	andi	r24, 0x3F	; 63
 99e:	80 68       	ori	r24, 0x80	; 128
 9a0:	89 bf       	out	0x39, r24	; 57
 9a2:	85 b5       	in	r24, 0x25	; 37
 9a4:	87 7b       	andi	r24, 0xB7	; 183
 9a6:	88 60       	ori	r24, 0x08	; 8
 9a8:	85 bd       	out	0x25, r24	; 37
 9aa:	08 95       	ret

000009ac <T2_Delay>:
 9ac:	0f 93       	push	r16
 9ae:	1f 93       	push	r17
 9b0:	9b 01       	movw	r18, r22
 9b2:	ac 01       	movw	r20, r24
 9b4:	a8 ee       	ldi	r26, 0xE8	; 232
 9b6:	b3 e0       	ldi	r27, 0x03	; 3
 9b8:	0e 94 06 07 	call	0xe0c	; 0xe0c <__muluhisi3>
 9bc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__floatunsisf>
 9c0:	20 e0       	ldi	r18, 0x00	; 0
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	40 e8       	ldi	r20, 0x80	; 128
 9c6:	5c e3       	ldi	r21, 0x3C	; 60
 9c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__mulsf3>
 9cc:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fixunssfsi>
 9d0:	66 23       	and	r22, r22
 9d2:	39 f0       	breq	.+14     	; 0x9e2 <T2_Delay+0x36>
 9d4:	07 2f       	mov	r16, r23
 9d6:	18 2f       	mov	r17, r24
 9d8:	29 2f       	mov	r18, r25
 9da:	33 27       	eor	r19, r19
 9dc:	0f 5f       	subi	r16, 0xFF	; 255
 9de:	1f 4f       	sbci	r17, 0xFF	; 255
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <T2_Delay+0x3e>
 9e2:	07 2f       	mov	r16, r23
 9e4:	18 2f       	mov	r17, r24
 9e6:	29 2f       	mov	r18, r25
 9e8:	33 27       	eor	r19, r19
 9ea:	10 93 8b 00 	sts	0x008B, r17	; 0x80008b <T2_OCF_num+0x1>
 9ee:	00 93 8a 00 	sts	0x008A, r16	; 0x80008a <T2_OCF_num>
 9f2:	61 50       	subi	r22, 0x01	; 1
 9f4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <T2_OCF_Init_val>
 9f8:	63 bd       	out	0x23, r22	; 35
 9fa:	1f 91       	pop	r17
 9fc:	0f 91       	pop	r16
 9fe:	08 95       	ret

00000a00 <T2_Start>:
 a00:	85 b5       	in	r24, 0x25	; 37
 a02:	87 60       	ori	r24, 0x07	; 7
 a04:	85 bd       	out	0x25, r24	; 37
 a06:	08 95       	ret

00000a08 <__vector_5>:
						//     -----------------
						//     1 1 0 1 | 0 0 0 0
}

ISR(TIMER2_OVF_vect)
{
 a08:	1f 92       	push	r1
 a0a:	0f 92       	push	r0
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	0f 92       	push	r0
 a10:	11 24       	eor	r1, r1
 a12:	4f 93       	push	r20
 a14:	5f 93       	push	r21
 a16:	6f 93       	push	r22
 a18:	7f 93       	push	r23
 a1a:	8f 93       	push	r24
 a1c:	9f 93       	push	r25
 a1e:	af 93       	push	r26
 a20:	bf 93       	push	r27
	static Uint32 count = 0;
	count++;
 a22:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <count.1899>
 a26:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <count.1899+0x1>
 a2a:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <count.1899+0x2>
 a2e:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <count.1899+0x3>
 a32:	01 96       	adiw	r24, 0x01	; 1
 a34:	a1 1d       	adc	r26, r1
 a36:	b1 1d       	adc	r27, r1
 a38:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <count.1899>
 a3c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <count.1899+0x1>
 a40:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <count.1899+0x2>
 a44:	b0 93 7e 00 	sts	0x007E, r27	; 0x80007e <count.1899+0x3>
	if (count == T2_OVF_num)
 a48:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <T2_OVF_num>
 a4c:	50 91 8d 00 	lds	r21, 0x008D	; 0x80008d <T2_OVF_num+0x1>
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	84 17       	cp	r24, r20
 a56:	95 07       	cpc	r25, r21
 a58:	a6 07       	cpc	r26, r22
 a5a:	b7 07       	cpc	r27, r23
 a5c:	81 f4       	brne	.+32     	; 0xa7e <__vector_5+0x76>
	{
		// Write your code here
		T2_G_Val++;
 a5e:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <T2_G_Val>
 a62:	8f 5f       	subi	r24, 0xFF	; 255
 a64:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <T2_G_Val>
		
		
		count = 0;
 a68:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <count.1899>
 a6c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <count.1899+0x1>
 a70:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <count.1899+0x2>
 a74:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <count.1899+0x3>
		TCNT2 = T2_OVF_Init_val;
 a78:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <T2_OVF_Init_val>
 a7c:	84 bd       	out	0x24, r24	; 36
	}
	
}
 a7e:	bf 91       	pop	r27
 a80:	af 91       	pop	r26
 a82:	9f 91       	pop	r25
 a84:	8f 91       	pop	r24
 a86:	7f 91       	pop	r23
 a88:	6f 91       	pop	r22
 a8a:	5f 91       	pop	r21
 a8c:	4f 91       	pop	r20
 a8e:	0f 90       	pop	r0
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	0f 90       	pop	r0
 a94:	1f 90       	pop	r1
 a96:	18 95       	reti

00000a98 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 a98:	1f 92       	push	r1
 a9a:	0f 92       	push	r0
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	0f 92       	push	r0
 aa0:	11 24       	eor	r1, r1
 aa2:	2f 93       	push	r18
 aa4:	3f 93       	push	r19
 aa6:	4f 93       	push	r20
 aa8:	5f 93       	push	r21
 aaa:	6f 93       	push	r22
 aac:	7f 93       	push	r23
 aae:	8f 93       	push	r24
 ab0:	9f 93       	push	r25
 ab2:	af 93       	push	r26
 ab4:	bf 93       	push	r27
 ab6:	ef 93       	push	r30
 ab8:	ff 93       	push	r31
	static Uint32 count = 0;
	count++;
 aba:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <count.1905>
 abe:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count.1905+0x1>
 ac2:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <count.1905+0x2>
 ac6:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <count.1905+0x3>
 aca:	01 96       	adiw	r24, 0x01	; 1
 acc:	a1 1d       	adc	r26, r1
 ace:	b1 1d       	adc	r27, r1
 ad0:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <count.1905>
 ad4:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <count.1905+0x1>
 ad8:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <count.1905+0x2>
 adc:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <count.1905+0x3>
	if (count == T2_OCF_num)
 ae0:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <T2_OCF_num>
 ae4:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <T2_OCF_num+0x1>
 ae8:	60 e0       	ldi	r22, 0x00	; 0
 aea:	70 e0       	ldi	r23, 0x00	; 0
 aec:	84 17       	cp	r24, r20
 aee:	95 07       	cpc	r25, r21
 af0:	a6 07       	cpc	r26, r22
 af2:	b7 07       	cpc	r27, r23
 af4:	61 f5       	brne	.+88     	; 0xb4e <__vector_4+0xb6>
	{
		//--------------
		if(state==ON)
 af6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 afa:	81 30       	cpi	r24, 0x01	; 1
 afc:	59 f4       	brne	.+22     	; 0xb14 <__vector_4+0x7c>
		{
			LED0_Toggle();
 afe:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LED0_Toggle>

			T2_Delay(T_Blink);
 b02:	64 ef       	ldi	r22, 0xF4	; 244
 b04:	71 e0       	ldi	r23, 0x01	; 1
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <T2_Delay>
			T2_Start();
 b0e:	0e 94 00 05 	call	0xa00	; 0xa00 <T2_Start>
 b12:	0c c0       	rjmp	.+24     	; 0xb2c <__vector_4+0x94>
		}
		else if (state==SET)
 b14:	82 30       	cpi	r24, 0x02	; 2
 b16:	51 f4       	brne	.+20     	; 0xb2c <__vector_4+0x94>
		{
			S7_Toggle();
 b18:	0e 94 47 03 	call	0x68e	; 0x68e <S7_Toggle>
			T2_Delay(T_Blink);
 b1c:	64 ef       	ldi	r22, 0xF4	; 244
 b1e:	71 e0       	ldi	r23, 0x01	; 1
 b20:	80 e0       	ldi	r24, 0x00	; 0
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 d6 04 	call	0x9ac	; 0x9ac <T2_Delay>
			T2_Start();
 b28:	0e 94 00 05 	call	0xa00	; 0xa00 <T2_Start>
		}
		//--------------
		T2_G_Val++;
 b2c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <T2_G_Val>
 b30:	8f 5f       	subi	r24, 0xFF	; 255
 b32:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <T2_G_Val>
		count = 0;
 b36:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <count.1905>
 b3a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <count.1905+0x1>
 b3e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <count.1905+0x2>
 b42:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <count.1905+0x3>
		OCR2 = T2_OCF_Init_val;
 b46:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <T2_OCF_Init_val>
 b4a:	83 bd       	out	0x23, r24	; 35
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <__vector_4+0xba>
	}
	else
	OCR2 = 255;
 b4e:	8f ef       	ldi	r24, 0xFF	; 255
 b50:	83 bd       	out	0x23, r24	; 35
}
 b52:	ff 91       	pop	r31
 b54:	ef 91       	pop	r30
 b56:	bf 91       	pop	r27
 b58:	af 91       	pop	r26
 b5a:	9f 91       	pop	r25
 b5c:	8f 91       	pop	r24
 b5e:	7f 91       	pop	r23
 b60:	6f 91       	pop	r22
 b62:	5f 91       	pop	r21
 b64:	4f 91       	pop	r20
 b66:	3f 91       	pop	r19
 b68:	2f 91       	pop	r18
 b6a:	0f 90       	pop	r0
 b6c:	0f be       	out	0x3f, r0	; 63
 b6e:	0f 90       	pop	r0
 b70:	1f 90       	pop	r1
 b72:	18 95       	reti

00000b74 <__fixunssfsi>:
 b74:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_splitA>
 b78:	88 f0       	brcs	.+34     	; 0xb9c <__fixunssfsi+0x28>
 b7a:	9f 57       	subi	r25, 0x7F	; 127
 b7c:	98 f0       	brcs	.+38     	; 0xba4 <__fixunssfsi+0x30>
 b7e:	b9 2f       	mov	r27, r25
 b80:	99 27       	eor	r25, r25
 b82:	b7 51       	subi	r27, 0x17	; 23
 b84:	b0 f0       	brcs	.+44     	; 0xbb2 <__fixunssfsi+0x3e>
 b86:	e1 f0       	breq	.+56     	; 0xbc0 <__fixunssfsi+0x4c>
 b88:	66 0f       	add	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	1a f0       	brmi	.+6      	; 0xb98 <__fixunssfsi+0x24>
 b92:	ba 95       	dec	r27
 b94:	c9 f7       	brne	.-14     	; 0xb88 <__fixunssfsi+0x14>
 b96:	14 c0       	rjmp	.+40     	; 0xbc0 <__fixunssfsi+0x4c>
 b98:	b1 30       	cpi	r27, 0x01	; 1
 b9a:	91 f0       	breq	.+36     	; 0xbc0 <__fixunssfsi+0x4c>
 b9c:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_zero>
 ba0:	b1 e0       	ldi	r27, 0x01	; 1
 ba2:	08 95       	ret
 ba4:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_zero>
 ba8:	67 2f       	mov	r22, r23
 baa:	78 2f       	mov	r23, r24
 bac:	88 27       	eor	r24, r24
 bae:	b8 5f       	subi	r27, 0xF8	; 248
 bb0:	39 f0       	breq	.+14     	; 0xbc0 <__fixunssfsi+0x4c>
 bb2:	b9 3f       	cpi	r27, 0xF9	; 249
 bb4:	cc f3       	brlt	.-14     	; 0xba8 <__fixunssfsi+0x34>
 bb6:	86 95       	lsr	r24
 bb8:	77 95       	ror	r23
 bba:	67 95       	ror	r22
 bbc:	b3 95       	inc	r27
 bbe:	d9 f7       	brne	.-10     	; 0xbb6 <__fixunssfsi+0x42>
 bc0:	3e f4       	brtc	.+14     	; 0xbd0 <__fixunssfsi+0x5c>
 bc2:	90 95       	com	r25
 bc4:	80 95       	com	r24
 bc6:	70 95       	com	r23
 bc8:	61 95       	neg	r22
 bca:	7f 4f       	sbci	r23, 0xFF	; 255
 bcc:	8f 4f       	sbci	r24, 0xFF	; 255
 bce:	9f 4f       	sbci	r25, 0xFF	; 255
 bd0:	08 95       	ret

00000bd2 <__floatunsisf>:
 bd2:	e8 94       	clt
 bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <__floatsisf+0x12>

00000bd6 <__floatsisf>:
 bd6:	97 fb       	bst	r25, 7
 bd8:	3e f4       	brtc	.+14     	; 0xbe8 <__floatsisf+0x12>
 bda:	90 95       	com	r25
 bdc:	80 95       	com	r24
 bde:	70 95       	com	r23
 be0:	61 95       	neg	r22
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	99 23       	and	r25, r25
 bea:	a9 f0       	breq	.+42     	; 0xc16 <__floatsisf+0x40>
 bec:	f9 2f       	mov	r31, r25
 bee:	96 e9       	ldi	r25, 0x96	; 150
 bf0:	bb 27       	eor	r27, r27
 bf2:	93 95       	inc	r25
 bf4:	f6 95       	lsr	r31
 bf6:	87 95       	ror	r24
 bf8:	77 95       	ror	r23
 bfa:	67 95       	ror	r22
 bfc:	b7 95       	ror	r27
 bfe:	f1 11       	cpse	r31, r1
 c00:	f8 cf       	rjmp	.-16     	; 0xbf2 <__floatsisf+0x1c>
 c02:	fa f4       	brpl	.+62     	; 0xc42 <__floatsisf+0x6c>
 c04:	bb 0f       	add	r27, r27
 c06:	11 f4       	brne	.+4      	; 0xc0c <__floatsisf+0x36>
 c08:	60 ff       	sbrs	r22, 0
 c0a:	1b c0       	rjmp	.+54     	; 0xc42 <__floatsisf+0x6c>
 c0c:	6f 5f       	subi	r22, 0xFF	; 255
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255
 c10:	8f 4f       	sbci	r24, 0xFF	; 255
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	16 c0       	rjmp	.+44     	; 0xc42 <__floatsisf+0x6c>
 c16:	88 23       	and	r24, r24
 c18:	11 f0       	breq	.+4      	; 0xc1e <__floatsisf+0x48>
 c1a:	96 e9       	ldi	r25, 0x96	; 150
 c1c:	11 c0       	rjmp	.+34     	; 0xc40 <__floatsisf+0x6a>
 c1e:	77 23       	and	r23, r23
 c20:	21 f0       	breq	.+8      	; 0xc2a <__floatsisf+0x54>
 c22:	9e e8       	ldi	r25, 0x8E	; 142
 c24:	87 2f       	mov	r24, r23
 c26:	76 2f       	mov	r23, r22
 c28:	05 c0       	rjmp	.+10     	; 0xc34 <__floatsisf+0x5e>
 c2a:	66 23       	and	r22, r22
 c2c:	71 f0       	breq	.+28     	; 0xc4a <__floatsisf+0x74>
 c2e:	96 e8       	ldi	r25, 0x86	; 134
 c30:	86 2f       	mov	r24, r22
 c32:	70 e0       	ldi	r23, 0x00	; 0
 c34:	60 e0       	ldi	r22, 0x00	; 0
 c36:	2a f0       	brmi	.+10     	; 0xc42 <__floatsisf+0x6c>
 c38:	9a 95       	dec	r25
 c3a:	66 0f       	add	r22, r22
 c3c:	77 1f       	adc	r23, r23
 c3e:	88 1f       	adc	r24, r24
 c40:	da f7       	brpl	.-10     	; 0xc38 <__floatsisf+0x62>
 c42:	88 0f       	add	r24, r24
 c44:	96 95       	lsr	r25
 c46:	87 95       	ror	r24
 c48:	97 f9       	bld	r25, 7
 c4a:	08 95       	ret

00000c4c <__fp_split3>:
 c4c:	57 fd       	sbrc	r21, 7
 c4e:	90 58       	subi	r25, 0x80	; 128
 c50:	44 0f       	add	r20, r20
 c52:	55 1f       	adc	r21, r21
 c54:	59 f0       	breq	.+22     	; 0xc6c <__fp_splitA+0x10>
 c56:	5f 3f       	cpi	r21, 0xFF	; 255
 c58:	71 f0       	breq	.+28     	; 0xc76 <__fp_splitA+0x1a>
 c5a:	47 95       	ror	r20

00000c5c <__fp_splitA>:
 c5c:	88 0f       	add	r24, r24
 c5e:	97 fb       	bst	r25, 7
 c60:	99 1f       	adc	r25, r25
 c62:	61 f0       	breq	.+24     	; 0xc7c <__fp_splitA+0x20>
 c64:	9f 3f       	cpi	r25, 0xFF	; 255
 c66:	79 f0       	breq	.+30     	; 0xc86 <__fp_splitA+0x2a>
 c68:	87 95       	ror	r24
 c6a:	08 95       	ret
 c6c:	12 16       	cp	r1, r18
 c6e:	13 06       	cpc	r1, r19
 c70:	14 06       	cpc	r1, r20
 c72:	55 1f       	adc	r21, r21
 c74:	f2 cf       	rjmp	.-28     	; 0xc5a <__fp_split3+0xe>
 c76:	46 95       	lsr	r20
 c78:	f1 df       	rcall	.-30     	; 0xc5c <__fp_splitA>
 c7a:	08 c0       	rjmp	.+16     	; 0xc8c <__fp_splitA+0x30>
 c7c:	16 16       	cp	r1, r22
 c7e:	17 06       	cpc	r1, r23
 c80:	18 06       	cpc	r1, r24
 c82:	99 1f       	adc	r25, r25
 c84:	f1 cf       	rjmp	.-30     	; 0xc68 <__fp_splitA+0xc>
 c86:	86 95       	lsr	r24
 c88:	71 05       	cpc	r23, r1
 c8a:	61 05       	cpc	r22, r1
 c8c:	08 94       	sec
 c8e:	08 95       	ret

00000c90 <__fp_zero>:
 c90:	e8 94       	clt

00000c92 <__fp_szero>:
 c92:	bb 27       	eor	r27, r27
 c94:	66 27       	eor	r22, r22
 c96:	77 27       	eor	r23, r23
 c98:	cb 01       	movw	r24, r22
 c9a:	97 f9       	bld	r25, 7
 c9c:	08 95       	ret

00000c9e <__mulsf3>:
 c9e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__mulsf3x>
 ca2:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__fp_round>
 ca6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscA>
 caa:	38 f0       	brcs	.+14     	; 0xcba <__mulsf3+0x1c>
 cac:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscB>
 cb0:	20 f0       	brcs	.+8      	; 0xcba <__mulsf3+0x1c>
 cb2:	95 23       	and	r25, r21
 cb4:	11 f0       	breq	.+4      	; 0xcba <__mulsf3+0x1c>
 cb6:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_inf>
 cba:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_nan>
 cbe:	11 24       	eor	r1, r1
 cc0:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_szero>

00000cc4 <__mulsf3x>:
 cc4:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_split3>
 cc8:	70 f3       	brcs	.-36     	; 0xca6 <__mulsf3+0x8>

00000cca <__mulsf3_pse>:
 cca:	95 9f       	mul	r25, r21
 ccc:	c1 f3       	breq	.-16     	; 0xcbe <__mulsf3+0x20>
 cce:	95 0f       	add	r25, r21
 cd0:	50 e0       	ldi	r21, 0x00	; 0
 cd2:	55 1f       	adc	r21, r21
 cd4:	62 9f       	mul	r22, r18
 cd6:	f0 01       	movw	r30, r0
 cd8:	72 9f       	mul	r23, r18
 cda:	bb 27       	eor	r27, r27
 cdc:	f0 0d       	add	r31, r0
 cde:	b1 1d       	adc	r27, r1
 ce0:	63 9f       	mul	r22, r19
 ce2:	aa 27       	eor	r26, r26
 ce4:	f0 0d       	add	r31, r0
 ce6:	b1 1d       	adc	r27, r1
 ce8:	aa 1f       	adc	r26, r26
 cea:	64 9f       	mul	r22, r20
 cec:	66 27       	eor	r22, r22
 cee:	b0 0d       	add	r27, r0
 cf0:	a1 1d       	adc	r26, r1
 cf2:	66 1f       	adc	r22, r22
 cf4:	82 9f       	mul	r24, r18
 cf6:	22 27       	eor	r18, r18
 cf8:	b0 0d       	add	r27, r0
 cfa:	a1 1d       	adc	r26, r1
 cfc:	62 1f       	adc	r22, r18
 cfe:	73 9f       	mul	r23, r19
 d00:	b0 0d       	add	r27, r0
 d02:	a1 1d       	adc	r26, r1
 d04:	62 1f       	adc	r22, r18
 d06:	83 9f       	mul	r24, r19
 d08:	a0 0d       	add	r26, r0
 d0a:	61 1d       	adc	r22, r1
 d0c:	22 1f       	adc	r18, r18
 d0e:	74 9f       	mul	r23, r20
 d10:	33 27       	eor	r19, r19
 d12:	a0 0d       	add	r26, r0
 d14:	61 1d       	adc	r22, r1
 d16:	23 1f       	adc	r18, r19
 d18:	84 9f       	mul	r24, r20
 d1a:	60 0d       	add	r22, r0
 d1c:	21 1d       	adc	r18, r1
 d1e:	82 2f       	mov	r24, r18
 d20:	76 2f       	mov	r23, r22
 d22:	6a 2f       	mov	r22, r26
 d24:	11 24       	eor	r1, r1
 d26:	9f 57       	subi	r25, 0x7F	; 127
 d28:	50 40       	sbci	r21, 0x00	; 0
 d2a:	9a f0       	brmi	.+38     	; 0xd52 <__mulsf3_pse+0x88>
 d2c:	f1 f0       	breq	.+60     	; 0xd6a <__mulsf3_pse+0xa0>
 d2e:	88 23       	and	r24, r24
 d30:	4a f0       	brmi	.+18     	; 0xd44 <__mulsf3_pse+0x7a>
 d32:	ee 0f       	add	r30, r30
 d34:	ff 1f       	adc	r31, r31
 d36:	bb 1f       	adc	r27, r27
 d38:	66 1f       	adc	r22, r22
 d3a:	77 1f       	adc	r23, r23
 d3c:	88 1f       	adc	r24, r24
 d3e:	91 50       	subi	r25, 0x01	; 1
 d40:	50 40       	sbci	r21, 0x00	; 0
 d42:	a9 f7       	brne	.-22     	; 0xd2e <__mulsf3_pse+0x64>
 d44:	9e 3f       	cpi	r25, 0xFE	; 254
 d46:	51 05       	cpc	r21, r1
 d48:	80 f0       	brcs	.+32     	; 0xd6a <__mulsf3_pse+0xa0>
 d4a:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_inf>
 d4e:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_szero>
 d52:	5f 3f       	cpi	r21, 0xFF	; 255
 d54:	e4 f3       	brlt	.-8      	; 0xd4e <__mulsf3_pse+0x84>
 d56:	98 3e       	cpi	r25, 0xE8	; 232
 d58:	d4 f3       	brlt	.-12     	; 0xd4e <__mulsf3_pse+0x84>
 d5a:	86 95       	lsr	r24
 d5c:	77 95       	ror	r23
 d5e:	67 95       	ror	r22
 d60:	b7 95       	ror	r27
 d62:	f7 95       	ror	r31
 d64:	e7 95       	ror	r30
 d66:	9f 5f       	subi	r25, 0xFF	; 255
 d68:	c1 f7       	brne	.-16     	; 0xd5a <__mulsf3_pse+0x90>
 d6a:	fe 2b       	or	r31, r30
 d6c:	88 0f       	add	r24, r24
 d6e:	91 1d       	adc	r25, r1
 d70:	96 95       	lsr	r25
 d72:	87 95       	ror	r24
 d74:	97 f9       	bld	r25, 7
 d76:	08 95       	ret

00000d78 <__fp_inf>:
 d78:	97 f9       	bld	r25, 7
 d7a:	9f 67       	ori	r25, 0x7F	; 127
 d7c:	80 e8       	ldi	r24, 0x80	; 128
 d7e:	70 e0       	ldi	r23, 0x00	; 0
 d80:	60 e0       	ldi	r22, 0x00	; 0
 d82:	08 95       	ret

00000d84 <__fp_nan>:
 d84:	9f ef       	ldi	r25, 0xFF	; 255
 d86:	80 ec       	ldi	r24, 0xC0	; 192
 d88:	08 95       	ret

00000d8a <__fp_pscA>:
 d8a:	00 24       	eor	r0, r0
 d8c:	0a 94       	dec	r0
 d8e:	16 16       	cp	r1, r22
 d90:	17 06       	cpc	r1, r23
 d92:	18 06       	cpc	r1, r24
 d94:	09 06       	cpc	r0, r25
 d96:	08 95       	ret

00000d98 <__fp_pscB>:
 d98:	00 24       	eor	r0, r0
 d9a:	0a 94       	dec	r0
 d9c:	12 16       	cp	r1, r18
 d9e:	13 06       	cpc	r1, r19
 da0:	14 06       	cpc	r1, r20
 da2:	05 06       	cpc	r0, r21
 da4:	08 95       	ret

00000da6 <__fp_round>:
 da6:	09 2e       	mov	r0, r25
 da8:	03 94       	inc	r0
 daa:	00 0c       	add	r0, r0
 dac:	11 f4       	brne	.+4      	; 0xdb2 <__fp_round+0xc>
 dae:	88 23       	and	r24, r24
 db0:	52 f0       	brmi	.+20     	; 0xdc6 <__fp_round+0x20>
 db2:	bb 0f       	add	r27, r27
 db4:	40 f4       	brcc	.+16     	; 0xdc6 <__fp_round+0x20>
 db6:	bf 2b       	or	r27, r31
 db8:	11 f4       	brne	.+4      	; 0xdbe <__fp_round+0x18>
 dba:	60 ff       	sbrs	r22, 0
 dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <__fp_round+0x20>
 dbe:	6f 5f       	subi	r22, 0xFF	; 255
 dc0:	7f 4f       	sbci	r23, 0xFF	; 255
 dc2:	8f 4f       	sbci	r24, 0xFF	; 255
 dc4:	9f 4f       	sbci	r25, 0xFF	; 255
 dc6:	08 95       	ret

00000dc8 <__udivmodsi4>:
 dc8:	a1 e2       	ldi	r26, 0x21	; 33
 dca:	1a 2e       	mov	r1, r26
 dcc:	aa 1b       	sub	r26, r26
 dce:	bb 1b       	sub	r27, r27
 dd0:	fd 01       	movw	r30, r26
 dd2:	0d c0       	rjmp	.+26     	; 0xdee <__udivmodsi4_ep>

00000dd4 <__udivmodsi4_loop>:
 dd4:	aa 1f       	adc	r26, r26
 dd6:	bb 1f       	adc	r27, r27
 dd8:	ee 1f       	adc	r30, r30
 dda:	ff 1f       	adc	r31, r31
 ddc:	a2 17       	cp	r26, r18
 dde:	b3 07       	cpc	r27, r19
 de0:	e4 07       	cpc	r30, r20
 de2:	f5 07       	cpc	r31, r21
 de4:	20 f0       	brcs	.+8      	; 0xdee <__udivmodsi4_ep>
 de6:	a2 1b       	sub	r26, r18
 de8:	b3 0b       	sbc	r27, r19
 dea:	e4 0b       	sbc	r30, r20
 dec:	f5 0b       	sbc	r31, r21

00000dee <__udivmodsi4_ep>:
 dee:	66 1f       	adc	r22, r22
 df0:	77 1f       	adc	r23, r23
 df2:	88 1f       	adc	r24, r24
 df4:	99 1f       	adc	r25, r25
 df6:	1a 94       	dec	r1
 df8:	69 f7       	brne	.-38     	; 0xdd4 <__udivmodsi4_loop>
 dfa:	60 95       	com	r22
 dfc:	70 95       	com	r23
 dfe:	80 95       	com	r24
 e00:	90 95       	com	r25
 e02:	9b 01       	movw	r18, r22
 e04:	ac 01       	movw	r20, r24
 e06:	bd 01       	movw	r22, r26
 e08:	cf 01       	movw	r24, r30
 e0a:	08 95       	ret

00000e0c <__muluhisi3>:
 e0c:	0e 94 11 07 	call	0xe22	; 0xe22 <__umulhisi3>
 e10:	a5 9f       	mul	r26, r21
 e12:	90 0d       	add	r25, r0
 e14:	b4 9f       	mul	r27, r20
 e16:	90 0d       	add	r25, r0
 e18:	a4 9f       	mul	r26, r20
 e1a:	80 0d       	add	r24, r0
 e1c:	91 1d       	adc	r25, r1
 e1e:	11 24       	eor	r1, r1
 e20:	08 95       	ret

00000e22 <__umulhisi3>:
 e22:	a2 9f       	mul	r26, r18
 e24:	b0 01       	movw	r22, r0
 e26:	b3 9f       	mul	r27, r19
 e28:	c0 01       	movw	r24, r0
 e2a:	a3 9f       	mul	r26, r19
 e2c:	70 0d       	add	r23, r0
 e2e:	81 1d       	adc	r24, r1
 e30:	11 24       	eor	r1, r1
 e32:	91 1d       	adc	r25, r1
 e34:	b2 9f       	mul	r27, r18
 e36:	70 0d       	add	r23, r0
 e38:	81 1d       	adc	r24, r1
 e3a:	11 24       	eor	r1, r1
 e3c:	91 1d       	adc	r25, r1
 e3e:	08 95       	ret

00000e40 <_exit>:
 e40:	f8 94       	cli

00000e42 <__stop_program>:
 e42:	ff cf       	rjmp	.-2      	; 0xe42 <__stop_program>
