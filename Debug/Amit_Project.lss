
Amit_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000f20  00000fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080006c  0080006c  00000fc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f37  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c26  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001052  00000000  00000000  00003e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  00004ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000706  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bab  00000000  00000000  00005be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00006791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_1>
   8:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_2>
   c:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_3>
  10:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_4>
  14:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_10>
  2c:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 39       	cpi	r26, 0x97	; 151
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 02 	call	0x542	; 0x542 <main>
  8a:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
  92:	8f b7       	in	r24, 0x3f	; 63
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8f bf       	out	0x3f, r24	; 63
	
	// Preipheral Enable/ Disable Interrupt
	ADCSRA = (ADC_INT << 3) | (ADCSRA & 0XF7); 
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	86 b9       	out	0x06, r24	; 6
	
	// ADC Voltage Reference / Data Adjust
	ADMUX = (ADC_Volt_Ref << 6) | (ADC_Data_Adjust << 5) | (ADMUX & 0X1F);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 71       	andi	r24, 0x1F	; 31
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	87 b9       	out	0x07, r24	; 7
	
	// ADC Mode / CLK Source
	ADCSRA = (ADC_Mode << 5) | (ADC_CLK_Source) | (ADCSRA & 0XD8);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	87 62       	ori	r24, 0x27	; 39
  aa:	86 b9       	out	0x06, r24	; 6
	
	// ADC Auto Trigger Mode
	SFIOR = (ADC_AT_Mode << 5) | (SFIOR & 0X1F);
  ac:	80 b7       	in	r24, 0x30	; 48
  ae:	8f 71       	andi	r24, 0x1F	; 31
  b0:	80 bf       	out	0x30, r24	; 48
	
	// ADC Enable
	Set_Bit(ADCSRA, 7);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_Read>:
}
Uint16 ADC_Read(Uint8 Channel)
{
	Uint16 Value;
	// ADC Select Channel
	ADMUX = Channel | (ADMUX & 0XF8);
  ba:	97 b1       	in	r25, 0x07	; 7
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	89 2b       	or	r24, r25
  c0:	87 b9       	out	0x07, r24	; 7
	
	// ADC Start of Conversion
	Set_Bit(ADCSRA, 6);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	86 b9       	out	0x06, r24	; 6
	while(!Get_Bit(ADCSRA, 4));
  c8:	34 9b       	sbis	0x06, 4	; 6
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <ADC_Read+0xe>
	
	Value = ADCR;
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	95 b1       	in	r25, 0x05	; 5
	
	return Value;
  d0:	08 95       	ret

000000d2 <App_Init>:

#include "app.h"
extern Uint8 state,Set_Temp,Avg_Temp;
void App_Init()
{
	EEPROM_WriteByte(Addr,Set_Temp);
  d2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 48 02 	call	0x490	; 0x490 <EEPROM_WriteByte>
    T0_Init();
  de:	0e 94 39 04 	call	0x872	; 0x872 <T0_Init>
    T2_Init();
  e2:	0e 94 57 05 	call	0xaae	; 0xaae <T2_Init>
    Temp_Sensor_Init();
  e6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
    Heating_Element_Init();
  ea:	0e 94 5f 03 	call	0x6be	; 0x6be <Relay1_Init>
    Cooling_Element_Init();
  ee:	0e 94 4d 03 	call	0x69a	; 0x69a <Relay0_Init>
    LED0_Init();
  f2:	0e 94 8a 02 	call	0x514	; 0x514 <LED0_Init>
    EXT0_INT_Init();
  f6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <EXT0_INT_Init>
    EXT1_INT_Init();
  fa:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <EXT1_INT_Init>
    EXT2_INT_Init();
  fe:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <EXT2_INT_Init>
	S7_Init();
 102:	0e 94 71 03 	call	0x6e2	; 0x6e2 <S7_Init>
    

    state=OFF;
 106:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 10a:	08 95       	ret

0000010c <State_Off>:
}
void State_Off()
{ 
    //Turn off and await on button
    T0_Stop();
 10c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <T0_Stop>
    T2_Stop();
 110:	0e 94 90 05 	call	0xb20	; 0xb20 <T2_Stop>
    S7_Turn_Off();
 114:	0e 94 1a 04 	call	0x834	; 0x834 <S7_Turn_Off>
    LED0_OFF();
 118:	0e 94 96 02 	call	0x52c	; 0x52c <LED0_OFF>
    Heating_Element_OFF();
 11c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Relay1_OFF>
    Cooling_Element_OFF();
 120:	0e 94 59 03 	call	0x6b2	; 0x6b2 <Relay0_OFF>

    while (state==OFF); //Await interrupt of ON button
 124:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 128:	88 23       	and	r24, r24
 12a:	e1 f3       	breq	.-8      	; 0x124 <State_Off+0x18>
}
 12c:	08 95       	ret

0000012e <State_On>:
void State_On()
{
    S7_Turn_ON();
 12e:	0e 94 25 04 	call	0x84a	; 0x84a <S7_Turn_ON>
    Set_Temp=EEPROM_ReadByte(Addr);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 54 02 	call	0x4a8	; 0x4a8 <EEPROM_ReadByte>
 13a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

    //Start timer for temp measurement
    T0_Delay(T_Temp);
 13e:	64 e6       	ldi	r22, 0x64	; 100
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 44 04 	call	0x888	; 0x888 <T0_Delay>
	T0_Start();
 14a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <T0_Start>
    
    if (Avg_Temp<(Set_Temp-Thresh_Temp))
 14e:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <Avg_Temp>
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	45 50       	subi	r20, 0x05	; 5
 15e:	51 09       	sbc	r21, r1
 160:	24 17       	cp	r18, r20
 162:	35 07       	cpc	r19, r21
 164:	d4 f4       	brge	.+52     	; 0x19a <State_On+0x6c>
    {
		//Start timer for LED Blinking
		T2_Delay(T_Blink);
 166:	68 ee       	ldi	r22, 0xE8	; 232
 168:	73 e0       	ldi	r23, 0x03	; 3
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 62 05 	call	0xac4	; 0xac4 <T2_Delay>
		T2_Start();
 172:	0e 94 8c 05 	call	0xb18	; 0xb18 <T2_Start>
        //Heating
        Cooling_Element_OFF();
 176:	0e 94 59 03 	call	0x6b2	; 0x6b2 <Relay0_OFF>
        Heating_Element_ON();
 17a:	0e 94 65 03 	call	0x6ca	; 0x6ca <Relay1_ON>
        
        while((Avg_Temp<Set_Temp) && (state==ON))
 17e:	02 c0       	rjmp	.+4      	; 0x184 <State_On+0x56>
        {
            S7_Display(Avg_Temp);
 180:	0e 94 d6 03 	call	0x7ac	; 0x7ac <S7_Display>
		T2_Start();
        //Heating
        Cooling_Element_OFF();
        Heating_Element_ON();
        
        while((Avg_Temp<Set_Temp) && (state==ON))
 184:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Avg_Temp>
 188:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18c:	89 17       	cp	r24, r25
 18e:	f0 f5       	brcc	.+124    	; 0x20c <State_On+0xde>
 190:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end>
 194:	91 30       	cpi	r25, 0x01	; 1
 196:	a1 f3       	breq	.-24     	; 0x180 <State_On+0x52>
 198:	08 95       	ret
        {
            S7_Display(Avg_Temp);
        }
    }

    else if (Avg_Temp>(Set_Temp+Thresh_Temp))
 19a:	05 96       	adiw	r24, 0x05	; 5
 19c:	82 17       	cp	r24, r18
 19e:	93 07       	cpc	r25, r19
 1a0:	a4 f4       	brge	.+40     	; 0x1ca <State_On+0x9c>
    {

		LED0_ON();
 1a2:	0e 94 90 02 	call	0x520	; 0x520 <LED0_ON>
        //Start cooling
        Cooling_Element_ON();
 1a6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Relay0_ON>
        Heating_Element_OFF();
 1aa:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Relay1_OFF>
        while((Avg_Temp>Set_Temp) && (state==ON))
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <State_On+0x86>
        {
            S7_Display(Avg_Temp);
 1b0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <S7_Display>

		LED0_ON();
        //Start cooling
        Cooling_Element_ON();
        Heating_Element_OFF();
        while((Avg_Temp>Set_Temp) && (state==ON))
 1b4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Avg_Temp>
 1b8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	98 17       	cp	r25, r24
 1be:	30 f5       	brcc	.+76     	; 0x20c <State_On+0xde>
 1c0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end>
 1c4:	91 30       	cpi	r25, 0x01	; 1
 1c6:	a1 f3       	breq	.-24     	; 0x1b0 <State_On+0x82>
 1c8:	08 95       	ret
        }
    }

    else
    {
        T2_Stop();
 1ca:	0e 94 90 05 	call	0xb20	; 0xb20 <T2_Stop>
        Cooling_Element_OFF();
 1ce:	0e 94 59 03 	call	0x6b2	; 0x6b2 <Relay0_OFF>
        Heating_Element_OFF();
 1d2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Relay1_OFF>
        LED0_OFF();
 1d6:	0e 94 96 02 	call	0x52c	; 0x52c <LED0_OFF>
        while ((Avg_Temp>=(Set_Temp-Thresh_Temp)) && ((Avg_Temp<=(Set_Temp+Thresh_Temp))) && (state==ON))  //Loop to await change in temperature with a +-5 threshold
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <State_On+0xb2>
		{
			S7_Display(Avg_Temp);    
 1dc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <S7_Display>
    {
        T2_Stop();
        Cooling_Element_OFF();
        Heating_Element_OFF();
        LED0_OFF();
        while ((Avg_Temp>=(Set_Temp-Thresh_Temp)) && ((Avg_Temp<=(Set_Temp+Thresh_Temp))) && (state==ON))  //Loop to await change in temperature with a +-5 threshold
 1e0:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Avg_Temp>
 1e4:	48 2f       	mov	r20, r24
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	65 50       	subi	r22, 0x05	; 5
 1f2:	71 09       	sbc	r23, r1
 1f4:	46 17       	cp	r20, r22
 1f6:	57 07       	cpc	r21, r23
 1f8:	4c f0       	brlt	.+18     	; 0x20c <State_On+0xde>
 1fa:	2b 5f       	subi	r18, 0xFB	; 251
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	24 17       	cp	r18, r20
 200:	35 07       	cpc	r19, r21
 202:	24 f0       	brlt	.+8      	; 0x20c <State_On+0xde>
 204:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end>
 208:	91 30       	cpi	r25, 0x01	; 1
 20a:	41 f3       	breq	.-48     	; 0x1dc <State_On+0xae>
 20c:	08 95       	ret

0000020e <State_Set_Temp>:
}
void State_Set_Temp()
{
    // 5 seconds timer start

    T2_Delay(T_Blink);
 20e:	68 ee       	ldi	r22, 0xE8	; 232
 210:	73 e0       	ldi	r23, 0x03	; 3
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 62 05 	call	0xac4	; 0xac4 <T2_Delay>
    T2_Start();
 21a:	0e 94 8c 05 	call	0xb18	; 0xb18 <T2_Start>
    while(state==SET)
 21e:	04 c0       	rjmp	.+8      	; 0x228 <State_Set_Temp+0x1a>
	{
		S7_Display(Set_Temp);
 220:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 224:	0e 94 d6 03 	call	0x7ac	; 0x7ac <S7_Display>
{
    // 5 seconds timer start

    T2_Delay(T_Blink);
    T2_Start();
    while(state==SET)
 228:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	c1 f3       	breq	.-16     	; 0x220 <State_Set_Temp+0x12>
	{
		S7_Display(Set_Temp);
	}
}
 230:	08 95       	ret

00000232 <AVG>:
Uint8 AVG(Uint8 *Data)
{
 232:	bc 01       	movw	r22, r24
	Uint16 s=0;
	for (Uint8 i=0;i<10;i++)
 234:	90 e0       	ldi	r25, 0x00	; 0
		S7_Display(Set_Temp);
	}
}
Uint8 AVG(Uint8 *Data)
{
	Uint16 s=0;
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
	for (Uint8 i=0;i<10;i++)
 23a:	07 c0       	rjmp	.+14     	; 0x24a <AVG+0x18>
	{
		s+=Data[i];
 23c:	fb 01       	movw	r30, r22
 23e:	e9 0f       	add	r30, r25
 240:	f1 1d       	adc	r31, r1
 242:	40 81       	ld	r20, Z
 244:	24 0f       	add	r18, r20
 246:	31 1d       	adc	r19, r1
	}
}
Uint8 AVG(Uint8 *Data)
{
	Uint16 s=0;
	for (Uint8 i=0;i<10;i++)
 248:	9f 5f       	subi	r25, 0xFF	; 255
 24a:	9a 30       	cpi	r25, 0x0A	; 10
 24c:	b8 f3       	brcs	.-18     	; 0x23c <AVG+0xa>
	{
		s+=Data[i];
	}
	return ((Uint8)(s/10));
 24e:	ad ec       	ldi	r26, 0xCD	; 205
 250:	bc ec       	ldi	r27, 0xCC	; 204
 252:	0e 94 74 07 	call	0xee8	; 0xee8 <__umulhisi3>
 256:	96 95       	lsr	r25
 258:	87 95       	ror	r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	08 95       	ret

00000264 <DIO_SetPin_Dir>:

#include "DIO.h"

void DIO_SetPin_Dir(Uint8 port, Uint8 pin, Uint8 dir)
{
	switch (dir)
 264:	44 23       	and	r20, r20
 266:	19 f0       	breq	.+6      	; 0x26e <DIO_SetPin_Dir+0xa>
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	c9 f1       	breq	.+114    	; 0x2de <DIO_SetPin_Dir+0x7a>
 26c:	08 95       	ret
	{
		case DIO_PIN_IN:
		switch(port)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	91 f0       	breq	.+36     	; 0x296 <DIO_SetPin_Dir+0x32>
 272:	28 f0       	brcs	.+10     	; 0x27e <DIO_SetPin_Dir+0x1a>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	d9 f0       	breq	.+54     	; 0x2ae <DIO_SetPin_Dir+0x4a>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	29 f1       	breq	.+74     	; 0x2c6 <DIO_SetPin_Dir+0x62>
 27c:	08 95       	ret
		{
			case DIO_PORTA:
			Clear_Bit(DDRA, pin);
 27e:	2a b3       	in	r18, 0x1a	; 26
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_SetPin_Dir+0x26>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_SetPin_Dir+0x22>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	8a bb       	out	0x1a, r24	; 26
			break;
 294:	08 95       	ret
			
			case DIO_PORTB:
			Clear_Bit(DDRB, pin);
 296:	27 b3       	in	r18, 0x17	; 23
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_SetPin_Dir+0x3e>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_SetPin_Dir+0x3a>
 2a6:	80 95       	com	r24
 2a8:	82 23       	and	r24, r18
 2aa:	87 bb       	out	0x17, r24	; 23
			break;
 2ac:	08 95       	ret
			
			case DIO_PORTC:
			Clear_Bit(DDRC, pin);
 2ae:	24 b3       	in	r18, 0x14	; 20
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_SetPin_Dir+0x56>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_SetPin_Dir+0x52>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	84 bb       	out	0x14, r24	; 20
			break;
 2c4:	08 95       	ret
			
			case DIO_PORTD:
			Clear_Bit(DDRD, pin);
 2c6:	21 b3       	in	r18, 0x11	; 17
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_SetPin_Dir+0x6e>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_SetPin_Dir+0x6a>
 2d6:	80 95       	com	r24
 2d8:	82 23       	and	r24, r18
 2da:	81 bb       	out	0x11, r24	; 17
			break;
 2dc:	08 95       	ret
			break;	
		}
		break;
		
		case DIO_PIN_OUT:
		switch(port)
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	89 f0       	breq	.+34     	; 0x304 <DIO_SetPin_Dir+0xa0>
 2e2:	28 f0       	brcs	.+10     	; 0x2ee <DIO_SetPin_Dir+0x8a>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	c9 f0       	breq	.+50     	; 0x31a <DIO_SetPin_Dir+0xb6>
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	11 f1       	breq	.+68     	; 0x330 <DIO_SetPin_Dir+0xcc>
 2ec:	08 95       	ret
		{
			case DIO_PORTA:
			Set_Bit(DDRA, pin);
 2ee:	2a b3       	in	r18, 0x1a	; 26
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_SetPin_Dir+0x96>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_SetPin_Dir+0x92>
 2fe:	82 2b       	or	r24, r18
 300:	8a bb       	out	0x1a, r24	; 26
			break;
 302:	08 95       	ret
			
			case DIO_PORTB:
			Set_Bit(DDRB, pin);
 304:	27 b3       	in	r18, 0x17	; 23
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPin_Dir+0xac>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPin_Dir+0xa8>
 314:	82 2b       	or	r24, r18
 316:	87 bb       	out	0x17, r24	; 23
			break;
 318:	08 95       	ret
			
			case DIO_PORTC:
			Set_Bit(DDRC, pin);
 31a:	24 b3       	in	r18, 0x14	; 20
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_SetPin_Dir+0xc2>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_SetPin_Dir+0xbe>
 32a:	82 2b       	or	r24, r18
 32c:	84 bb       	out	0x14, r24	; 20
			break;
 32e:	08 95       	ret
			
			case DIO_PORTD:
			Set_Bit(DDRD, pin);
 330:	21 b3       	in	r18, 0x11	; 17
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_SetPin_Dir+0xd8>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_SetPin_Dir+0xd4>
 340:	82 2b       	or	r24, r18
 342:	81 bb       	out	0x11, r24	; 17
 344:	08 95       	ret

00000346 <DIO_SetPin_Val>:
	}
}

void DIO_SetPin_Val(Uint8 port, Uint8 pin, Uint8 val)
{
	switch (val)
 346:	44 23       	and	r20, r20
 348:	19 f0       	breq	.+6      	; 0x350 <DIO_SetPin_Val+0xa>
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	c9 f1       	breq	.+114    	; 0x3c0 <DIO_SetPin_Val+0x7a>
 34e:	08 95       	ret
	{
		case DIO_PIN_OFF:
		switch(port)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	91 f0       	breq	.+36     	; 0x378 <DIO_SetPin_Val+0x32>
 354:	28 f0       	brcs	.+10     	; 0x360 <DIO_SetPin_Val+0x1a>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	d9 f0       	breq	.+54     	; 0x390 <DIO_SetPin_Val+0x4a>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	29 f1       	breq	.+74     	; 0x3a8 <DIO_SetPin_Val+0x62>
 35e:	08 95       	ret
		{
			case DIO_PORTA:
			Clear_Bit(PORTA, pin);
 360:	2b b3       	in	r18, 0x1b	; 27
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_SetPin_Val+0x26>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_SetPin_Val+0x22>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	8b bb       	out	0x1b, r24	; 27
			break;
 376:	08 95       	ret
			
			case DIO_PORTB:
			Clear_Bit(PORTB, pin);
 378:	28 b3       	in	r18, 0x18	; 24
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_SetPin_Val+0x3e>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_SetPin_Val+0x3a>
 388:	80 95       	com	r24
 38a:	82 23       	and	r24, r18
 38c:	88 bb       	out	0x18, r24	; 24
			break;
 38e:	08 95       	ret
			
			case DIO_PORTC:
			Clear_Bit(PORTC, pin);
 390:	25 b3       	in	r18, 0x15	; 21
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_SetPin_Val+0x56>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_SetPin_Val+0x52>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	85 bb       	out	0x15, r24	; 21
			break;
 3a6:	08 95       	ret
			
			case DIO_PORTD:
			Clear_Bit(PORTD, pin);
 3a8:	22 b3       	in	r18, 0x12	; 18
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_SetPin_Val+0x6e>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_SetPin_Val+0x6a>
 3b8:	80 95       	com	r24
 3ba:	82 23       	and	r24, r18
 3bc:	82 bb       	out	0x12, r24	; 18
			break;
 3be:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_ON:
		switch(port)
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	89 f0       	breq	.+34     	; 0x3e6 <DIO_SetPin_Val+0xa0>
 3c4:	28 f0       	brcs	.+10     	; 0x3d0 <DIO_SetPin_Val+0x8a>
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	c9 f0       	breq	.+50     	; 0x3fc <DIO_SetPin_Val+0xb6>
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	11 f1       	breq	.+68     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3ce:	08 95       	ret
		{
			case DIO_PORTA:
			Set_Bit(PORTA, pin);
 3d0:	2b b3       	in	r18, 0x1b	; 27
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_SetPin_Val+0x96>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_SetPin_Val+0x92>
 3e0:	82 2b       	or	r24, r18
 3e2:	8b bb       	out	0x1b, r24	; 27
			break;
 3e4:	08 95       	ret
			
			case DIO_PORTB:
			Set_Bit(PORTB, pin);
 3e6:	28 b3       	in	r18, 0x18	; 24
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_SetPin_Val+0xac>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_SetPin_Val+0xa8>
 3f6:	82 2b       	or	r24, r18
 3f8:	88 bb       	out	0x18, r24	; 24
			break;
 3fa:	08 95       	ret
			
			case DIO_PORTC:
			Set_Bit(PORTC, pin);
 3fc:	25 b3       	in	r18, 0x15	; 21
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	82 2b       	or	r24, r18
 40e:	85 bb       	out	0x15, r24	; 21
			break;
 410:	08 95       	ret
			
			case DIO_PORTD:
			Set_Bit(PORTD, pin);
 412:	22 b3       	in	r18, 0x12	; 18
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	82 2b       	or	r24, r18
 424:	82 bb       	out	0x12, r24	; 18
 426:	08 95       	ret

00000428 <DIO_TogglePin>:
	}		
}

void DIO_TogglePin(Uint8 port, Uint8 pin)
{
	switch(port)
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	89 f0       	breq	.+34     	; 0x44e <DIO_TogglePin+0x26>
 42c:	28 f0       	brcs	.+10     	; 0x438 <DIO_TogglePin+0x10>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	c9 f0       	breq	.+50     	; 0x464 <DIO_TogglePin+0x3c>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	11 f1       	breq	.+68     	; 0x47a <DIO_TogglePin+0x52>
 436:	08 95       	ret
	{
		case DIO_PORTA:
		Toggle_Bit(PORTA, pin);
 438:	2b b3       	in	r18, 0x1b	; 27
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_TogglePin+0x1c>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_TogglePin+0x18>
 448:	82 27       	eor	r24, r18
 44a:	8b bb       	out	0x1b, r24	; 27
		break;
 44c:	08 95       	ret
		
		case DIO_PORTB:
		Toggle_Bit(PORTB, pin);
 44e:	28 b3       	in	r18, 0x18	; 24
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_TogglePin+0x32>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_TogglePin+0x2e>
 45e:	82 27       	eor	r24, r18
 460:	88 bb       	out	0x18, r24	; 24
		break;
 462:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_Bit(PORTC, pin);
 464:	25 b3       	in	r18, 0x15	; 21
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_TogglePin+0x48>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	6a 95       	dec	r22
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_TogglePin+0x44>
 474:	82 27       	eor	r24, r18
 476:	85 bb       	out	0x15, r24	; 21
		break;
 478:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_Bit(PORTD, pin);
 47a:	22 b3       	in	r18, 0x12	; 18
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_TogglePin+0x5e>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_TogglePin+0x5a>
 48a:	82 27       	eor	r24, r18
 48c:	82 bb       	out	0x12, r24	; 18
 48e:	08 95       	ret

00000490 <EEPROM_WriteByte>:
    EECR |= EEPROM_INT<<EERIE;
}

void EEPROM_WriteByte(Uint16 Addr , Uint8 Data)
{
    while (EECR & 1<<EEWE);    // To Await previous write operation finish
 490:	e1 99       	sbic	0x1c, 1	; 28
 492:	fe cf       	rjmp	.-4      	; 0x490 <EEPROM_WriteByte>
    // Write data and address registers
    EEDR=Data;
 494:	6d bb       	out	0x1d, r22	; 29
    EARL=(Uint8)Addr;
 496:	8e bb       	out	0x1e, r24	; 30
    EARH=(Uint8)(Addr>>8);
 498:	9f bb       	out	0x1f, r25	; 31
    //EEAR=addr;
    // Start Write
    EECR |= (1<<EEMWE);
 49a:	8c b3       	in	r24, 0x1c	; 28
 49c:	84 60       	ori	r24, 0x04	; 4
 49e:	8c bb       	out	0x1c, r24	; 28
    EECR |= (1<<EEWE);
 4a0:	8c b3       	in	r24, 0x1c	; 28
 4a2:	82 60       	ori	r24, 0x02	; 2
 4a4:	8c bb       	out	0x1c, r24	; 28
 4a6:	08 95       	ret

000004a8 <EEPROM_ReadByte>:
}
Uint8  EEPROM_ReadByte(Uint16 Addr)
{
    EARL=(Uint8)Addr;
 4a8:	8e bb       	out	0x1e, r24	; 30
    EARH=(Uint8)(Addr>>8);
 4aa:	9f bb       	out	0x1f, r25	; 31
    EECR |= (1<<EERE);
 4ac:	8c b3       	in	r24, 0x1c	; 28
 4ae:	81 60       	ori	r24, 0x01	; 1
 4b0:	8c bb       	out	0x1c, r24	; 28
    return EEDR;
 4b2:	8d b3       	in	r24, 0x1d	; 29
}
 4b4:	08 95       	ret

000004b6 <EXT0_INT_Init>:

// EXT INT Functions
void EXT0_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 4b6:	8f b7       	in	r24, 0x3f	; 63
 4b8:	80 68       	ori	r24, 0x80	; 128
 4ba:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT0_INT << 6) | (GICR & 0XBF);
 4bc:	8b b7       	in	r24, 0x3b	; 59
 4be:	80 64       	ori	r24, 0x40	; 64
 4c0:	8b bf       	out	0x3b, r24	; 59
	
	// EXT0 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, DIO_PIN_2, DIO_PIN_IN);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	62 e0       	ldi	r22, 0x02	; 2
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	
	// EXT0 INT Trigger
	MCUCR = EXT0_INT_Trigger | (MCUCR & 0XFC);
 4cc:	85 b7       	in	r24, 0x35	; 53
 4ce:	83 60       	ori	r24, 0x03	; 3
 4d0:	85 bf       	out	0x35, r24	; 53
 4d2:	08 95       	ret

000004d4 <EXT1_INT_Init>:
}

void EXT1_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 4d4:	8f b7       	in	r24, 0x3f	; 63
 4d6:	80 68       	ori	r24, 0x80	; 128
 4d8:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT1_INT << 7) | (GICR & 0X7F);
 4da:	8b b7       	in	r24, 0x3b	; 59
 4dc:	80 68       	ori	r24, 0x80	; 128
 4de:	8b bf       	out	0x3b, r24	; 59
	
	// EXT1 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, DIO_PIN_3, DIO_PIN_IN);
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	63 e0       	ldi	r22, 0x03	; 3
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	
	// EXT1 INT Trigger
	MCUCR = EXT1_INT_Trigger | (MCUCR & 0XF3);
 4ea:	85 b7       	in	r24, 0x35	; 53
 4ec:	80 7f       	andi	r24, 0xF0	; 240
 4ee:	83 60       	ori	r24, 0x03	; 3
 4f0:	85 bf       	out	0x35, r24	; 53
 4f2:	08 95       	ret

000004f4 <EXT2_INT_Init>:
}

void EXT2_INT_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 4f4:	8f b7       	in	r24, 0x3f	; 63
 4f6:	80 68       	ori	r24, 0x80	; 128
 4f8:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	GICR = (EXT2_INT << 5) | (GICR & 0XDF);
 4fa:	8b b7       	in	r24, 0x3b	; 59
 4fc:	80 62       	ori	r24, 0x20	; 32
 4fe:	8b bf       	out	0x3b, r24	; 59
	
	// EXT2 INT Pin Direction
	DIO_SetPin_Dir(DIO_PORTB, DIO_PIN_2, DIO_PIN_IN);
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	62 e0       	ldi	r22, 0x02	; 2
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	
	// EXT2 INT Trigger
	MCUCSR = EXT2_INT_Trigger | (MCUCSR & 0XBF);
 50a:	84 b7       	in	r24, 0x34	; 52
 50c:	8e 7b       	andi	r24, 0xBE	; 190
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	84 bf       	out	0x34, r24	; 52
 512:	08 95       	ret

00000514 <LED0_Init>:
#include "LED.h"

//LED0 Functions
void LED0_Init(void)
{
	DIO_SetPin_Dir(LED0_Port, LED0_PIN, DIO_PIN_OUT);
 514:	41 e0       	ldi	r20, 0x01	; 1
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
 51e:	08 95       	ret

00000520 <LED0_ON>:
}
void LED0_ON(void)
{
	DIO_SetPin_Val(LED0_Port, LED0_PIN, DIO_PIN_ON);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 52a:	08 95       	ret

0000052c <LED0_OFF>:
}
void LED0_OFF(void)
{
	DIO_SetPin_Val(LED0_Port, LED0_PIN, DIO_PIN_OFF);
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 536:	08 95       	ret

00000538 <LED0_Toggle>:
}
void LED0_Toggle(void)
{
	DIO_TogglePin(LED0_Port, LED0_PIN);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 14 02 	call	0x428	; 0x428 <DIO_TogglePin>
 540:	08 95       	ret

00000542 <main>:
Uint8 Temp_Arr[10];
Uint8 Set_Temp=60;

int main(void)
{
	App_Init();
 542:	0e 94 69 00 	call	0xd2	; 0xd2 <App_Init>
	
	while(1)
	{
		switch (state)
 546:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	21 f0       	breq	.+8      	; 0x556 <main+0x14>
 54e:	30 f0       	brcs	.+12     	; 0x55c <main+0x1a>
 550:	82 30       	cpi	r24, 0x02	; 2
 552:	39 f0       	breq	.+14     	; 0x562 <main+0x20>
 554:	f8 cf       	rjmp	.-16     	; 0x546 <main+0x4>
		{
			case ON:
			State_On(); break;
 556:	0e 94 97 00 	call	0x12e	; 0x12e <State_On>
 55a:	f5 cf       	rjmp	.-22     	; 0x546 <main+0x4>
			case OFF:
			State_Off(); break;
 55c:	0e 94 86 00 	call	0x10c	; 0x10c <State_Off>
 560:	f2 cf       	rjmp	.-28     	; 0x546 <main+0x4>
			case SET:
			State_Set_Temp(); break;
 562:	0e 94 07 01 	call	0x20e	; 0x20e <State_Set_Temp>
 566:	ef cf       	rjmp	.-34     	; 0x546 <main+0x4>

00000568 <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
 568:	1f 92       	push	r1
 56a:	0f 92       	push	r0
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	0f 92       	push	r0
 570:	11 24       	eor	r1, r1
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
	state= !state;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end>
 57c:	91 11       	cpse	r25, r1
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
}
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
 58e:	1f 90       	pop	r1
 590:	18 95       	reti

00000592 <__vector_2>:

ISR(INT1_vect)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	2f 93       	push	r18
 59e:	3f 93       	push	r19
 5a0:	4f 93       	push	r20
 5a2:	5f 93       	push	r21
 5a4:	6f 93       	push	r22
 5a6:	7f 93       	push	r23
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	af 93       	push	r26
 5ae:	bf 93       	push	r27
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
	if (state==SET || state==ON)
 5b4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 5b8:	81 50       	subi	r24, 0x01	; 1
 5ba:	82 30       	cpi	r24, 0x02	; 2
 5bc:	d8 f4       	brcc	.+54     	; 0x5f4 <__vector_2+0x62>
	{
		state=SET;
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		Set_Temp += 5;
 5c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5c8:	8b 5f       	subi	r24, 0xFB	; 251
 5ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (Set_Temp>MAX_TEMP)
 5ce:	8c 34       	cpi	r24, 0x4C	; 76
 5d0:	18 f0       	brcs	.+6      	; 0x5d8 <__vector_2+0x46>
		{
			Set_Temp=MAX_TEMP;
 5d2:	8b e4       	ldi	r24, 0x4B	; 75
 5d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		EEPROM_WriteByte(Addr,Set_Temp);
 5d8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 48 02 	call	0x490	; 0x490 <EEPROM_WriteByte>
		T0_Delay(T_Set);
 5e4:	68 e8       	ldi	r22, 0x88	; 136
 5e6:	73 e1       	ldi	r23, 0x13	; 19
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 44 04 	call	0x888	; 0x888 <T0_Delay>
		T0_Start();
 5f0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <T0_Start>
	}

}
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__vector_3>:

ISR(INT2_vect)
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
	if (state==SET || state==ON)
 638:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 63c:	81 50       	subi	r24, 0x01	; 1
 63e:	82 30       	cpi	r24, 0x02	; 2
 640:	d8 f4       	brcc	.+54     	; 0x678 <__vector_3+0x62>
	{
		state=SET;
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		Set_Temp -= 5;
 648:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 64c:	85 50       	subi	r24, 0x05	; 5
 64e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (Set_Temp<MIN_TEMP)
 652:	83 32       	cpi	r24, 0x23	; 35
 654:	18 f4       	brcc	.+6      	; 0x65c <__vector_3+0x46>
		{
			Set_Temp=MIN_TEMP;
 656:	83 e2       	ldi	r24, 0x23	; 35
 658:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		EEPROM_WriteByte(Addr,Set_Temp);
 65c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 48 02 	call	0x490	; 0x490 <EEPROM_WriteByte>
		T0_Delay(T_Set);
 668:	68 e8       	ldi	r22, 0x88	; 136
 66a:	73 e1       	ldi	r23, 0x13	; 19
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 44 04 	call	0x888	; 0x888 <T0_Delay>
		T0_Start();
 674:	0e 94 6e 04 	call	0x8dc	; 0x8dc <T0_Start>
	}

 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	bf 91       	pop	r27
 67e:	af 91       	pop	r26
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	7f 91       	pop	r23
 686:	6f 91       	pop	r22
 688:	5f 91       	pop	r21
 68a:	4f 91       	pop	r20
 68c:	3f 91       	pop	r19
 68e:	2f 91       	pop	r18
 690:	0f 90       	pop	r0
 692:	0f be       	out	0x3f, r0	; 63
 694:	0f 90       	pop	r0
 696:	1f 90       	pop	r1
 698:	18 95       	reti

0000069a <Relay0_Init>:
{
	DIO_SetPin_Val(Relay0_Port, Relay0_PIN, DIO_PIN_OFF);
}
void Relay0_Toggle(void)
{
	DIO_TogglePin(Relay0_Port, Relay0_PIN);
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	65 e0       	ldi	r22, 0x05	; 5
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
 6a4:	08 95       	ret

000006a6 <Relay0_ON>:
 6a6:	41 e0       	ldi	r20, 0x01	; 1
 6a8:	65 e0       	ldi	r22, 0x05	; 5
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 6b0:	08 95       	ret

000006b2 <Relay0_OFF>:
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	65 e0       	ldi	r22, 0x05	; 5
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 6bc:	08 95       	ret

000006be <Relay1_Init>:
}
//Relay1 Functions
void Relay1_Init(void)
{
	DIO_SetPin_Dir(Relay1_Port, Relay1_PIN, DIO_PIN_OUT);
 6be:	41 e0       	ldi	r20, 0x01	; 1
 6c0:	64 e0       	ldi	r22, 0x04	; 4
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
 6c8:	08 95       	ret

000006ca <Relay1_ON>:
}
void Relay1_ON(void)
{
	DIO_SetPin_Val(Relay1_Port, Relay1_PIN, DIO_PIN_ON);
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	64 e0       	ldi	r22, 0x04	; 4
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 6d4:	08 95       	ret

000006d6 <Relay1_OFF>:
}
void Relay1_OFF(void)
{
	DIO_SetPin_Val(Relay1_Port, Relay1_PIN, DIO_PIN_OFF);
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	64 e0       	ldi	r22, 0x04	; 4
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 6e0:	08 95       	ret

000006e2 <S7_Init>:
// S7 Functions
Uint8 Nums[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
void S7_Init(void)
{
	// S7 Data Pins Direction
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN0, DIO_PIN_OUT);
 6e2:	41 e0       	ldi	r20, 0x01	; 1
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN1, DIO_PIN_OUT);
 6ec:	41 e0       	ldi	r20, 0x01	; 1
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN2, DIO_PIN_OUT);
 6f6:	41 e0       	ldi	r20, 0x01	; 1
 6f8:	62 e0       	ldi	r22, 0x02	; 2
 6fa:	82 e0       	ldi	r24, 0x02	; 2
 6fc:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN3, DIO_PIN_OUT);
 700:	41 e0       	ldi	r20, 0x01	; 1
 702:	63 e0       	ldi	r22, 0x03	; 3
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN4, DIO_PIN_OUT);
 70a:	41 e0       	ldi	r20, 0x01	; 1
 70c:	64 e0       	ldi	r22, 0x04	; 4
 70e:	82 e0       	ldi	r24, 0x02	; 2
 710:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN5, DIO_PIN_OUT);
 714:	41 e0       	ldi	r20, 0x01	; 1
 716:	65 e0       	ldi	r22, 0x05	; 5
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN6, DIO_PIN_OUT);
 71e:	41 e0       	ldi	r20, 0x01	; 1
 720:	66 e0       	ldi	r22, 0x06	; 6
 722:	82 e0       	ldi	r24, 0x02	; 2
 724:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	
	// S7 Data Pins Direction
	DIO_SetPin_Dir(S7_Control_Port, S7_E1_PIN, DIO_PIN_OUT);
 728:	41 e0       	ldi	r20, 0x01	; 1
 72a:	61 e0       	ldi	r22, 0x01	; 1
 72c:	83 e0       	ldi	r24, 0x03	; 3
 72e:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Control_Port, S7_E2_PIN, DIO_PIN_OUT);
 732:	41 e0       	ldi	r20, 0x01	; 1
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	83 e0       	ldi	r24, 0x03	; 3
 738:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	
	// S7 DP Pin Direction
	DIO_SetPin_Dir(S7_DP_Port, S7_DP_PIN, DIO_PIN_OUT);
 73c:	41 e0       	ldi	r20, 0x01	; 1
 73e:	66 e0       	ldi	r22, 0x06	; 6
 740:	83 e0       	ldi	r24, 0x03	; 3
 742:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	
	// S7 Data Pins Value
	DIO_SetPin_Val(S7_Data_Port, S7_Data_PIN0, DIO_PIN_ON);
 746:	41 e0       	ldi	r20, 0x01	; 1
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Data_Port, S7_Data_PIN1, DIO_PIN_ON);
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Data_Port, S7_Data_PIN2, DIO_PIN_ON);
 75a:	41 e0       	ldi	r20, 0x01	; 1
 75c:	62 e0       	ldi	r22, 0x02	; 2
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Data_Port, S7_Data_PIN3, DIO_PIN_ON);
 764:	41 e0       	ldi	r20, 0x01	; 1
 766:	63 e0       	ldi	r22, 0x03	; 3
 768:	82 e0       	ldi	r24, 0x02	; 2
 76a:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN4, DIO_PIN_ON);
 76e:	41 e0       	ldi	r20, 0x01	; 1
 770:	64 e0       	ldi	r22, 0x04	; 4
 772:	82 e0       	ldi	r24, 0x02	; 2
 774:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN5, DIO_PIN_ON);
 778:	41 e0       	ldi	r20, 0x01	; 1
 77a:	65 e0       	ldi	r22, 0x05	; 5
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	DIO_SetPin_Dir(S7_Data_Port, S7_Data_PIN6, DIO_PIN_ON);
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	66 e0       	ldi	r22, 0x06	; 6
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPin_Dir>
	
	// S7 Enable & DP Pins Value
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_ON);
 78c:	41 e0       	ldi	r20, 0x01	; 1
 78e:	61 e0       	ldi	r22, 0x01	; 1
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_ON);
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	83 e0       	ldi	r24, 0x03	; 3
 79c:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_DP_Port, S7_DP_PIN, DIO_PIN_ON);
 7a0:	41 e0       	ldi	r20, 0x01	; 1
 7a2:	66 e0       	ldi	r22, 0x06	; 6
 7a4:	83 e0       	ldi	r24, 0x03	; 3
 7a6:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 7aa:	08 95       	ret

000007ac <S7_Display>:
	
}
void S7_Display(Uint8 data)
{
 7ac:	cf 93       	push	r28
	Uint8 Ones = 0, Tens = 0;
	data = (data >= 0) && (data < 100) ? data : 0;
 7ae:	84 36       	cpi	r24, 0x64	; 100
 7b0:	08 f0       	brcs	.+2      	; 0x7b4 <S7_Display+0x8>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
	Ones = data % 10;
 7b4:	ed ec       	ldi	r30, 0xCD	; 205
 7b6:	8e 9f       	mul	r24, r30
 7b8:	e1 2d       	mov	r30, r1
 7ba:	11 24       	eor	r1, r1
 7bc:	9e 2f       	mov	r25, r30
 7be:	96 95       	lsr	r25
 7c0:	96 95       	lsr	r25
 7c2:	96 95       	lsr	r25
 7c4:	99 0f       	add	r25, r25
 7c6:	29 2f       	mov	r18, r25
 7c8:	22 0f       	add	r18, r18
 7ca:	22 0f       	add	r18, r18
 7cc:	92 0f       	add	r25, r18
 7ce:	89 1b       	sub	r24, r25
	Tens = data / 10;
 7d0:	ce 2f       	mov	r28, r30
 7d2:	c6 95       	lsr	r28
 7d4:	c6 95       	lsr	r28
 7d6:	c6 95       	lsr	r28
	S7_Data_Bus  = Nums[Ones];
 7d8:	e8 2f       	mov	r30, r24
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	ef 59       	subi	r30, 0x9F	; 159
 7de:	ff 4f       	sbci	r31, 0xFF	; 255
 7e0:	80 81       	ld	r24, Z
 7e2:	85 bb       	out	0x15, r24	; 21
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_OFF);
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_ON);
 7ee:	41 e0       	ldi	r20, 0x01	; 1
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	83 e0       	ldi	r24, 0x03	; 3
 7f4:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7f8:	8f e1       	ldi	r24, 0x1F	; 31
 7fa:	9e e4       	ldi	r25, 0x4E	; 78
 7fc:	01 97       	sbiw	r24, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <S7_Display+0x50>
 800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 802:	00 00       	nop
	_delay_ms(5);
	S7_Data_Bus  = Nums[Tens];
 804:	ec 2f       	mov	r30, r28
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	ef 59       	subi	r30, 0x9F	; 159
 80a:	ff 4f       	sbci	r31, 0xFF	; 255
 80c:	80 81       	ld	r24, Z
 80e:	85 bb       	out	0x15, r24	; 21
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_ON);
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	83 e0       	ldi	r24, 0x03	; 3
 816:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_OFF);
 81a:	40 e0       	ldi	r20, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	83 e0       	ldi	r24, 0x03	; 3
 820:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 824:	8f e1       	ldi	r24, 0x1F	; 31
 826:	9e e4       	ldi	r25, 0x4E	; 78
 828:	01 97       	sbiw	r24, 0x01	; 1
 82a:	f1 f7       	brne	.-4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82e:	00 00       	nop
	_delay_ms(5);
}
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <S7_Turn_Off>:

void S7_Turn_Off()
{
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_ON);
 834:	41 e0       	ldi	r20, 0x01	; 1
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	83 e0       	ldi	r24, 0x03	; 3
 83a:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_ON);
 83e:	41 e0       	ldi	r20, 0x01	; 1
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	83 e0       	ldi	r24, 0x03	; 3
 844:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 848:	08 95       	ret

0000084a <S7_Turn_ON>:
}
void S7_Turn_ON()
{
	DIO_SetPin_Val(S7_Control_Port, S7_E1_PIN, DIO_PIN_OFF);
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	61 e0       	ldi	r22, 0x01	; 1
 84e:	83 e0       	ldi	r24, 0x03	; 3
 850:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
	DIO_SetPin_Val(S7_Control_Port, S7_E2_PIN, DIO_PIN_OFF);
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	83 e0       	ldi	r24, 0x03	; 3
 85a:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPin_Val>
 85e:	08 95       	ret

00000860 <S7_Toggle>:
}
void S7_Toggle()
{
	DIO_TogglePin(S7_Control_Port, S7_E1_PIN);
 860:	61 e0       	ldi	r22, 0x01	; 1
 862:	83 e0       	ldi	r24, 0x03	; 3
 864:	0e 94 14 02 	call	0x428	; 0x428 <DIO_TogglePin>
	DIO_TogglePin(S7_Control_Port, S7_E2_PIN);
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	83 e0       	ldi	r24, 0x03	; 3
 86c:	0e 94 14 02 	call	0x428	; 0x428 <DIO_TogglePin>
 870:	08 95       	ret

00000872 <T0_Init>:

// Timer0 Functions
void T0_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 872:	8f b7       	in	r24, 0x3f	; 63
 874:	80 68       	ori	r24, 0x80	; 128
 876:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	TIMSK = (T0_OVF_INT) | (T0_OCF_INT << 1) | (TIMSK & 0XFC);
 878:	89 b7       	in	r24, 0x39	; 57
 87a:	8c 7f       	andi	r24, 0xFC	; 252
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	89 bf       	out	0x39, r24	; 57
	
	// Timer0 Mode
	TCCR0 = (Get_Bit(Timer0_Mode, 0) << 6) | (Get_Bit(Timer0_Mode, 1) << 3) | (TCCR0 & 0XB7);
 880:	83 b7       	in	r24, 0x33	; 51
 882:	87 7b       	andi	r24, 0xB7	; 183
 884:	83 bf       	out	0x33, r24	; 51
 886:	08 95       	ret

00000888 <T0_Delay>:
	
}
void T0_Delay(Uint32 delay_ms)
{
 888:	0f 93       	push	r16
 88a:	1f 93       	push	r17
 88c:	9b 01       	movw	r18, r22
 88e:	ac 01       	movw	r20, r24
	f32 Tick_Time_us = (f32)(Timer0_PreSC) / F_OSC_MHZ;
	Uint32 Tick_num = (delay_ms * 1000)/ Tick_Time_us;
 890:	a8 ee       	ldi	r26, 0xE8	; 232
 892:	b3 e0       	ldi	r27, 0x03	; 3
 894:	0e 94 83 07 	call	0xf06	; 0xf06 <__muluhisi3>
 898:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__floatunsisf>
 89c:	20 e0       	ldi	r18, 0x00	; 0
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	40 e8       	ldi	r20, 0x80	; 128
 8a2:	5c e3       	ldi	r21, 0x3C	; 60
 8a4:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 8a8:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fixunssfsi>
	
	#if Timer0_Mode == T0_OVF
	
	T0_OVF_num = Tick_num % 256 ? (Tick_num / 256) + 1 : (Tick_num / 256);
 8ac:	66 23       	and	r22, r22
 8ae:	39 f0       	breq	.+14     	; 0x8be <T0_Delay+0x36>
 8b0:	07 2f       	mov	r16, r23
 8b2:	18 2f       	mov	r17, r24
 8b4:	29 2f       	mov	r18, r25
 8b6:	33 27       	eor	r19, r19
 8b8:	0f 5f       	subi	r16, 0xFF	; 255
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <T0_Delay+0x3e>
 8be:	07 2f       	mov	r16, r23
 8c0:	18 2f       	mov	r17, r24
 8c2:	29 2f       	mov	r18, r25
 8c4:	33 27       	eor	r19, r19
 8c6:	10 93 8b 00 	sts	0x008B, r17	; 0x80008b <T0_OVF_num+0x1>
 8ca:	00 93 8a 00 	sts	0x008A, r16	; 0x80008a <T0_OVF_num>
	
	T0_OVF_Init_val = 256 - (Tick_num % 256);
 8ce:	61 95       	neg	r22
 8d0:	60 93 87 00 	sts	0x0087, r22	; 0x800087 <T0_OVF_Init_val>
	TCNT0 = T0_OVF_Init_val;
 8d4:	62 bf       	out	0x32, r22	; 50
	
	T0_OCF_Init_val = (Tick_num % 256) - 1;
	OCR0 = T0_OCF_Init_val;

	#endif
}
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	08 95       	ret

000008dc <T0_Start>:
void T0_Start(void)
{
	TCCR0 = Timer0_CLK | (TCCR0 & 0XF8);
 8dc:	83 b7       	in	r24, 0x33	; 51
 8de:	88 7f       	andi	r24, 0xF8	; 248
 8e0:	85 60       	ori	r24, 0x05	; 5
 8e2:	83 bf       	out	0x33, r24	; 51
 8e4:	08 95       	ret

000008e6 <T0_Stop>:
}
void T0_Stop(void)
{
	TCCR0 &= 0XF8;		//	   1 1 0 1 | 0 1 0 1
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	88 7f       	andi	r24, 0xF8	; 248
 8ea:	83 bf       	out	0x33, r24	; 51
 8ec:	08 95       	ret

000008ee <__vector_11>:
	//     -----------------
	//     1 1 0 1 | 0 0 0 0
}

ISR(TIMER0_OVF_vect)
{
 8ee:	1f 92       	push	r1
 8f0:	0f 92       	push	r0
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	0f 92       	push	r0
 8f6:	11 24       	eor	r1, r1
 8f8:	2f 93       	push	r18
 8fa:	3f 93       	push	r19
 8fc:	4f 93       	push	r20
 8fe:	5f 93       	push	r21
 900:	6f 93       	push	r22
 902:	7f 93       	push	r23
 904:	8f 93       	push	r24
 906:	9f 93       	push	r25
 908:	af 93       	push	r26
 90a:	bf 93       	push	r27
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	ef 93       	push	r30
 912:	ff 93       	push	r31
	static Uint32 count = 0;
	count++;
 914:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count.1872>
 918:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count.1872+0x1>
 91c:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <count.1872+0x2>
 920:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <count.1872+0x3>
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	a1 1d       	adc	r26, r1
 928:	b1 1d       	adc	r27, r1
 92a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count.1872>
 92e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <count.1872+0x1>
 932:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <count.1872+0x2>
 936:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <count.1872+0x3>
	if (count == T0_OVF_num)
 93a:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <T0_OVF_num>
 93e:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <T0_OVF_num+0x1>
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	84 17       	cp	r24, r20
 948:	95 07       	cpc	r25, r21
 94a:	a6 07       	cpc	r26, r22
 94c:	b7 07       	cpc	r27, r23
 94e:	09 f0       	breq	.+2      	; 0x952 <__vector_11+0x64>
 950:	50 c0       	rjmp	.+160    	; 0x9f2 <__vector_11+0x104>
	{
		// --------------------------------------
		//------------------------------------------------
		if (state==SET)
 952:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 956:	82 30       	cpi	r24, 0x02	; 2
 958:	21 f4       	brne	.+8      	; 0x962 <__vector_11+0x74>
		{
			state=ON;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 960:	38 c0       	rjmp	.+112    	; 0x9d2 <__vector_11+0xe4>
		}
		else if (state==ON)
 962:	81 30       	cpi	r24, 0x01	; 1
 964:	b1 f5       	brne	.+108    	; 0x9d2 <__vector_11+0xe4>
		{
			static Uint8 c=0;
			Temp_Arr[c%10]=Temp_Sensor_Read();
 966:	c0 91 79 00 	lds	r28, 0x0079	; 0x800079 <c.1873>
 96a:	8d ec       	ldi	r24, 0xCD	; 205
 96c:	c8 9f       	mul	r28, r24
 96e:	81 2d       	mov	r24, r1
 970:	11 24       	eor	r1, r1
 972:	86 95       	lsr	r24
 974:	86 95       	lsr	r24
 976:	86 95       	lsr	r24
 978:	88 0f       	add	r24, r24
 97a:	98 2f       	mov	r25, r24
 97c:	99 0f       	add	r25, r25
 97e:	99 0f       	add	r25, r25
 980:	89 0f       	add	r24, r25
 982:	c8 1b       	sub	r28, r24
 984:	d0 e0       	ldi	r29, 0x00	; 0
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 98c:	bc 01       	movw	r22, r24
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__floatunsisf>
 996:	20 e0       	ldi	r18, 0x00	; 0
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	4a ef       	ldi	r20, 0xFA	; 250
 99c:	5e e3       	ldi	r21, 0x3E	; 62
 99e:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 9a2:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fixunssfsi>
 9a6:	c3 57       	subi	r28, 0x73	; 115
 9a8:	df 4f       	sbci	r29, 0xFF	; 255
 9aa:	68 83       	st	Y, r22
			c++;
 9ac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <c.1873>
 9b0:	8f 5f       	subi	r24, 0xFF	; 255
 9b2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <c.1873>
			Avg_Temp=AVG(Temp_Arr);
 9b6:	8d e8       	ldi	r24, 0x8D	; 141
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 19 01 	call	0x232	; 0x232 <AVG>
 9be:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <Avg_Temp>
			T0_Delay(T_Temp);
 9c2:	64 e6       	ldi	r22, 0x64	; 100
 9c4:	70 e0       	ldi	r23, 0x00	; 0
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 44 04 	call	0x888	; 0x888 <T0_Delay>
			T0_Start();
 9ce:	0e 94 6e 04 	call	0x8dc	; 0x8dc <T0_Start>
		//----------------------
		//---------------------------------------
		
		
		
		T0_G_Val++;
 9d2:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <T0_G_Val>
 9d6:	8f 5f       	subi	r24, 0xFF	; 255
 9d8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <T0_G_Val>
		count = 0;
 9dc:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <count.1872>
 9e0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <count.1872+0x1>
 9e4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <count.1872+0x2>
 9e8:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <count.1872+0x3>
		TCNT0 = T0_OVF_Init_val;
 9ec:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <T0_OVF_Init_val>
 9f0:	82 bf       	out	0x32, r24	; 50
	}
	
}
 9f2:	ff 91       	pop	r31
 9f4:	ef 91       	pop	r30
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	bf 91       	pop	r27
 9fc:	af 91       	pop	r26
 9fe:	9f 91       	pop	r25
 a00:	8f 91       	pop	r24
 a02:	7f 91       	pop	r23
 a04:	6f 91       	pop	r22
 a06:	5f 91       	pop	r21
 a08:	4f 91       	pop	r20
 a0a:	3f 91       	pop	r19
 a0c:	2f 91       	pop	r18
 a0e:	0f 90       	pop	r0
 a10:	0f be       	out	0x3f, r0	; 63
 a12:	0f 90       	pop	r0
 a14:	1f 90       	pop	r1
 a16:	18 95       	reti

00000a18 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 a18:	1f 92       	push	r1
 a1a:	0f 92       	push	r0
 a1c:	0f b6       	in	r0, 0x3f	; 63
 a1e:	0f 92       	push	r0
 a20:	11 24       	eor	r1, r1
 a22:	4f 93       	push	r20
 a24:	5f 93       	push	r21
 a26:	6f 93       	push	r22
 a28:	7f 93       	push	r23
 a2a:	8f 93       	push	r24
 a2c:	9f 93       	push	r25
 a2e:	af 93       	push	r26
 a30:	bf 93       	push	r27
	static Uint32 count = 0;
	count++;
 a32:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count.1879>
 a36:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <count.1879+0x1>
 a3a:	a0 91 77 00 	lds	r26, 0x0077	; 0x800077 <count.1879+0x2>
 a3e:	b0 91 78 00 	lds	r27, 0x0078	; 0x800078 <count.1879+0x3>
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	a1 1d       	adc	r26, r1
 a46:	b1 1d       	adc	r27, r1
 a48:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <count.1879>
 a4c:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <count.1879+0x1>
 a50:	a0 93 77 00 	sts	0x0077, r26	; 0x800077 <count.1879+0x2>
 a54:	b0 93 78 00 	sts	0x0078, r27	; 0x800078 <count.1879+0x3>
	if (count == T0_OCF_num)
 a58:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <T0_OCF_num>
 a5c:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <T0_OCF_num+0x1>
 a60:	60 e0       	ldi	r22, 0x00	; 0
 a62:	70 e0       	ldi	r23, 0x00	; 0
 a64:	84 17       	cp	r24, r20
 a66:	95 07       	cpc	r25, r21
 a68:	a6 07       	cpc	r26, r22
 a6a:	b7 07       	cpc	r27, r23
 a6c:	89 f4       	brne	.+34     	; 0xa90 <__vector_10+0x78>
	{
		// Write your code here
		T0_G_Val++;
 a6e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <T0_G_Val>
 a72:	8f 5f       	subi	r24, 0xFF	; 255
 a74:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <T0_G_Val>
		
		
		count = 0;
 a78:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count.1879>
 a7c:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <count.1879+0x1>
 a80:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <count.1879+0x2>
 a84:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <count.1879+0x3>
		OCR0 = T0_OCF_Init_val;
 a88:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <T0_OCF_Init_val>
 a8c:	8c bf       	out	0x3c, r24	; 60
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <__vector_10+0x7c>
	}
	else
	OCR0 = 255;
 a90:	8f ef       	ldi	r24, 0xFF	; 255
 a92:	8c bf       	out	0x3c, r24	; 60
}
 a94:	bf 91       	pop	r27
 a96:	af 91       	pop	r26
 a98:	9f 91       	pop	r25
 a9a:	8f 91       	pop	r24
 a9c:	7f 91       	pop	r23
 a9e:	6f 91       	pop	r22
 aa0:	5f 91       	pop	r21
 aa2:	4f 91       	pop	r20
 aa4:	0f 90       	pop	r0
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	0f 90       	pop	r0
 aaa:	1f 90       	pop	r1
 aac:	18 95       	reti

00000aae <T2_Init>:

// Timer2 Functions
void T2_Init(void)
{
	// Global Enable/ Disable Interrupt
	SREG = (Global_INT << 7) | (SREG & 0X7F);
 aae:	8f b7       	in	r24, 0x3f	; 63
 ab0:	80 68       	ori	r24, 0x80	; 128
 ab2:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Enable/ Disable Interrupt
	TIMSK = (T2_OVF_INT << 6) | (T2_OCF_INT << 7) | (TIMSK & 0X3F);
 ab4:	89 b7       	in	r24, 0x39	; 57
 ab6:	8f 73       	andi	r24, 0x3F	; 63
 ab8:	80 64       	ori	r24, 0x40	; 64
 aba:	89 bf       	out	0x39, r24	; 57
	
	// Timer2 Mode
	TCCR2 = (Get_Bit(Timer2_Mode, 0) << 6) | (Get_Bit(Timer2_Mode, 1) << 3) | (TCCR2 & 0XB7);
 abc:	85 b5       	in	r24, 0x25	; 37
 abe:	87 7b       	andi	r24, 0xB7	; 183
 ac0:	85 bd       	out	0x25, r24	; 37
 ac2:	08 95       	ret

00000ac4 <T2_Delay>:
}
void T2_Delay(Uint32 delay_ms)
{
 ac4:	0f 93       	push	r16
 ac6:	1f 93       	push	r17
 ac8:	9b 01       	movw	r18, r22
 aca:	ac 01       	movw	r20, r24
	f32 Tick_Time_us = (f32)(Timer2_PreSC) / F_OSC_MHZ;
	Uint32 Tick_num = (delay_ms * 1000)/ Tick_Time_us;
 acc:	a8 ee       	ldi	r26, 0xE8	; 232
 ace:	b3 e0       	ldi	r27, 0x03	; 3
 ad0:	0e 94 83 07 	call	0xf06	; 0xf06 <__muluhisi3>
 ad4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__floatunsisf>
 ad8:	20 e0       	ldi	r18, 0x00	; 0
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	40 e8       	ldi	r20, 0x80	; 128
 ade:	5c e3       	ldi	r21, 0x3C	; 60
 ae0:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 ae4:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fixunssfsi>
	
	#if Timer2_Mode == T2_OVF
	
	T2_OVF_num = Tick_num % 256 ? (Tick_num / 256) + 1 : (Tick_num / 256);
 ae8:	66 23       	and	r22, r22
 aea:	39 f0       	breq	.+14     	; 0xafa <T2_Delay+0x36>
 aec:	07 2f       	mov	r16, r23
 aee:	18 2f       	mov	r17, r24
 af0:	29 2f       	mov	r18, r25
 af2:	33 27       	eor	r19, r19
 af4:	0f 5f       	subi	r16, 0xFF	; 255
 af6:	1f 4f       	sbci	r17, 0xFF	; 255
 af8:	04 c0       	rjmp	.+8      	; 0xb02 <T2_Delay+0x3e>
 afa:	07 2f       	mov	r16, r23
 afc:	18 2f       	mov	r17, r24
 afe:	29 2f       	mov	r18, r25
 b00:	33 27       	eor	r19, r19
 b02:	10 93 84 00 	sts	0x0084, r17	; 0x800084 <T2_OVF_num+0x1>
 b06:	00 93 83 00 	sts	0x0083, r16	; 0x800083 <T2_OVF_num>
	
	T2_OVF_Init_val = 256 - (Tick_num % 256);
 b0a:	61 95       	neg	r22
 b0c:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <T2_OVF_Init_val>
	TCNT2 = T2_OVF_Init_val;
 b10:	64 bd       	out	0x24, r22	; 36
	
	T2_OCF_Init_val = (Tick_num % 256) - 1;
	OCR2 = T2_OCF_Init_val;

	#endif
}
 b12:	1f 91       	pop	r17
 b14:	0f 91       	pop	r16
 b16:	08 95       	ret

00000b18 <T2_Start>:
void T2_Start(void)
{
	TCCR2 = Timer2_CLK | (TCCR2 & 0XF8);
 b18:	85 b5       	in	r24, 0x25	; 37
 b1a:	87 60       	ori	r24, 0x07	; 7
 b1c:	85 bd       	out	0x25, r24	; 37
 b1e:	08 95       	ret

00000b20 <T2_Stop>:
}
void T2_Stop(void)
{
	TCCR2 &= 0XF8;		//	   1 1 0 1 | 0 1 0 1
 b20:	85 b5       	in	r24, 0x25	; 37
 b22:	88 7f       	andi	r24, 0xF8	; 248
 b24:	85 bd       	out	0x25, r24	; 37
 b26:	08 95       	ret

00000b28 <__vector_5>:
	//     -----------------
	//     1 1 0 1 | 0 0 0 0
}

ISR(TIMER2_OVF_vect)
{
 b28:	1f 92       	push	r1
 b2a:	0f 92       	push	r0
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	0f 92       	push	r0
 b30:	11 24       	eor	r1, r1
 b32:	2f 93       	push	r18
 b34:	3f 93       	push	r19
 b36:	4f 93       	push	r20
 b38:	5f 93       	push	r21
 b3a:	6f 93       	push	r22
 b3c:	7f 93       	push	r23
 b3e:	8f 93       	push	r24
 b40:	9f 93       	push	r25
 b42:	af 93       	push	r26
 b44:	bf 93       	push	r27
 b46:	ef 93       	push	r30
 b48:	ff 93       	push	r31
	static Uint32 count = 0;
	count++;
 b4a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <count.1899>
 b4e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <count.1899+0x1>
 b52:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <count.1899+0x2>
 b56:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <count.1899+0x3>
 b5a:	01 96       	adiw	r24, 0x01	; 1
 b5c:	a1 1d       	adc	r26, r1
 b5e:	b1 1d       	adc	r27, r1
 b60:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <count.1899>
 b64:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <count.1899+0x1>
 b68:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <count.1899+0x2>
 b6c:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <count.1899+0x3>
	if (count == T2_OVF_num)
 b70:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <T2_OVF_num>
 b74:	50 91 84 00 	lds	r21, 0x0084	; 0x800084 <T2_OVF_num+0x1>
 b78:	60 e0       	ldi	r22, 0x00	; 0
 b7a:	70 e0       	ldi	r23, 0x00	; 0
 b7c:	84 17       	cp	r24, r20
 b7e:	95 07       	cpc	r25, r21
 b80:	a6 07       	cpc	r26, r22
 b82:	b7 07       	cpc	r27, r23
 b84:	59 f5       	brne	.+86     	; 0xbdc <__vector_5+0xb4>
	{

		//--------------
		if(state==ON)
 b86:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 b8a:	81 30       	cpi	r24, 0x01	; 1
 b8c:	59 f4       	brne	.+22     	; 0xba4 <__vector_5+0x7c>
		{
			LED0_Toggle();
 b8e:	0e 94 9c 02 	call	0x538	; 0x538 <LED0_Toggle>

			T2_Delay(T_Blink);
 b92:	68 ee       	ldi	r22, 0xE8	; 232
 b94:	73 e0       	ldi	r23, 0x03	; 3
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	0e 94 62 05 	call	0xac4	; 0xac4 <T2_Delay>
			T2_Start();
 b9e:	0e 94 8c 05 	call	0xb18	; 0xb18 <T2_Start>
 ba2:	0c c0       	rjmp	.+24     	; 0xbbc <__vector_5+0x94>
		}
		else if (state==SET)
 ba4:	82 30       	cpi	r24, 0x02	; 2
 ba6:	51 f4       	brne	.+20     	; 0xbbc <__vector_5+0x94>
		{
			S7_Toggle();
 ba8:	0e 94 30 04 	call	0x860	; 0x860 <S7_Toggle>
			T2_Delay(T_Blink);
 bac:	68 ee       	ldi	r22, 0xE8	; 232
 bae:	73 e0       	ldi	r23, 0x03	; 3
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 62 05 	call	0xac4	; 0xac4 <T2_Delay>
			T2_Start();
 bb8:	0e 94 8c 05 	call	0xb18	; 0xb18 <T2_Start>
		//--------------
		
		
		
		
		T2_G_Val++;
 bbc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <T2_G_Val>
 bc0:	8f 5f       	subi	r24, 0xFF	; 255
 bc2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <T2_G_Val>
		count = 0;
 bc6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count.1899>
 bca:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <count.1899+0x1>
 bce:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <count.1899+0x2>
 bd2:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <count.1899+0x3>
		TCNT2 = T2_OVF_Init_val;
 bd6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <T2_OVF_Init_val>
 bda:	84 bd       	out	0x24, r24	; 36
	}
	
}
 bdc:	ff 91       	pop	r31
 bde:	ef 91       	pop	r30
 be0:	bf 91       	pop	r27
 be2:	af 91       	pop	r26
 be4:	9f 91       	pop	r25
 be6:	8f 91       	pop	r24
 be8:	7f 91       	pop	r23
 bea:	6f 91       	pop	r22
 bec:	5f 91       	pop	r21
 bee:	4f 91       	pop	r20
 bf0:	3f 91       	pop	r19
 bf2:	2f 91       	pop	r18
 bf4:	0f 90       	pop	r0
 bf6:	0f be       	out	0x3f, r0	; 63
 bf8:	0f 90       	pop	r0
 bfa:	1f 90       	pop	r1
 bfc:	18 95       	reti

00000bfe <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 bfe:	1f 92       	push	r1
 c00:	0f 92       	push	r0
 c02:	0f b6       	in	r0, 0x3f	; 63
 c04:	0f 92       	push	r0
 c06:	11 24       	eor	r1, r1
 c08:	4f 93       	push	r20
 c0a:	5f 93       	push	r21
 c0c:	6f 93       	push	r22
 c0e:	7f 93       	push	r23
 c10:	8f 93       	push	r24
 c12:	9f 93       	push	r25
 c14:	af 93       	push	r26
 c16:	bf 93       	push	r27
	static Uint32 count = 0;
	count++;
 c18:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <count.1905>
 c1c:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <count.1905+0x1>
 c20:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <count.1905+0x2>
 c24:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <count.1905+0x3>
 c28:	01 96       	adiw	r24, 0x01	; 1
 c2a:	a1 1d       	adc	r26, r1
 c2c:	b1 1d       	adc	r27, r1
 c2e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <count.1905>
 c32:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <count.1905+0x1>
 c36:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <count.1905+0x2>
 c3a:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <count.1905+0x3>
	if (count == T2_OCF_num)
 c3e:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <T2_OCF_num>
 c42:	50 91 82 00 	lds	r21, 0x0082	; 0x800082 <T2_OCF_num+0x1>
 c46:	60 e0       	ldi	r22, 0x00	; 0
 c48:	70 e0       	ldi	r23, 0x00	; 0
 c4a:	84 17       	cp	r24, r20
 c4c:	95 07       	cpc	r25, r21
 c4e:	a6 07       	cpc	r26, r22
 c50:	b7 07       	cpc	r27, r23
 c52:	89 f4       	brne	.+34     	; 0xc76 <__vector_4+0x78>
	{
		// Write your code here
		T2_G_Val++;
 c54:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <T2_G_Val>
 c58:	8f 5f       	subi	r24, 0xFF	; 255
 c5a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <T2_G_Val>
		
		
		count = 0;
 c5e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <count.1905>
 c62:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <count.1905+0x1>
 c66:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <count.1905+0x2>
 c6a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <count.1905+0x3>
		OCR2 = T2_OCF_Init_val;
 c6e:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <T2_OCF_Init_val>
 c72:	83 bd       	out	0x23, r24	; 35
 c74:	02 c0       	rjmp	.+4      	; 0xc7a <__vector_4+0x7c>
	}
	else
	OCR2 = 255;
 c76:	8f ef       	ldi	r24, 0xFF	; 255
 c78:	83 bd       	out	0x23, r24	; 35
}
 c7a:	bf 91       	pop	r27
 c7c:	af 91       	pop	r26
 c7e:	9f 91       	pop	r25
 c80:	8f 91       	pop	r24
 c82:	7f 91       	pop	r23
 c84:	6f 91       	pop	r22
 c86:	5f 91       	pop	r21
 c88:	4f 91       	pop	r20
 c8a:	0f 90       	pop	r0
 c8c:	0f be       	out	0x3f, r0	; 63
 c8e:	0f 90       	pop	r0
 c90:	1f 90       	pop	r1
 c92:	18 95       	reti

00000c94 <__fixunssfsi>:
 c94:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_splitA>
 c98:	88 f0       	brcs	.+34     	; 0xcbc <__fixunssfsi+0x28>
 c9a:	9f 57       	subi	r25, 0x7F	; 127
 c9c:	98 f0       	brcs	.+38     	; 0xcc4 <__fixunssfsi+0x30>
 c9e:	b9 2f       	mov	r27, r25
 ca0:	99 27       	eor	r25, r25
 ca2:	b7 51       	subi	r27, 0x17	; 23
 ca4:	b0 f0       	brcs	.+44     	; 0xcd2 <__fixunssfsi+0x3e>
 ca6:	e1 f0       	breq	.+56     	; 0xce0 <__fixunssfsi+0x4c>
 ca8:	66 0f       	add	r22, r22
 caa:	77 1f       	adc	r23, r23
 cac:	88 1f       	adc	r24, r24
 cae:	99 1f       	adc	r25, r25
 cb0:	1a f0       	brmi	.+6      	; 0xcb8 <__fixunssfsi+0x24>
 cb2:	ba 95       	dec	r27
 cb4:	c9 f7       	brne	.-14     	; 0xca8 <__fixunssfsi+0x14>
 cb6:	14 c0       	rjmp	.+40     	; 0xce0 <__fixunssfsi+0x4c>
 cb8:	b1 30       	cpi	r27, 0x01	; 1
 cba:	91 f0       	breq	.+36     	; 0xce0 <__fixunssfsi+0x4c>
 cbc:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fp_zero>
 cc0:	b1 e0       	ldi	r27, 0x01	; 1
 cc2:	08 95       	ret
 cc4:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__fp_zero>
 cc8:	67 2f       	mov	r22, r23
 cca:	78 2f       	mov	r23, r24
 ccc:	88 27       	eor	r24, r24
 cce:	b8 5f       	subi	r27, 0xF8	; 248
 cd0:	39 f0       	breq	.+14     	; 0xce0 <__fixunssfsi+0x4c>
 cd2:	b9 3f       	cpi	r27, 0xF9	; 249
 cd4:	cc f3       	brlt	.-14     	; 0xcc8 <__fixunssfsi+0x34>
 cd6:	86 95       	lsr	r24
 cd8:	77 95       	ror	r23
 cda:	67 95       	ror	r22
 cdc:	b3 95       	inc	r27
 cde:	d9 f7       	brne	.-10     	; 0xcd6 <__fixunssfsi+0x42>
 ce0:	3e f4       	brtc	.+14     	; 0xcf0 <__fixunssfsi+0x5c>
 ce2:	90 95       	com	r25
 ce4:	80 95       	com	r24
 ce6:	70 95       	com	r23
 ce8:	61 95       	neg	r22
 cea:	7f 4f       	sbci	r23, 0xFF	; 255
 cec:	8f 4f       	sbci	r24, 0xFF	; 255
 cee:	9f 4f       	sbci	r25, 0xFF	; 255
 cf0:	08 95       	ret

00000cf2 <__floatunsisf>:
 cf2:	e8 94       	clt
 cf4:	09 c0       	rjmp	.+18     	; 0xd08 <__floatsisf+0x12>

00000cf6 <__floatsisf>:
 cf6:	97 fb       	bst	r25, 7
 cf8:	3e f4       	brtc	.+14     	; 0xd08 <__floatsisf+0x12>
 cfa:	90 95       	com	r25
 cfc:	80 95       	com	r24
 cfe:	70 95       	com	r23
 d00:	61 95       	neg	r22
 d02:	7f 4f       	sbci	r23, 0xFF	; 255
 d04:	8f 4f       	sbci	r24, 0xFF	; 255
 d06:	9f 4f       	sbci	r25, 0xFF	; 255
 d08:	99 23       	and	r25, r25
 d0a:	a9 f0       	breq	.+42     	; 0xd36 <__floatsisf+0x40>
 d0c:	f9 2f       	mov	r31, r25
 d0e:	96 e9       	ldi	r25, 0x96	; 150
 d10:	bb 27       	eor	r27, r27
 d12:	93 95       	inc	r25
 d14:	f6 95       	lsr	r31
 d16:	87 95       	ror	r24
 d18:	77 95       	ror	r23
 d1a:	67 95       	ror	r22
 d1c:	b7 95       	ror	r27
 d1e:	f1 11       	cpse	r31, r1
 d20:	f8 cf       	rjmp	.-16     	; 0xd12 <__floatsisf+0x1c>
 d22:	fa f4       	brpl	.+62     	; 0xd62 <__floatsisf+0x6c>
 d24:	bb 0f       	add	r27, r27
 d26:	11 f4       	brne	.+4      	; 0xd2c <__floatsisf+0x36>
 d28:	60 ff       	sbrs	r22, 0
 d2a:	1b c0       	rjmp	.+54     	; 0xd62 <__floatsisf+0x6c>
 d2c:	6f 5f       	subi	r22, 0xFF	; 255
 d2e:	7f 4f       	sbci	r23, 0xFF	; 255
 d30:	8f 4f       	sbci	r24, 0xFF	; 255
 d32:	9f 4f       	sbci	r25, 0xFF	; 255
 d34:	16 c0       	rjmp	.+44     	; 0xd62 <__floatsisf+0x6c>
 d36:	88 23       	and	r24, r24
 d38:	11 f0       	breq	.+4      	; 0xd3e <__floatsisf+0x48>
 d3a:	96 e9       	ldi	r25, 0x96	; 150
 d3c:	11 c0       	rjmp	.+34     	; 0xd60 <__floatsisf+0x6a>
 d3e:	77 23       	and	r23, r23
 d40:	21 f0       	breq	.+8      	; 0xd4a <__floatsisf+0x54>
 d42:	9e e8       	ldi	r25, 0x8E	; 142
 d44:	87 2f       	mov	r24, r23
 d46:	76 2f       	mov	r23, r22
 d48:	05 c0       	rjmp	.+10     	; 0xd54 <__floatsisf+0x5e>
 d4a:	66 23       	and	r22, r22
 d4c:	71 f0       	breq	.+28     	; 0xd6a <__floatsisf+0x74>
 d4e:	96 e8       	ldi	r25, 0x86	; 134
 d50:	86 2f       	mov	r24, r22
 d52:	70 e0       	ldi	r23, 0x00	; 0
 d54:	60 e0       	ldi	r22, 0x00	; 0
 d56:	2a f0       	brmi	.+10     	; 0xd62 <__floatsisf+0x6c>
 d58:	9a 95       	dec	r25
 d5a:	66 0f       	add	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	da f7       	brpl	.-10     	; 0xd58 <__floatsisf+0x62>
 d62:	88 0f       	add	r24, r24
 d64:	96 95       	lsr	r25
 d66:	87 95       	ror	r24
 d68:	97 f9       	bld	r25, 7
 d6a:	08 95       	ret

00000d6c <__fp_split3>:
 d6c:	57 fd       	sbrc	r21, 7
 d6e:	90 58       	subi	r25, 0x80	; 128
 d70:	44 0f       	add	r20, r20
 d72:	55 1f       	adc	r21, r21
 d74:	59 f0       	breq	.+22     	; 0xd8c <__fp_splitA+0x10>
 d76:	5f 3f       	cpi	r21, 0xFF	; 255
 d78:	71 f0       	breq	.+28     	; 0xd96 <__fp_splitA+0x1a>
 d7a:	47 95       	ror	r20

00000d7c <__fp_splitA>:
 d7c:	88 0f       	add	r24, r24
 d7e:	97 fb       	bst	r25, 7
 d80:	99 1f       	adc	r25, r25
 d82:	61 f0       	breq	.+24     	; 0xd9c <__fp_splitA+0x20>
 d84:	9f 3f       	cpi	r25, 0xFF	; 255
 d86:	79 f0       	breq	.+30     	; 0xda6 <__fp_splitA+0x2a>
 d88:	87 95       	ror	r24
 d8a:	08 95       	ret
 d8c:	12 16       	cp	r1, r18
 d8e:	13 06       	cpc	r1, r19
 d90:	14 06       	cpc	r1, r20
 d92:	55 1f       	adc	r21, r21
 d94:	f2 cf       	rjmp	.-28     	; 0xd7a <__fp_split3+0xe>
 d96:	46 95       	lsr	r20
 d98:	f1 df       	rcall	.-30     	; 0xd7c <__fp_splitA>
 d9a:	08 c0       	rjmp	.+16     	; 0xdac <__fp_splitA+0x30>
 d9c:	16 16       	cp	r1, r22
 d9e:	17 06       	cpc	r1, r23
 da0:	18 06       	cpc	r1, r24
 da2:	99 1f       	adc	r25, r25
 da4:	f1 cf       	rjmp	.-30     	; 0xd88 <__fp_splitA+0xc>
 da6:	86 95       	lsr	r24
 da8:	71 05       	cpc	r23, r1
 daa:	61 05       	cpc	r22, r1
 dac:	08 94       	sec
 dae:	08 95       	ret

00000db0 <__fp_zero>:
 db0:	e8 94       	clt

00000db2 <__fp_szero>:
 db2:	bb 27       	eor	r27, r27
 db4:	66 27       	eor	r22, r22
 db6:	77 27       	eor	r23, r23
 db8:	cb 01       	movw	r24, r22
 dba:	97 f9       	bld	r25, 7
 dbc:	08 95       	ret

00000dbe <__mulsf3>:
 dbe:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3x>
 dc2:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_round>
 dc6:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fp_pscA>
 dca:	38 f0       	brcs	.+14     	; 0xdda <__mulsf3+0x1c>
 dcc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__fp_pscB>
 dd0:	20 f0       	brcs	.+8      	; 0xdda <__mulsf3+0x1c>
 dd2:	95 23       	and	r25, r21
 dd4:	11 f0       	breq	.+4      	; 0xdda <__mulsf3+0x1c>
 dd6:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_inf>
 dda:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_nan>
 dde:	11 24       	eor	r1, r1
 de0:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_szero>

00000de4 <__mulsf3x>:
 de4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_split3>
 de8:	70 f3       	brcs	.-36     	; 0xdc6 <__mulsf3+0x8>

00000dea <__mulsf3_pse>:
 dea:	95 9f       	mul	r25, r21
 dec:	c1 f3       	breq	.-16     	; 0xdde <__mulsf3+0x20>
 dee:	95 0f       	add	r25, r21
 df0:	50 e0       	ldi	r21, 0x00	; 0
 df2:	55 1f       	adc	r21, r21
 df4:	62 9f       	mul	r22, r18
 df6:	f0 01       	movw	r30, r0
 df8:	72 9f       	mul	r23, r18
 dfa:	bb 27       	eor	r27, r27
 dfc:	f0 0d       	add	r31, r0
 dfe:	b1 1d       	adc	r27, r1
 e00:	63 9f       	mul	r22, r19
 e02:	aa 27       	eor	r26, r26
 e04:	f0 0d       	add	r31, r0
 e06:	b1 1d       	adc	r27, r1
 e08:	aa 1f       	adc	r26, r26
 e0a:	64 9f       	mul	r22, r20
 e0c:	66 27       	eor	r22, r22
 e0e:	b0 0d       	add	r27, r0
 e10:	a1 1d       	adc	r26, r1
 e12:	66 1f       	adc	r22, r22
 e14:	82 9f       	mul	r24, r18
 e16:	22 27       	eor	r18, r18
 e18:	b0 0d       	add	r27, r0
 e1a:	a1 1d       	adc	r26, r1
 e1c:	62 1f       	adc	r22, r18
 e1e:	73 9f       	mul	r23, r19
 e20:	b0 0d       	add	r27, r0
 e22:	a1 1d       	adc	r26, r1
 e24:	62 1f       	adc	r22, r18
 e26:	83 9f       	mul	r24, r19
 e28:	a0 0d       	add	r26, r0
 e2a:	61 1d       	adc	r22, r1
 e2c:	22 1f       	adc	r18, r18
 e2e:	74 9f       	mul	r23, r20
 e30:	33 27       	eor	r19, r19
 e32:	a0 0d       	add	r26, r0
 e34:	61 1d       	adc	r22, r1
 e36:	23 1f       	adc	r18, r19
 e38:	84 9f       	mul	r24, r20
 e3a:	60 0d       	add	r22, r0
 e3c:	21 1d       	adc	r18, r1
 e3e:	82 2f       	mov	r24, r18
 e40:	76 2f       	mov	r23, r22
 e42:	6a 2f       	mov	r22, r26
 e44:	11 24       	eor	r1, r1
 e46:	9f 57       	subi	r25, 0x7F	; 127
 e48:	50 40       	sbci	r21, 0x00	; 0
 e4a:	9a f0       	brmi	.+38     	; 0xe72 <__mulsf3_pse+0x88>
 e4c:	f1 f0       	breq	.+60     	; 0xe8a <__mulsf3_pse+0xa0>
 e4e:	88 23       	and	r24, r24
 e50:	4a f0       	brmi	.+18     	; 0xe64 <__mulsf3_pse+0x7a>
 e52:	ee 0f       	add	r30, r30
 e54:	ff 1f       	adc	r31, r31
 e56:	bb 1f       	adc	r27, r27
 e58:	66 1f       	adc	r22, r22
 e5a:	77 1f       	adc	r23, r23
 e5c:	88 1f       	adc	r24, r24
 e5e:	91 50       	subi	r25, 0x01	; 1
 e60:	50 40       	sbci	r21, 0x00	; 0
 e62:	a9 f7       	brne	.-22     	; 0xe4e <__mulsf3_pse+0x64>
 e64:	9e 3f       	cpi	r25, 0xFE	; 254
 e66:	51 05       	cpc	r21, r1
 e68:	80 f0       	brcs	.+32     	; 0xe8a <__mulsf3_pse+0xa0>
 e6a:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_inf>
 e6e:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_szero>
 e72:	5f 3f       	cpi	r21, 0xFF	; 255
 e74:	e4 f3       	brlt	.-8      	; 0xe6e <__mulsf3_pse+0x84>
 e76:	98 3e       	cpi	r25, 0xE8	; 232
 e78:	d4 f3       	brlt	.-12     	; 0xe6e <__mulsf3_pse+0x84>
 e7a:	86 95       	lsr	r24
 e7c:	77 95       	ror	r23
 e7e:	67 95       	ror	r22
 e80:	b7 95       	ror	r27
 e82:	f7 95       	ror	r31
 e84:	e7 95       	ror	r30
 e86:	9f 5f       	subi	r25, 0xFF	; 255
 e88:	c1 f7       	brne	.-16     	; 0xe7a <__mulsf3_pse+0x90>
 e8a:	fe 2b       	or	r31, r30
 e8c:	88 0f       	add	r24, r24
 e8e:	91 1d       	adc	r25, r1
 e90:	96 95       	lsr	r25
 e92:	87 95       	ror	r24
 e94:	97 f9       	bld	r25, 7
 e96:	08 95       	ret

00000e98 <__fp_inf>:
 e98:	97 f9       	bld	r25, 7
 e9a:	9f 67       	ori	r25, 0x7F	; 127
 e9c:	80 e8       	ldi	r24, 0x80	; 128
 e9e:	70 e0       	ldi	r23, 0x00	; 0
 ea0:	60 e0       	ldi	r22, 0x00	; 0
 ea2:	08 95       	ret

00000ea4 <__fp_nan>:
 ea4:	9f ef       	ldi	r25, 0xFF	; 255
 ea6:	80 ec       	ldi	r24, 0xC0	; 192
 ea8:	08 95       	ret

00000eaa <__fp_pscA>:
 eaa:	00 24       	eor	r0, r0
 eac:	0a 94       	dec	r0
 eae:	16 16       	cp	r1, r22
 eb0:	17 06       	cpc	r1, r23
 eb2:	18 06       	cpc	r1, r24
 eb4:	09 06       	cpc	r0, r25
 eb6:	08 95       	ret

00000eb8 <__fp_pscB>:
 eb8:	00 24       	eor	r0, r0
 eba:	0a 94       	dec	r0
 ebc:	12 16       	cp	r1, r18
 ebe:	13 06       	cpc	r1, r19
 ec0:	14 06       	cpc	r1, r20
 ec2:	05 06       	cpc	r0, r21
 ec4:	08 95       	ret

00000ec6 <__fp_round>:
 ec6:	09 2e       	mov	r0, r25
 ec8:	03 94       	inc	r0
 eca:	00 0c       	add	r0, r0
 ecc:	11 f4       	brne	.+4      	; 0xed2 <__fp_round+0xc>
 ece:	88 23       	and	r24, r24
 ed0:	52 f0       	brmi	.+20     	; 0xee6 <__fp_round+0x20>
 ed2:	bb 0f       	add	r27, r27
 ed4:	40 f4       	brcc	.+16     	; 0xee6 <__fp_round+0x20>
 ed6:	bf 2b       	or	r27, r31
 ed8:	11 f4       	brne	.+4      	; 0xede <__fp_round+0x18>
 eda:	60 ff       	sbrs	r22, 0
 edc:	04 c0       	rjmp	.+8      	; 0xee6 <__fp_round+0x20>
 ede:	6f 5f       	subi	r22, 0xFF	; 255
 ee0:	7f 4f       	sbci	r23, 0xFF	; 255
 ee2:	8f 4f       	sbci	r24, 0xFF	; 255
 ee4:	9f 4f       	sbci	r25, 0xFF	; 255
 ee6:	08 95       	ret

00000ee8 <__umulhisi3>:
 ee8:	a2 9f       	mul	r26, r18
 eea:	b0 01       	movw	r22, r0
 eec:	b3 9f       	mul	r27, r19
 eee:	c0 01       	movw	r24, r0
 ef0:	a3 9f       	mul	r26, r19
 ef2:	70 0d       	add	r23, r0
 ef4:	81 1d       	adc	r24, r1
 ef6:	11 24       	eor	r1, r1
 ef8:	91 1d       	adc	r25, r1
 efa:	b2 9f       	mul	r27, r18
 efc:	70 0d       	add	r23, r0
 efe:	81 1d       	adc	r24, r1
 f00:	11 24       	eor	r1, r1
 f02:	91 1d       	adc	r25, r1
 f04:	08 95       	ret

00000f06 <__muluhisi3>:
 f06:	0e 94 74 07 	call	0xee8	; 0xee8 <__umulhisi3>
 f0a:	a5 9f       	mul	r26, r21
 f0c:	90 0d       	add	r25, r0
 f0e:	b4 9f       	mul	r27, r20
 f10:	90 0d       	add	r25, r0
 f12:	a4 9f       	mul	r26, r20
 f14:	80 0d       	add	r24, r0
 f16:	91 1d       	adc	r25, r1
 f18:	11 24       	eor	r1, r1
 f1a:	08 95       	ret

00000f1c <_exit>:
 f1c:	f8 94       	cli

00000f1e <__stop_program>:
 f1e:	ff cf       	rjmp	.-2      	; 0xf1e <__stop_program>
